{"title": "ragamAI: A Network Based Recommender System to Arrange a Indian Classical Music Concert", "authors": "Arunkumar Bagavathi; Siddharth Krishnan; Sanjay Subrahmanyan; S L Narasimhan", "pub_date": "2019-12-08", "abstract": "South Indian classical music (Carnatic music) is best consumed through live concerts. A carnatic recital requires meticulous planning accounting for several parameters like the performers' repertoire, composition variety, musical versatility, thematic structure, the recital's arrangement, etc. to ensure that the audience have a comprehensive listening experience. In this work, we present ragamAI a novel machine learning framework that utilizes the tonic nuances and musical structures in the carnatic music to generate a concert recital that melodically captures the entire range in an octave. Utilizing the underlying idea of playlist and session-based recommender models, the proposed model studies the mathematical structure present in past concerts and recommends relevant items for the playlist/concert. ragamAI ensembles recommendations given by multiple models to learn user idea and past preference of sequences in concerts to extract recommendations. Our experiments on a vast collection of concert show that our model performs 25%-50% better than baseline models. ragamAI's applications are two-fold. 1) it will assist musicians to customize their performance with the necessary variety required to sustain the interest of the audience for the entirety of the concert 2) it will generate carefully curated lists of south Indian classical music so that the listener can discover the wide range of melody that the musical system can offer.", "sections": [{"heading": "I. INTRODUCTION", "text": "The analysis of classical music has become a mainstay in the field of music information retrieval (MIR) over the last decade. Recent research has investigated several nuances of classical music, be it in rhythm cycles, tempo estimation, beat tracking, instrument classification, and melodic analysis, using data-driven techniques. However, there is a paucity of work in bridging these information retrieval techniques to applications like playlist recommendations and automated concert planners. In this work, using the lens of south Indian classical music, also known as Carnatic music, we exploit the grammatical structure and mathematical underpinnings of the music system to develop a machine learning model that can be applied to build a concert plan. While there are several recent works that model different aspects of Indian classical music, to the best of our knowledge we are the first to use the melodic structure, defined as a ragam, present in the music system to design a recommender system. Carnatic musicians have been relying on their repertoire and memory to design song lists in the past. An automated system will enhance the experience and make it more versatile in the development of a concert song list. The proposed model can also be used as an ideal tool to improve a repertoire given that it can draw on source material from different types of databases that suit the case. Moreover, the model can also be used to generate music playlists for streaming applications like Spotify, Pandora, last.fm, etc. to provide an enriching experience that encompasses the musical range offered by the carnatic system in a song sequence.\nThe efficacy of a session-based recommendation model is to provide desired items for a user in their current session based on their past preferences. For example, a video streaming service like YouTube predicting the user's preference to watch next. In the research literature, there are several frameworks and methodologies for music and video playlist recommendations. Given the mathematical details in south Indian classical music and the task of arranging songs in a concert for a musician, we formulate this problem as session (concert)based playlist (song) recommendation and propose a network based recommender model. We give a network/graph representation for sequences in Indian classical music concerts with our proposed Raaga network. Along with features extracted from the network, the proposed model capture co-occurrences, melodic patterns, and musician's preference of flow in concerts as features. With experiments we show that inclusion of such features improve the performance of recommender model in constructing Indian classical music concerts.\nIn this work, we aim to solve following research questions by providing a music recommender framework for Indian classical music concerts:\n\u2022 How the concerts can be structured to understand its organization? We propose a network structure called Raaga Network that captures order, co-occurrence, and context of each item(song/raaga) in concerts. \u2022 Can historical data help musicians to build new repertoire? We postulate a network-based machine learning model to recommend items(songs/raagas) based on their underlying structure and mathematical constructs in Raaga Network. We frame this model to extract a set of recommendations for a given sequence of songs. \u2022 How useful are item(songs/raagas) recommendations given by the models? We evaluate the usefulness of recommendations from the proposed framework using offline methods like precision and discounted cumulative gain.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "II. RELATED WORK", "text": "Innovations in machine learning helped the scientific community to contribute to large scale recommendation systems like Pinterest [1] and Spotify [2]. All recommender systems fall in one of the three categories: content-based (domain dependent), collaborative (domain independent), and hybrid (multi-model frameworks) [3]. These algorithmically constructed systems are evaluated using either offline measures like precision, recall, mean average precision(MAP), Normalized Discounted Cumulative Gain(nDCG) or online measures like A/B test and p-value [4].\nAdvancements in recommendation systems have been applied to music domain as well, Spotify and Pandora for example. The most popular problem in music recommendations is to select a set of songs as a playlist for a user based on their mood and preferred genre and artist [5]. This problem has been answered using multiple methods like: frequent pattern mining [6], collaborative filtering [7], and hybrid models [8]. IN addition to the playlist recommendation models are the session-based prediction models (i.e.), [9]- [11]. Novelty and diversity are considered to be important evaluation measures for music recommendation models [12] to provide the user interesting and unexplored suggestions. In this paper, we present a session-based recommendation model that utilizes deep learning algorithms to give recommendations.\nMachine learning has been used in the Indian classical music over the past decade to study multitude of concepts. For example, classifying recordings from YouTube based on the swara using random forest algorithm [13], using pitch information in music signals [14], and a vector based classification model [15], similar to text classification model. Identifying tonic of a music from multi-pitch analysis of the given audio was also given as a classification problem [16]. Unlike the existing methods, we describe methods through the lens of recommender systems. We incorporate the idea of embedding possible features from historical concerts and frequent pattern mining methods to make recommendations. Moreover, our model is designed as a human computer interaction system to communicate recommendations.", "publication_ref": ["b0", "b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "b10", "b11", "b12", "b13", "b14", "b15"], "figure_ref": [], "table_ref": []}, {"heading": "III. BACKGROUND", "text": "Carnatic music is the classical music system of Southern India. The Carnatic music tradition is built on the melodic foundation of the ragam or scale that encompasses a collection of swaras (notes) in an octave. The scale follows a 12 note per octave system. This has been expanded into a 16 note system through the 72 melakarta scheme. The ragam system over the last 3 or more centuries has evolved into being categorized according to the mela janya scheme where by ragams are either parent scales or derivatives (mela or janya).\nA melakarta by definition will have the same notes in both its ascending and descending scales. The math in the organization of the melakarta scheme will give an idea of the variety of ragams available for musicians to learn, practice, and perform. A typical octave will have the 7 basic notes: S R G M P D N. The S and the P are fixed and static notes. R, G, M, D, N will have different variations lie R1, R2, R3, G1, G2, G3, M1, M2, D1, D2, D3, , N1, N2, N3. If one looks at the frequency values of these notes, R3 corresponds to G1 and D3 corresponds to N1. The melakarta scheme by definition will have a set of 7 notes with S and P constant. So the first ragam will be S R1, G1, M1, P, D1, N1, . The scheme also follows the rule that there will only be one variety of each note that is permissible. So there can be no occurrence of R1 and R2 in a melakarta. Another constraint is that since the frequency values of R3 and G1 are the same they will never occur together. So typically the scheme follows the system of the ragams 1 -36 having S, M1 & P as constants and 37 -72 having S, M2 & P as constants.\nSubdividing the ragams further the first 6 will have S R1, G1, M1, P as constants and the six variations will add the combinations D1/N1, D1/N2, D1/N3, D2/N2, D2/N3 & D3/N3. The next six will have R1/G2 with the six varities of D/N and so on to arrive at a total of 72 ragams.\nThe janya ragams are derivative scales from the parent. Janya ragams have no rules. One can miss few notes in the scale and they can even have different ascending and descending scales.\nA typical Carnatic music concert consists of pieces that are performed over a 60 -240 minute period depending on the artist and location. Each composition in a concert can be of varying lengths and usually revolving around a central piece (main ragam). Performers therefore have to train a huge repertoire of compositions set to perform in a variety of ragams. These ragams offer melodic variety in terms of sound, color, and aesthetics. This variety comes through a process of inherent differences because of the specific notes occurring as well as musical and aesthetic differences based on how they are handled by the musician.\nThe challenge therefore to the performer is to come up with a list of pieces that can offer variety musically, keep the listener engaged and remain fresh so as to avoid being stale and monotonous. A primary constraint of any song list would be non repetition of ragams. The Carnatic music system technically has innumerable ragams, however the numbers in vogue and practiced on a regular basis would probably be in the region of less than 1000. The second aspect of choosing pieces will be compositions. The process involved is coming up with an ideal list of pieces for a concert is taking into consideration both compositions and ragas. All compositions are set to a particular ragam and the entire rendition of the same will conform to that scale of notes only. We plan to exploit composition based recommendations in our follow-up work.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "IV. METHODOLOGIES", "text": "The proposed ragamAI framework relies on the influence of two separate models: 1. a deep attention model to capture the importance of sequence of ragams, and 2. an embedding model to capture the importance of hand picked features to train. Unlike other methods, which predict next event or item in a given sequence [6], [9], [17]- [19], the proposed model(s)  All our models use both 1-to-1 mapping of features and feature similarity to measure relevancy of recommendations. An overview of the proposed model is represented in Figure 1 A. Raaga network Networks or graphs have been considered as a promising framework to study variety of applications like influence modeling [20], community detection [21], and recommender systems [22]. Their organization of nodes and edges help to study the structural organization and positional values of entities (nodes and communities). We propose the Raaga network as a systematic representation for concerts, where each concert is an ordered transaction of items (songs/ragams). Formally, we define the Raaga network as G = (R, E, w), where R is a set of items/ragams, E is a set of edges representing the flow from one ragam(R m ) to the next(R n ) \u2200R m , R n \u2208 R, w is edge weight representing the overall frequency of the sequence, and |R| = Total number of unique items/ragams. Example raaga networks are given in Figures 1 and2. We capture the order of ragams in concerts by maintaining a set of attributes\nA i = a 1 , a 2 . . . a n , where i = R 1 , R 2 . . . R |R| .\nExample attributes include concert id, ragam type, and tonic information of a ragam. The proposed network gives intuition on the flow of each concert and gives an intuition of a ragam's context throughout all concerts. We use this network as an underlying framework to produce recommendations in the proposed model.", "publication_ref": ["b5", "b8", "b16", "b18", "b19", "b20", "b21"], "figure_ref": ["fig_0", "fig_0", "fig_1"], "table_ref": []}, {"heading": "B. Ragam representation learning using node2vec", "text": "The structural knowledge from the ragam network can help the recommender model to give better results to the user based on their co-occurrence. We use a network embedding model: node2vec [23] to extract features of nodes in the raaga network. This model capture the node context with k-iterations of random walks of length l along with the optimization function given in Equation 1max\nf v\u2208R logP (N (v)|f (v))(1)\nwhere N (v) is the neighbor nodes of node v and the likelihood of the neighborhood of a node is modeled as a softmax function given in Equation 2\nP (N (v)|f (v)) = m\u2208N (v) exp(f (m).f (v)) w\u2208Rexp(f (w).f (v)) (2)\nThus with node2vec, we collect feature representation of each ragam from all the concerts. Since each data instance is given as a set of ragams in a concert, we aggregate the ragam vectors. Like many other session based applications, the number of songs in every music concerts also vary. Our model handles such variable length inputs by padding zero vector(s). Since order in the song sequence given in the feature vector may have different priorities, we use an attention model to get the concert vector (V c1 ) (given in Equation 3)\nV c1 = k i=1 \u03c3(W 1 s i-1 + W 2 s i + c)s i (3\n)\nwhere\nW 1 , W 2 \u2208 R d * d\n, k is the number of songs in the concert, and s is the vector representation of the given ragam i.", "publication_ref": ["b22"], "figure_ref": [], "table_ref": []}, {"heading": "C. Representing the hand picked features", "text": "Instead of optimizing the learning model (like node2vec), we give a simple strategy to embed a concert (or a set of songs/raaga) into a vector space. In other words, we represent a concert a distribution of concert features (audava,shadava, and sampoorna for example). All features considered for this study is given in Table I. For a given concert, we create one-hot encoded vectors for each ragam based on these hand picked features. We aggregate the features with element-wise average on all the vectors. Thus we represent entire concert into a vector space(V c2 ).", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "D. RagamAI model", "text": "With concert vectors from the attention model (V c1 ) and the concert embedding model (V c2 ), we perform a linear transformation after concatenating the vectors to obtain the aggregate vector using the Equation 4\nV g = W 3 (V c1 \u2295 V c2 )(4)\nWe apply softmax function to get the |R| -dimensional output vector (y ), where each element in y vector represent a score for each ragam for recommendations and |R| is total number of nodes in the raaga network G.\nWe use cross-entropy, given in Equation 5, as a loss function for training the proposed model.\nL(y ) = - |R| i=1 y i log(y i ) + (1 -y i )log(1 -y i )(5)", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "V. EXPERIMENTS AND RESULTS", "text": "", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "A. Dataset", "text": "We use the real world data consisting of concerts performed by multiple Indian classical musicians. The data comprises of 1664 concerts performed between 1984 and 2019 with more than 800 unique songs and 280 unique ragams. Each concert is a set of songs, where each song can map to its corresponding ragam. A performer's creativity, impromptu improvisations, and different song durations during the concert, the number of songs in each concert is a dynamic value. Also, since all these concerts are performed in several locations around the world, the songs and the concert style (organization of songs and ragams) are unique. In Figure 3, we give basic data distribution available in our data. As implied in Figure 3a, most concerts have in the range of 9-16 songs. Figure 3b,3c, and3d give distribution of other features in concerts and we give proportion of songs matching these features in concerts. For example, Figure 3b gives the ratio of number of songs in a concert is janya or melakartha ragam, and Figure 3d gives the ratio of types of ragams in concerts(audava,sampoorna,vakra, and other ragams). Due to space constraints, we neglected the distribution of rarely occurring type of ragam(shadava ragam) from this figure. Our data also consists of metadata of all 280 ragams. We use concert structure(organization of ragams in each concert) to build the raaga network and we populate metadata as node features in the network. We further use this network of ragam patterns in experiments for the proposed model to recommend ragams. TABLE I: Features of ragams in the RagaNetwork. Each node in the raga network depicts a ragam and thus each node holds the below features. Although position of ragams in a concert is important, it can be identified by traversing before and after nodes matching the concert id. ", "publication_ref": [], "figure_ref": ["fig_2", "fig_2", "fig_2", "fig_2", "fig_2", "fig_2"], "table_ref": []}, {"heading": "B. Baseline Models", "text": "Below are some of the popular baseline models that we used to compare our methods\n\u2022 Item-kNN [24]: Item-kNN is similar to extracting the nearby recommendations. In this method, we find cooccurring items normalized by popularity of all items in the list.\n\u2022 FPMC [25]: Factorized Personalized Markov Chain is one of the popular models to recommend sequential item in a list. FPMC models the user preference on a list and the preference transitions to recommend next set of items.\n\u2022 SWIWO [17]: Session-based Wide In Wide Out(SWIWO) is a deep learning based recommender model that uses a both user and item based feature set to predict the next item. To adapt to our problem, we eliminate the user feature section and add a softmax layer to predict the score of items for a given sequence.\nWe compare proposed model against existing methods in producing recommendations for south Indian classical music concerts. To make fair comparison, we use offline evaluation methods for all algorithms, similar to comparisons made in existing works. In particular, we use following evaluation methods:\n\u2022 Precision@k: We evaluate on number of recommendations (k) to make (i.e.) We evaluate from k = 1 (Recommending just one item) to k = 15 (Recommending 15 items). \u2022 Normalized Discounted Cumulative Gain(nDCG): It is a measure to evaluate the rank of relevant recommendations, calculated using the formula given in Equation 6nDCG\n= n i=1 1 log2(i) DCG id(6)\n, where n is the number of items in the list to predicted correctly, i is the position of the relevant item in the recommendation, DCG id is an ideal score for the given test sample. Similar to Precision@k, we give results of nDCG@k, where k is the number of items to recommend.  ", "publication_ref": ["b23", "b24", "b16"], "figure_ref": [], "table_ref": []}, {"heading": "C. Results", "text": "For all our experiments we split the available concerts into training (80%) and test (20%) data, where the training data is used as historical data and the test data is considered as new concerts. Since the goal is to recommend ragams for incomplete concert list and number of ragams in a concert is inconsistent, we conduct our experiments with an assumption Fig. 5: nDCG@k evaluation for different models that the user starts with one ragam (first ragam from the test concert), the system gives prediction and evaluate obtain results, then it considers first two ragams, and the cycle continues. For training the model, we split each concert into multiple sequences in such a way that all instances have at least one user input ragam and one prediction. All results that we report here is an average score of all measures. Figure 4 gives precision@k scores and the Figure 5 gives nDCG@k scores for all baseline and proposed models, where k is the required number of recommendations. We use the average number of songs in overall concerts as the upper bound(15 recommendations), while maintaining a simple lower bound(1 recommendation). From these plots, we can evidence that the baseline models give poor performance in giving recommendations for south Indian classical music concerts. Importantly, we can study from Figure 5 that primarily the proposed ragamAI model give more relevant predictions with even shorter list of recommendations. It is also evident from these plots that structural organization of ragams in Indian classical music concerts play a vital role in building recommendations.\nTable II gives the ablation study with multiple combinations in the proposed model. It is evident from these results that each model gives only average performance compared to the proposed model when used alone for the recommendation task. When both features combined as given in the proposed model, we get improved performance.", "publication_ref": [], "figure_ref": ["fig_3"], "table_ref": ["tab_1"]}, {"heading": "VI. CONCLUSION AND DISCUSSION", "text": "Session-based item recommendation systems have gained many innovations by incorporating deep learning models for variety of applications. Session-based systems can give a precise set of recommendations based on a user's current session activity and their past preferences. In this work we proposed such a model to recommend a set of ragam(music scale in Indian classical music) to perform in a concert, given a set of preferred ragams. Particularly, we proposed a networkbased deep learning approach to utilize both hand picked features and structural features of ragam sequences in concerts for the recommendation task. With the experiments, we show that our model can outperform state-of-the-art methods in recommending songs for Indian classical music concerts.\nAlthough this is the first step to merge recommender system with classical music concerts, the model can be extended in several ways in the future: 1. Even though a ragam is an integral part of a song, adding the composer and composition level features to recommend songs benefit and save time for musicians to arrange the concert, 2. Generalize the architecture to support multiple forms of classical music like Western classical music, and 3. Such an extensive model can be adopted in music streaming services like Pandora and Spotify to match the listener preference in the classical music.", "publication_ref": [], "figure_ref": [], "table_ref": []}], "references": [{"ref_id": "b0", "title": "Hierarchical temporal convolutional networks for dynamic recommender systems", "journal": "ser. WWW '", "year": "2019", "authors": "J You; Y Wang; A Pal; P Eksombatchai; C Rosenburg; J Leskovec"}, {"ref_id": "b1", "title": "Understanding user-curated playlists on spotify: A machine learning approach", "journal": "Int. J. Multimed. Data Eng. Manag", "year": "2017-10", "authors": "M Pichl; E Zangerle; G Specht"}, {"ref_id": "b2", "title": "Recommendation systems: Principles, methods and evaluation", "journal": "Egyptian Informatics Journal", "year": "2015", "authors": "F Isinkaye; Y Folajimi; B Ojokoh"}, {"ref_id": "b3", "title": "Evaluating recommender systems", "journal": "Springer", "year": "2015", "authors": "A Gunawardana; G Shani"}, {"ref_id": "b4", "title": "Automated generation of music playlists: Survey and experiments", "journal": "ACM Comput. Surv", "year": "2014-11", "authors": "G Bonnin; D Jannach"}, {"ref_id": "b5", "title": "Playlist prediction via metric embedding", "journal": "", "year": "2012", "authors": "S Chen; J L Moore; D Turnbull; T Joachims"}, {"ref_id": "b6", "title": "Exploring user-specific information in music retrieval", "journal": "", "year": "2017", "authors": "Z Cheng; J Shen; L Nie; T.-S Chua; M Kankanhalli"}, {"ref_id": "b7", "title": "Evaluating hybrid music recommender systems", "journal": "", "year": "2013", "authors": "T Hornung; C.-N Ziegler; S Franz; M Przyjaciel-Zablocki; A Sch\u00e4tzle; G Lausen"}, {"ref_id": "b8", "title": "Sessionbased recommendations with recurrent neural networks", "journal": "CoRR", "year": "2016", "authors": "B Hidasi; A Karatzoglou; L Baltrunas; D Tikk"}, {"ref_id": "b9", "title": "When recurrent neural networks meet the neighborhood for session-based recommendation", "journal": "", "year": "2017", "authors": "D Jannach; M Ludewig"}, {"ref_id": "b10", "title": "Recurrent neural networks with topk gains for session-based recommendations", "journal": "", "year": "2018", "authors": "B Hidasi; A Karatzoglou"}, {"ref_id": "b11", "title": "Tailoring music recommendations to users by considering diversity, mainstreaminess, and novelty", "journal": "", "year": "2015", "authors": "M Schedl; D Hauger"}, {"ref_id": "b12", "title": "Swara histogram based structural analysis and identification of indian classical ragas", "journal": "", "year": "2013", "authors": "P Dighe; H Karnick; B Raj"}, {"ref_id": "b13", "title": "Identifying ragas in indian music", "journal": "IEEE", "year": "2014", "authors": "V Kumar; H Pandya; C Jawahar"}, {"ref_id": "b14", "title": "Phrase-based r\u0101ga recognition using vector space modeling", "journal": "", "year": "2016", "authors": "S Gulati; J Serra; V Ishwar; S Sent\u00fcrk; X Serra"}, {"ref_id": "b15", "title": "A multipitch approach to tonic identification in indian classical music", "journal": "", "year": "2012", "authors": "J Salamon; S Gulati; X Serra"}, {"ref_id": "b16", "title": "Diversifying personalized recommendation with user-session context", "journal": "", "year": "2017", "authors": "L Hu; L Cao; S Wang; G Xu; J Cao; Z Gu"}, {"ref_id": "b17", "title": "Attentionbased transactional context embedding for next-item recommendation", "journal": "", "year": "2018", "authors": "S Wang; L Hu; L Cao; X Huang; D Lian; W Liu"}, {"ref_id": "b18", "title": "Session-based recommendation with graph neural networks", "journal": "", "year": "2019", "authors": "S Wu; Y Tang; Y Zhu; L Wang; X Xie; T Tan"}, {"ref_id": "b19", "title": "Influence maximization in online social networks", "journal": "", "year": "2018", "authors": "C Aslay; L V Lakshmanan; W Lu; X Xiao"}, {"ref_id": "b20", "title": "Community detection in hypergraphs: Optimal statistical limit and efficient algorithms", "journal": "", "year": "2018", "authors": "I Chien; C.-Y Lin; I.-H Wang"}, {"ref_id": "b21", "title": "Graph convolutional neural networks for web-scale recommender systems", "journal": "", "year": "2018", "authors": "R Ying; R He; K Chen; P Eksombatchai; W L Hamilton; J Leskovec"}, {"ref_id": "b22", "title": "node2vec: Scalable feature learning for networks", "journal": "", "year": "2016", "authors": "A Grover; J Leskovec"}, {"ref_id": "b23", "title": "Amazon. com recommendations: Item-to-item collaborative filtering", "journal": "IEEE Internet computing", "year": "2003", "authors": "G Linden; B Smith; J York"}, {"ref_id": "b24", "title": "Factorizing personalized markov chains for next-basket recommendation", "journal": "ACM WWW", "year": "2010", "authors": "S Rendle; C Freudenthaler; L Schmidt-Thieme"}], "figures": [{"figure_label": "1", "figure_type": "figure", "figure_id": "fig_0", "figure_caption": "Fig. 1 :1Fig. 1: Architecture of the ragamAI. The model composes 3 layers: 1. Network embedding(skip-gram model) and Concert embedding(embed hand picked features), 2. Vector aggregation from two embedding, and 3. Recommendation", "figure_data": ""}, {"figure_label": "2", "figure_type": "figure", "figure_id": "fig_1", "figure_caption": "Fig. 2 :2Fig. 2: Sample raaga network constructed from concerts. Concerts C1,C2,C3, and C4 are represented as an ordered list of ragams. Colors in the figure are replaced with edge weights in all experiments. NOTE: Each song in a concert consists of only one ragam", "figure_data": ""}, {"figure_label": "3", "figure_type": "figure", "figure_id": "fig_2", "figure_caption": "Fig. 3 :3Fig. 3: Distribution of various aspects(features) of south Indian classical music performed by one musician.", "figure_data": ""}, {"figure_label": "4", "figure_type": "figure", "figure_id": "fig_3", "figure_caption": "Fig. 4 :4Fig. 4: Precision@k evaluation for different models", "figure_data": ""}, {"figure_label": "II", "figure_type": "table", "figure_id": "tab_1", "figure_caption": "Ablation study", "figure_data": "ModelPrecision@15nDCG@15Attention W/O node2vec0.15240.0189Attention0.21410.2167Concert Embedding0.25940.5398ragamAI0.48750.7561"}], "formulas": [{"formula_id": "formula_0", "formula_text": "A i = a 1 , a 2 . . . a n , where i = R 1 , R 2 . . . R |R| .", "formula_coordinates": [3.0, 365.2, 147.75, 197.84, 9.96]}, {"formula_id": "formula_1", "formula_text": "f v\u2208R logP (N (v)|f (v))(1)", "formula_coordinates": [3.0, 389.96, 351.06, 173.07, 20.06]}, {"formula_id": "formula_2", "formula_text": "P (N (v)|f (v)) = m\u2208N (v) exp(f (m).f (v)) w\u2208Rexp(f (w).f (v)) (2)", "formula_coordinates": [3.0, 343.18, 423.38, 219.85, 27.27]}, {"formula_id": "formula_3", "formula_text": "V c1 = k i=1 \u03c3(W 1 s i-1 + W 2 s i + c)s i (3", "formula_coordinates": [3.0, 363.77, 575.58, 195.39, 30.32]}, {"formula_id": "formula_4", "formula_text": ")", "formula_coordinates": [3.0, 559.16, 586.31, 3.87, 8.64]}, {"formula_id": "formula_5", "formula_text": "W 1 , W 2 \u2208 R d * d", "formula_coordinates": [3.0, 350.77, 613.03, 67.66, 11.23]}, {"formula_id": "formula_6", "formula_text": "V g = W 3 (V c1 \u2295 V c2 )(4)", "formula_coordinates": [4.0, 131.97, 222.43, 168.05, 9.65]}, {"formula_id": "formula_7", "formula_text": "L(y ) = - |R| i=1 y i log(y i ) + (1 -y i )log(1 -y i )(5)", "formula_coordinates": [4.0, 79.41, 328.64, 220.61, 31.18]}, {"formula_id": "formula_8", "formula_text": "= n i=1 1 log2(i) DCG id(6)", "formula_coordinates": [4.0, 431.89, 611.39, 131.14, 28.52]}], "doi": ""}

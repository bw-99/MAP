{"title": "e-Uber: A Crowdsourcing Platform for Electric Vehicle-based Ride-and Energy-sharing", "authors": "Ashutosh Timilsina; Simone Silvestri", "pub_date": "", "abstract": "The sharing-economy-based business model has recently seen success in the transportation and accommodation sectors with companies like Uber and Airbnb. There is growing interest in applying this model to energy systems, with modalities like peer-to-peer (P2P) Energy Trading, Electric Vehicles (EV)based Vehicle-to-Grid (V2G), Vehicle-to-Home (V2H), Vehicleto-Vehicle (V2V), and Battery Swapping Technology (BST). In this work, we exploit the increasing diffusion of EVs to realize a crowdsourcing platform called e-Uber that jointly enables ride-sharing and energy-sharing through V2G and BST. e-Uber exploits spatial crowdsourcing, reinforcement learning, and reverse auction theory. Specifically, the platform uses reinforcement learning to understand the drivers' preferences towards different ride-sharing and energy-sharing tasks. Based on these preferences, a personalized list is recommended to each driver through CMAB-based Algorithm for task Recommendation System (CARS). Drivers bid on their preferred tasks in their list in a reverse auction fashion. Then e-Uber solves the task assignment optimization problem that minimizes cost and guarantees V2G energy requirement. We prove that this problem is NP-hard and introduce a bipartite matching-inspired heuristic, Bipartite Matching-based Winner selection (BM W ), that has polynomial time complexity. Results from experiments using real data from NYC taxi trips and energy consumption show that e-Uber performs close to the optimum and finds better solutions compared to a state-of-the-art approach.", "sections": [{"heading": "I. INTRODUCTION", "text": "With the recent advent of sharing-economy-based models and their successful application in accommodation-sharing (e.g. Airbnb, Vrbo) and ride-sharing (e.g. Uber, Lyft), researchers have focused on applying this concept to energy systems [1], [2]. Energy-sharing modalities such as peer-to-peer (P2P) energy trading [3], [4], and Electric Vehicle (EV)-based Vehicle-to-Grid (V2G), Vehicle-to-Home (V2H), Vehicle-to-Vehicle (V2V) [5], as well as Battery Swapping Technology (BST) [6] have been proposed as sustainable and flexible approaches to balance the energy supply and demand for both the grid and end-users [5], [7]. Especially, the rapid rise in EV sales in recent years has created new opportunities for mobile and flexible energy storage and management including ridesharing and energy-sharing services using EVs [5]. However, no studies have been made so far to realize a platform that jointly enables both ride-sharing and energy-sharing.\nCrowdsourcing is an approach for recruiting workers from a \"crowd\" to execute tasks that has been successfully applied to several domains [8], [9]. We believe that a crowdsourcing platform has the potential to also be successfully applied to the a combined ridesharing and energy-sharing system, where tasks are ride-and energy-sharing requests that can be performed by EV drivers, called workers. Tasks are requested by task-requesters which include ride-sharing clients as well as private or public energy customers. Examples of such energy customers include a utility company and a microgrid community looking to achieve demand response by shifting energy demand to V2G services at different locations, specially during the time of peak energy demands [10]- [13]. In this work, we propose a novel crowdsourcing platform called e-Uber that leverages the increasing diffusion of EVs to enable joint ride-sharing and energy-sharing services. A general overview of the platform is depicted in Fig. 1. With this platform, drivers equipped with EVs can not only transport passengers through ride-sharing but also sell excess energy stored in their batteries to the grid/houses during periods of high demand through V2G or battery swapping [14]- [16]. e-Uber has the potential to increase the earning potential for drivers and also to help balance the energy demand and supply arXiv:2304.04753v1 [cs.AI] 31 Mar 2023 for the grid while simultaneously fulfilling the mobility and energy demands of consumers.\nA few works on crowdsourcing have been proposed to facilitate the integration of energy-sharing services with EVs. Ai et al. [7] proposed a V2H-based omni-sharing modality in a microgrid community to crowdsource energy from EVs. Similarly, the authors in [17] propose an autonomous EV (AEV)-based energy crowdsourcing approach, allowing AEVs to participate in energy-sharing tasks for consumers placed in the cloudlet. However, these approaches do not consider the workers' preferences as well as their limited ability of selecting tasks when overwhelmed with choices and problems. There have been a few spatial crowdsourcing work attempting at solving the task assignment problem considering worker preferences [9], [18]- [20]. However, these approaches focus on general uniform tasks, and do not consider ride-sharing combined with energy-sharing.\nTo the best of our knowledge, in this paper we propose the first crowdsourcing mechanism that jointly enables ride-and energy-sharing to provide a multifaceted solution to existing problems on efficiency and sustainability of transportation, energy management, and cost-effective demand response using EVs. e-Uber works in three decision stages: calculate a personalized task recommendation for each EV worker, collect bids from workers, reverse auction-based winning bids selection. We propose a preference-aware optimal task recommendation system, P OT R, and a reinforcement learning mechanism to learn worker preferences. The reverse auction process is formalized for bidding and the winning bids are determined through an optimization framework called Winning Bid Selection (W iBS). A Reinforcement Learning (RL)-based algorithm, called CARS is proposed that solves the problem of task recommendation and updates the worker preferences based on their interaction with the recommendation using Combinatorial Multi-Armed Bandit framework [2]. Proving that W iBS problem is NP-hard, we also propose bipartite matching-based heuristic, BM W that finds solution to W iBS in polynomial time.\nThe major contributions of the paper are as follows:\n\u2022 We propose a spatial crowdsourcing platform, e-Uber, to jointly enable ride-sharing and energy-sharing using EVs; \u2022 We develop an optimization framework, called POTR, based on reinforcement learning for personalized recommendation of tasks to workers. \u2022 We also formalize winning bid selection (WiBS) problem, and prove that it is NP-Hard; \u2022 We propose an RL algorithm, called CARS, that incorporates reinforcement learning for task recommendation to workers and update the preferences according to their interaction to the recommendation; \u2022 Given the complexity of the W iBS problem, we propose a Bipartite Matching-based Winner Selection algorithm, BM W and determine its polynomial time complexity; \u2022 Through extensive experiments using real data, we show that e-Uber can indeed lead to successful joint crowdsourcing of energy and ride-sharing services that is able to complete more than 850 tasks compared to state-ofthe-art approach in a span of 24 hours;", "publication_ref": ["b0", "b1", "b2", "b3", "b4", "b5", "b4", "b6", "b4", "b7", "b8", "b9", "b12", "b13", "b15", "b6", "b16", "b8", "b17", "b19", "b1"], "figure_ref": ["fig_0"], "table_ref": []}, {"heading": "II. RELATED WORKS", "text": "Crowdsourcing services has received increasing attention in recent years because of their flexibility and convenience in facilitating the completion of tasks by a set of workers [9]. There exists a plethora of research works that focus on different aspects of crowdsourcing from optimal task allocation [5] to preference-aware decision-making [18] to privacypreserving [19], [21]. Some other focus on designing an effective and informed incentive mechanism that motivates workers for their sustained engagement in the system [19]. Reverse auction mechanism has been widely utilized for designing incentive mechanism including bidding and winner selection in crowdsourcing works [20], [22]- [24]. In [22], a secure reverse auction protocol is devised for task assignment for spatial crowdsourcing along with an approximation algorithm. Similarly, [23] proposes a truthful reverse auction mechanism for location-aware crowdsensing while authors in [20] focus on generalized second-price auction for stable task assignment. The work in [24] also uses a truthful reverse auction mechanism to devise incentives for workers in urban parcel delivery.\nIn context of electric vehicles (EV), the work in [5] employs crowdsourcing for solving charging problems of EVs. A V2V energy-sharing framework has been proposed that crowdsources the charging request from EV owners and allocates the energy considering energy trading prices, EV parameters and privacy. Some other crowdsourcing literature focus on different problems like route optimization of EVs [25] and parcel delivery using EVs [26]. Closer to our problem setting, some literature have explored the use of crowdsourcing for integrating energy-sharing services with EVs. For instance, authors in [7] proposed a V2H-based omni-sharing modality system in a microgrid community, where energy is crowdsourced from EVs to reduce the overall cost of the community and decrease the need for energy storage. Another study [17] suggested an autonomous EV-based energy crowdsourcing approach, which enables EVs to participate in energy-sharing tasks for cloud-based energy consumers. However, this approach is challenging to implement and doesn't consider workers' preferences or the impact of sub-optimal decision-making.\nIn fact, most of these crowdsourcing works ignore the user behavioral modeling in task assignment. The spatial crowdsourcing work in [18] tried to solve the task assignment problem by considering worker preferences, but this solution is better suited for group tasks and doesn't account for other behavioral aspects of user behavioral modeling like bounded rationality [27] and irrational decision-making that drastically affects the system performances. Additionally, the existing works neglect the task recommendation problem and other realistic budget constraints, such as the energy budgets required by the utility or microgrid for any time period. Furthermore, these works are limited to homogeneous tasks like energy-sharing or delivery services only, which can result in significant idle hours for EVs during off-peak periods as such tasks have similar pattern.\nIn conclusion, while existing literature in crowdsourcing mechanisms have contributed to task assignment, incentive design, privacy and energy-sharing services, there is still room for improvement in terms of behavioral aspect like preferenceaware task recommendation and online learning of these preferences; task assignment with overall cost minimization and energy budgets; and heterogeneity in crowdsourcing tasks. Our proposed work focuses on addressing these limitations and developing more comprehensive, effective, and realistic solution to joint enabling of ride-and energy-sharing services in a crowdsourcing setting using reverse auction, reinforcement learning and efficient matching algorithms.", "publication_ref": ["b8", "b4", "b17", "b18", "b20", "b18", "b19", "b21", "b23", "b21", "b22", "b19", "b23", "b4", "b24", "b25", "b6", "b16", "b17", "b26"], "figure_ref": [], "table_ref": []}, {"heading": "III. SYSTEM MODEL TABLE I LIST OF NOTATIONS", "text": "", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "St", "text": "List of all tasks at timeslot t s j = z j , c j , d j j th task represented by type of task (z j ), start position (c j ), destination (d j )", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Wt", "text": "List of all workers available at timeslot t w i = c i , e i , r i , r min i i th worker represented by current location (c i ), the energy per unit range (e i ), remaining range of the EV (r i ) and minimum range threshold (r min i )", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Bt", "text": "List of all the bids received at timeslot t b ij Bid submitted by worker i for task j \u03b1 iz j\nAcceptance probability of worker i to the j th task type z j K Maximum number of tasks to be recommended \u03bb Proximity distance Et Amount of energy that must be satisfied through V2G/V2H q * Optimal solution to f (.)/ Winning bids\nWe assume time to be divided in time slots. At each time slot t, the set of tasks is referred to as S t , which are crowdsourced to the workers. We refer to W t as the set of workers at time t. Each task in S t is denoted by a tuple s j def = z j , c j , d j where z j is the type of task (0-rideshare, 1-battery swapping, and 2-V2G), c sj is the start position and d j is the destination of task. For energy-sharing tasks, although spatial in nature, start position c sj is same as destination d j . We assume the utility company submits energy tasks as a result of an energy requirement E. This is a typical assumption for demand response solutions [10]- [12]. As a result, the total amount of energy provided by workers through V2G must be at least E. Each worker in W t is denoted by a tuple w i def = c wi , e i , r i , r min i , where c i is the current position of the EV worker w i which can be different to spatial task location c sj , e i is the energy per unit range value in (kW h/km) that gives information about how much energy the EV consumes to drive a unit distance, r i is the available range of electrical vehicle in km given by the remaining energy level in their batteries, and r min i is the minimum energy not to be exceeded after completing the task to ensure sufficient energy for traveling to a charging location. The energy required to perform task s j by worker w i is denoted by l ij . e-Uber provides that a list of tasks, called recommendation list, is sent out to each worker. Workers then submit bids to these tasks. The bid b ij \u2208 B represents the cost asked by worker w i to perform task s j , where B is the set of all the bids submitted by workers. Previous works in crowdsourcing and energy-sharing using EVs has generally assumed that workers would have complete access to the list of available tasks and would pick the best task for them or, conversely, the crowsourcing platform would assign tasks to workers regardless of their preference. These assumptions are both undesirable. On the one hand workers have limited time and ability to go over potentially a very long list of tasks [2], and on the other hand workers may have different preferences on the tasks to complete. In this work, we recommend a limited list of relevant tasks to each worker based on their preferences. We model the preferences as follows. We denote by \u03b1 izj \u2208 [0, 1] the probability that worker w i bids for a task of type z j . These are called bidding probabilities. We assume that these probabilities are unknown and thus need to be learned over time by observing the workers' behavior.\nIV. e-Uber: PROBLEM FORMULATION Fig. 2 summarizes the steps involved in the e-Uber platform. e-Uber collects a list of tasks S t at time t as requested by taskrequesters which need to be crowdsourced to the EV-based workers in W t (step 1). The platform sends a personalized list of tasks to the workers based on their preferences (step 2) to which they respond by submitting bids to the platform for the tasks (step 3). Based on the received bids B t (step 4), the platform uses reverse auction based algorithm to determine the winning bids q * along with final payment P for winners (step 5). Finally, the worker preferences are updated based on their feedback for the next time step (step 6). Given the nature of the considered tasks, worker-task assignment is performed one-to-one.\nAs described above, the system involves solving two different problems. One is to recommend a set of tasks which maximizes the likelihood of generating the maximum number of bids, and thus improving the overall system performance. Another problem is to select the winning bids for task assignment and determine the final payment to crowdsource the tasks to the workers. These two problems are discussed below.", "publication_ref": ["b9", "b11", "b1"], "figure_ref": ["fig_1"], "table_ref": []}, {"heading": "A. Preference-aware Optimal Task Recommendation Problem", "text": "Our objective is to recommend a limited subset of tasks to each workers which maximizes the likelihood of bidding for these tasks, while avoiding to overwhelm workers with a list above their cognitive capabilities. We formalize this through the Preference-aware Optimal Task Recommendation (POTR) problem as follows. In short, the problem aims at maximizing the overall task bidding probabilities (hereafter referred interchangeably as preferences) while limiting the size of the recommended list to K as well as ensuring that each task is recommended to at least \u03c8 workers. maximize\nwi\u2208W sj \u2208S \u03b1 izj x ij(1)\ns.t. sj \u2208S x ij \u2264 K, \u2200w i (1a) wi\u2208W x ij \u2265 \u03c8, \u2200s j (1b) sj \u2208S g(z j )x ij \u2265 |V 2G| |S| K, \u2200w i (1c) l ij x ij \u2264 (r i -r min i )e i , \u2200w i , s j (1d) x ij = 0, if |c sj -c wi | > \u03bb, \u2200w i , s j (1e) x ij \u2208 {0, 1}, \u2200w i , s j (1f) g(z j ) = 1, if z j = 2 0, otherwise(2)\nThe objective function in Eq. ( 1) maximizes the sum of individual bidding probabilities for each worker's recommended tasks. The binary decision variable x ij \u2208 {0, 1} is set to 1 if the task s j is included in the list of worker w i . Constraint (1a) limits the length of each recommendation list to be less than K. In constraint (1b), we ensure that each task is recommended to at least \u03c8 = |W|K |S| workers. Also, we ascertain that a minimum of |V 2G|\u00d7K |S| V2G tasks are also recommended to each workers in constraint (1c). Constraint (1d) requires the recommended tasks to consume no more than certain energy for each EV, ensuring that EV has sufficient energy after performing tasks to drive to charging location, if required. Finally, constraint (1e) ensures that only the tasks within \u03bb distance from workers are recommended.\nIt is to be noted that the information on bidding probabilities is difficult to obtain a priori as it is specific for each worker and include elements of complex human psychology. Therefore, we assume that the preferences are initially unknown and are learned by observing the workers' behavior with respect to the assigned tasks. Recently, reinforcement learning mechanisms have been used extensively to learn the optimal policies in the run-time that gradually converge to take optimal actions based on feedback from the environment. In section V, we present a Combinatorial Multi-Armed Bandit (CMAB)based approach [2] that learns the preferences of workers over time while simultaneously recommending the optimal personalized list of tasks to them.", "publication_ref": ["b1"], "figure_ref": [], "table_ref": []}, {"heading": "B. Winning Bid Selection and Final Payment Problem", "text": "After sending the personalized list of tasks to each worker, e-Uber collects the bids. Given the collected bids, e-Uber selects winning bids, i.e., the workers performing the tasks, by solving the Winning Bid Selection (W iBS) problem. This problem determines the best bids which minimize the total cost from perspective of task requesters. W iBS can then be formulated a costrained assignment problem as follows:\nminimize wi\u2208W sj \u2208S b ij q ij (3) s.t. sj \u2208S q ij \u2264 1, \u2200w i (3a) wi\u2208W q ij = 1, \u2200s j , z j < 2 (3b) wi\u2208W q ij \u2264 1, \u2200s j , z j = 2 (3c) wi\u2208W sj \u2208S g(z j )l ij q ij \u2265 E,(3d)\nq ij \u2208 {0, 1}, \u2200w i , s j(3e)\nThe objective function in Eq. ( 3) minimizes the total cost of performing tasks from the collected bids. q ij is the binary decision variable as defined in constraint (3e) that indicates whether a bid b ij wins the auction and therefore the task s j is assigned to worker w i . Constraint (3a) ensures that a worker is assigned at most one task, while (3b) allows a ride-sharing and battery swapping tasks (z j < 2) to be assigned to only one worker. Similarly, constraint (3c) ensures that a V2G task is assigned to at most one worker. Finally, constraint (3d), ensures that at least E amount of energy will be supplied through V2G services. Note that the function g(z j ) = 1 if z j = 2 (V2G task) and zero otherwise.\nFollowing the selection of winning bids by solving the W iBS problem in Eq. ( 3), the final payment for each winning worker w k assigned with task s j is the second-to-theselected bid received for that task. Since with the second price payment rule, the dominant strategy for all bidders is to bid truthful [28], it ensures rational workers will provide truthful bids.\nTheorem 1. W iBS problem defined in Eq. (3) is NP-hard.\nProof. We provide a reduction from NP-Hard 0-1 min Knapsack (0-1 min-KP) problem [29]. In this problem, a set n items is provided, each item a i has a value l i and weight b i . The goal is to select the subset of items that incurs minimum weight and has a value of at least E.\nGiven a generic instance of min-KP, we construct an instance of our problem as follows. We only consider V2G tasks (z j = 2). For each item a i of min-KP we create a pair taskworker (s ai , w ai ). We assume that worker w ai only submits one bid, and they bid for s ai for an amount b i (the weight of a i in min-KP). Additionally, the energy required by w ai to perform s ai is l i (the value of a i in min-KP). Finally, we set the energy requirement for V2G to E.\nUnder these assumptions, the decision variable q ij of our original problem can be reduced to q i , since only one workers bid for one task and a task receives a bid only from one worker. Additionally, constraints (3a) and (3c) are trivially verified, since there is only task-worker pair, while constraint (3b) does not apply since we only have V2G tasks.\nSolving our reduced problem instance finds the set taskworker pairs that minimize the sum of bids and meets the energy requirement E. This corresponds (i.e., it can be translated in polynomial time) to the optimal solution of min-KP, i.e., the set of items with minimum weight that provide a value at least E. As a result, our problem is at least as difficult as min-KP, and thus it is NP-Hard.", "publication_ref": ["b27", "b28"], "figure_ref": [], "table_ref": []}, {"heading": "V. E-UBER SOLUTION APPROACHES", "text": "", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "A. CMAB-based Task Recommendation System", "text": "In order to solve the optimization problem in Eq. ( 1), it is necessary to have beforehand knowledge on the workers preferences. These are generally not known a priori in realistic settings. Therefore, it becomes necessary to learn these preferences during run-time, while simultaneously optimizing the task assignment. To this purpose, we propose a reinforcement learning approach inspired by the Combinatorial Multi-Armed Bandit (CMAB) framework [2], [30].\nCombinatorial Multi-Armed Bandit is a classic reinforcement learning problem that consists of setup where agents can choose a combination of different choices (i.e. certain decision-making actions) and observe a combination of linear rewards at each timestep. The long term objective for the problem is to find a strategy that maximizes such reward by selecting optimal actions. This strategy, better defined as policy, needs to be learned based on how the agents choose to interact with the system. The learning is carried out through exploration vs. exploration trade-off. Since, at the beginning, the knowledge about how an agent chooses to engage with the system is not known, the system learns by allowing agent to choose from diverse options and therefore learning the user interaction accordingly, referred to as exploration. As the time passes, the system starts gathering information about agent's behavior and therefore use that knowledge instead of sending out diverse range of choices, called exploitation. By balancing this exploration and exploitation mechanism over the course of time, the system eventually gathers sufficient information on agent's behavior and learns optimal strategy for them. In our problem setting, the workers are the agents who needs to be sent out an optimal set of tasks so as to accumulate good quality bids from them. Specifically, the objective is to find the best possible task recommendations (actions) to be sent to each workers (agent) that will result in higher cumulative preferences for workers (reward).\nTherefore in this section, based on this CMAB framework, we design an algorithm called CMAB-based Algorithm for task Recommendation System (CARS). The pseudo code of CARS is shown in Alg. (1). CARS recommends the personalized tasks to each workers based on current estimation of worker preferences towards each task type. Note that the worker preference is defined as the bidding probability in section IV that a worker will submit a bid for any task based on its type. The algorithm then updates and learns these biding probabilities based on the worker's engagement on the recommendation through bids. If the worker submits a bid, it is considered to be a preferred recommendation and opposite, if the worker chooses to ignore by not the submitting bid. Based on this information, the preference of workers towards each task type is updated.\nTherefore, with F as the overall solution space that consists of all feasible action matrices, the action matrix A(t) \u2208 F corresponds to the optimal set of recommendation lists for the timestep t. It consists of action values x ij \u2208 {0, 1}, which is same as the decision variable in POTR problem. Recall that it represents whether the task s j is in personalized recommendation list of worker w i for timestep t. Given this action matrix, the preference of worker w i towards each task type z j is modeled as a random variable \u1fb1izj whose mean value is \u03b1 izj and is initially unknown. The current knowledge until timestep t for these random variables \u1fb1izj is denoted by the estimated expected \u03b1 izj . The reward for the platform for selecting the action matrix A(t) at timestep t, is defined as the sum of the preferences to each workers:\nR A(t) (t) = wi,sj a ij (t)\u1fb1 ij (t)(4)\nSince the distribution of \u1fb1izj is unknown, the goal of this CMAB-based approach is to learn the policy, that minimizes the overall regret up to time t. This regret is defined as the difference between expected reward with perfect knowledge of preferences and that obtained by the policy over time:\nR(t) = tR * A(t) (t) -E t t =1 R A(t ) (t )],(5)\nwhere R * A(t) (t) is the optimal reward obtained with perfect knowledge of the preference variables. Even though minimizing the regret is a difficult problem, CARS ensures that the regret is bounded, meaning the non-optimal actions will be picked only a limited number of times and eventually the learned policy will converge towards optimal. We present a modified objective function from UCB1 algorithm to select the action matrix as follows.\nA(t) = arg max A\u2208F wi\u2208W sj \u2208S a ij \u03b1 izj + (Q + 1) ln t m izj(6)\nwhere Q = |W| \u00d7 |z j | is the total number of variables and m izj is the number of observations so far for the variable \u1fb1izj .\nAt each timestep t, we solve the P OT R problem with CMAB-based objective function in Eq. ( 6) instead of Eq. ( 1) and same constraints (1a)-(1f). By solving this modified problem, the sets of optimal actions (or recommendation lists) for each workers are selected based on current estimate of preferences until timestep (t -1). For this purpose, we keep track of the \u03b1 izj , along with m izj . These two information are then used to update the current estimation of the variable \u1fb1izj at time t based on the worker's engagement with the recommendation i.e. whether the worker chooses to submit the bid or not. Needs to be noted that, if the worker chooses to submit the bid, they must complete the task if assigned.\n\u03b1 izj (t) = \uf8f1 \uf8f2 \uf8f3 \u03b1iz j (t-1)miz j (t-1)+\u03b1iz j (t) miz j (t-1)+1 if 0 < b ij < \u221e, \u03b1 izj (t -1) otherwise. (7) m izj (t) = m izj (t -1) + 1(8)\nWe present the CARS algorithm in Alg. 1. CARS begins by collecting information on workers and task in lines 1 -2. It then sends out personalized recommendation to each worker by solving the optimization problem with Eq. ( 6) as objective function and constraints (1a)-(1f)(lines 3-4). Then, it collects the bids for recommended tasks from workers (line 5). Finally, the current knowledge on worker's bidding probabilities are updated according to the Eqs. ( 7) and ( 8) based on how the workers respond to recommendations (lines 5 -6). For the update process, the recommendations that receive a bid from workers are taken as positive reinforcement and the recommendations that do not receive bids as negative reinforcement. In the following, we prove that the Alg. 1 has a bounded regret and thus the algorithm eventually converges to optimal policy in finite time-steps.", "publication_ref": ["b1", "b29", "b0"], "figure_ref": [], "table_ref": []}, {"heading": "Algorithm 1: CMAB-based Algorithm for task Recommendation System (CARS)", "text": "1 \u2200w i \u2208 Wt, collect the workers info w i =< c i , e i , r i , r min i > ; 2 \u2200s j \u2208 St, collect the tasks s j =< z j , c j , d j >;\n/ * Solve CMAB-based POTR problem */ 3 Select an action A s.t.  7) and ( 8);", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "A(t) = arg max", "text": "A\u2208F w i s j a ij \u03b1 iz j + (Q+1)\nTheorem 2. eCARS provides bounded regret given by:\nR(t) \u2264 4a 2 max Q 3 (Q + 1) ln(t) (\u2206 min ) 2 + \u03c0 2 3 Q 2 + Q \u2206 max ,(9)\nwhere, a max is defined as max\nA\u2208F max i,j a ij . Besides, \u2206 min = min R A <R * (R * -R A ) and \u2206 max = max R A <R * (R * -R A )\nare the minimum and maximum difference to the reward obtained with perfect knowledge of the users' preferences, respectively.\nProof. The proof is obtained following Theorem 2 of [30].\nHowever, as shown in Theorem (1), finding optimal solution for winner determination problem (W iBS problem Eqs. ( 2)-(3e)) is NP-Hard problem. Therefore, we devise a bipartite matching-based heuristic for winning bid determination with polynomial time complexity for worker-task assignment.", "publication_ref": ["b29"], "figure_ref": [], "table_ref": []}, {"heading": "B. Winning Bid Selection using Weighted Bipartite Matching", "text": "The W iBS problem formulation in Eq. ( 3) is an extension of one-to-one weighted matching. However, this matching has to select minimum weighted edges for task allocation with energy budget constraints for V2G tasks. Therefore, we hereby develop a heuristic inspired by bipartite minimum weighted matching which can be solved in polynomial time using Karp's algorithm [31]. To satisfy the energy budget constraint, we employ iterative matching that removes the highest weighted edges from the previous matching until the budget is met. Simply put, the algorithm runs the minimum weighted matching and if it does not satisfy the budget constraints, removes first z highest weighted edges connected to non-V2G tasks from the previous matching and then runs another round of matching until the feasible solution is found.   This algorithm called Bipartite Matching-based Winner selection (BMW) is presented in Alg. 2. BM W takes set of available workers W, tasks S, and the set of bids B as input and finds the winning bids with final pay P as the output. In line 1, the algorithm initializes the output graph \u03a6 out , a temporary graph \u03a6 temp for iterative matching purpose, and P . Then it creates a separate sets for V2G and non-V2G tasks as sets V and R in line 2 and collects the bids from all workers (line 3). With the information on bids, BM W generates a bipartite graph G between bipartite sets of workers W and tasks S, and adds edges between those nodes that have nonzero bids i.e. worker w i with non-zero bid b ij is connected with task s j (lines 4 -7). Now, it runs a bipartite matching iteratively with while loop in lines 8-15. Initially, both of the conditions for while loop are true and therefore the algorithm runs first round of Minimum Weighted Bipartite Matching on graph G (line 9). It then assigns the matched graph to the output graph \u03a6 out (line 10) and checks if the energy budget for V2G tasks is satisfied (line 11). If it is met in the first round, it breaks out of the while loop and determines final payment and task assignment. If it is not met, BMW removes the first z highest weighted edges in \u03a6 out from G that just meet the remaining of energy budget not met (line 12 -13). Then, since both of the conditions are still true, the algorithm runs another round of matching on reduced graph G. Eventually the final matching in output graph \u03a6 out is used as winning task assignments with final payment as per the bid (line 16 -18).\n(w i ,s j )\u2208E out g(z j )l ij < E or \u03a6temp =\n(w i ,s j )\u2208E out g(z j )l ij + (w i ,s j )\u2208Z l ij \u2265 E;\nTheorem 3. The time complexity of the BM W algorithm is O(|W|.|S| 2 .log(|S|)).\nProof. The complexity is dominated by the while loop (lines 10 -17), executed at max |S| times. It involves running minimum weighted full matching as presented in [31], which has run time of O(|W|.|S|.log(|S|)). Therefore, the overall complexity of the BMW is O(|W|.|S| 2 .log(|S|)).", "publication_ref": ["b30", "b30"], "figure_ref": [], "table_ref": []}, {"heading": "VI. EXPERIMENT", "text": "In this section, we present the experimental details for the proposed system, comparison approaches and detailed study of performance of the algorithms.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "A. Experimental Setup", "text": "Our experimental setup consists of modeling workers, tasks and the simulation platform. In case of workers, we gathered the publicly available data on 54 different EV models on battery size, range, charging power and charging speed, and formulated an individual profile for each EV in concern. Similarly for ride-sharing tasks, the high volume taxi trip data of New York City (NYC) from the year of 2013 [32] was used. The V2G tasks were generated from the 15 minutes energy consumption data from 25 NYC residences from PecanStreet [33]. In absence of real dataset on battery swapping tasks, half of the ride-sharing tasks were extracted as the battery swapping tasks, given their similar profile with batteries transported instead of passengers. These tasks are spatial, therefore, we collect the information on locations, distance, and time required to complete the tasks.\nFurthermore, the simulation platform, e-Uber for crowdsourcing is developed using Python and Gurobi, NetworkX, and PyTorch libraries. We consider a reverse auction period resolution of 15 minutes which corresponds to the standard set by grid for energy trading. This means that every 15 minutes the e-Uber algorithm will gather the tasks, push the personalized list of tasks to workers, collect the bids and assign the tasks to EV workers that minimizes the overall cost for the task requesters. We set the search radius for the tasks \u03bb = 10 km and the maximum length of recommendation list K = 5. The energy budget for each 15 minutes time period was considered to be total of all 25 V2G tasks available. The user preferences were sampled uniformly from the set {0.1, 0.4, 0.5, 0.7, 0.9, 1.0}. The energy, time and location of the EVs are tracked and updated accordingly so as to simulate their real-world trip behavior. If the battery level of the cars fall below minimum level, they are considered for the charging for the next time-step.\nFor comparison approach, we use the task-centric winner selection algorithm as presented in [23] and refer it as BG for baseline greedy. This approach neither considers user-preference in the problem-setting nor it considers the personalized recommendation system. So for comparison purpose, we augment this method with perfect knowledgebased recommendation system that pushes K best tasks as recommendation to each workers. Then we implement the algorithm as presented in [23] that sorts the bids from lowest to highest for each tasks and assigns them one by one. Note that this approach may not guarantee a complete matching between workers and tasks as the tasks that are processed towards the end may not have any workers left to choose from because of limited number of bids and greedy selection approach. We use this BG as our baseline and compare the performance of our algorithms CARS and BM W along with their perfect knowledge variation P K which has the perfect knowledge on the worker preferences and thus do not involve learning, and OP T optimal solution to W iBS problem. The ride-share dataset in concern consists of actual ride-fare for specific car. However, we require bids from each vehicle for recommended tasks and a realistic model for bid generation is quite difficult to obtain. Therefore we trained a Deep Neural Network with existing dataset for determining the ride fare of the given ride-sharing tasks, the details of which is presented in the following.   3, shows that the loss percentage reduces to \u223c 2.5% after \u223c 12, 000 trainings. On testing dataset, the bid generation DNN model, generated highly accurate fare prediction with 96.45% Rfoot_0 -score. This can also be observed in Fig. 4 which presents a plot of sample of prediction fares and actual fares to show testing accuracy. This DNN model was then deployed in conjunction with the e-Uber to simulate the bidding action by each workers for each recommended tasks in the personalized list. In case of V2G tasks, the energy to be supplied by the EV was converted into its distance equivalent and fed into the DNN model along with other input features to get the bids. Experimental Observations 1. Performance over time -Total Cost & # of Tasks: In the first experimental scenario, we observe the performance of algorithms as a snapshot of objective values over 24 hours (i.e. 24 \u00d7 4 = 96 timeslots). We present the objective values from midnight to next midnight as a lineplot in Fig. 5 and cumulative bar plots of objective values (Fig. 6) and total tasks completed (Fig. 7) over a day. Although all the proposed approaches start from the same initial state (except for knowledge on preference), these algorithms may have different successive states since the solution is affected by the matching in previous timeslot, availability of specific workers for next round, and the distance travelled by these workers for previous assignment (or next assignment). Therefore, we employ cumulative objective values and cumulative tasks completed as the metric for a fair comparison of the approaches in Fig. 6. This cumulative objective value reflects the overall quality of task assignment made so far based on the total objective values to achieve the requirement while the cumulative tasks completed present the total number of matches made by the respective approach until the end of that timeslot. As seen in the lineplot Fig. 5 and barplot Fig. 6, the solution generated by baseline greedy approach BG is the minimum one as it assigns task based on respective cheapest bid available but it doesn't meet the max-imum number of matching possible unlike other approaches as shown in Fig. 7. Therefore, BG mostly violates the V2G requirement, meaning it generates infeasible solutions and hence fails for this problem setting. The P K -OP T produces the best result since it involves solving the P OT R and W iBS problem optimally with perfect knowledge of the worker preferences. Following it, is the optimal solution OP T paired with our proposed learning framework for e-Uber, CARS, which performs close to optimal in terms of both objective values and number of tasks completed. Although this approach CARS -OP T finds optimal solution, it does not have initial knowledge on preferences. Therefore, it generates sub-optimal recommendation list which then affects the solution to W iBS problem and hence, the overall performance. However, even with online learning framework employed, it produces similar results to the P K -OP T . Also we observe similar pattern with P K -BM W and CARS -BM W since they both rely on bipartite matching-based approach to find feasible solution. Since P K -BM W sends the optimal recommendation to workers for collecting bids, it therefore has higher overall performance compared to CARS -BM W which learns the preferences over time. The gaps between best performing P K -OP T and worst performing CARS -BM W however is less than $150 which amounts to a price hike of \u223c $3/task in the worst case with an average 50 tasks for a timeslot as in our case. We observe the cumulative objective values grow almost linearly for all approaches and as expected, the performance observed was better for P K -OP T followed by CARS -OP T and then P K -BM W and finally CARS -BM W . However, the gap in cumulative objective value increased for the bipartite heuristic compared to optimal due to its sub-optimal performance. Note that the baseline BG generates less cumulative objective value but it fails to generate maximal matching as seen in Fig. 7. The number of tasks completed by the proposed approaches exceed 850 more than the BG in the span 24 hours. scales, the average final price per task for all approaches rises since the overall cost for the system also increases with the tasks. However, it is also observed that CARS -BM W and BM W -P K suffer more as we scale the system. The margin between these and optimal approaches grows drastically up to \u223c $2. This can be attributed mainly to the increased complexity of the problem as number of tasks is increased and hence the bipartite matching-based heuristic finds less efficient solution compared to optimal. The optimal solutions however have nominal increase in their average price per task (\u223c $10) even with scaling compared to rest. We also study the effect of scaling V2G tasks to the average final price per task in Fig. 9. We observed similar trend to above but with noticeable gap between optimal and heuristic approaches when only 32% of V2G tasks are available. This results from the sub-optimal performance owing to less number of V2G tasks compared to rest and hence unequal rate of learning the preferences.", "publication_ref": ["b31", "b32", "b22", "b22"], "figure_ref": ["fig_4"], "table_ref": []}, {"heading": "B. Results", "text": "", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Learning accuracy for preferences -MAE:", "text": "To study the quality of proposed CMAB-based learning algorithm CARS in conjunction with optimal and BM W , we use the Mean Absolute Error (MAE) of the learned preferences over time and present them in Fig. 10. Both approaches use same learning algorithm but the solution to W iBS problem differs and thus affects the learning performance. However, this difference is very negligible. Initially, the MAE is 0.28 and then rapidly decreases to less than 0.05 for both approaches by 250 timesteps. The difference in learning efficacy between CARS-OP T and CARS-BM W reduces over the time and is almost same by 250 timesteps as seen in the graph. Since by 500 timesteps the system has garnered sufficient knowledge on workers preferences, MAE falls to 0.03 reflecting the efficacy of proposed CMAB-based preference learning. Furthemore, we present a cumulative reward plot in Fig. 11 that also shows the plots of both learning approaches converge after 200 timesteps. 4. Dependency with K: In this experiment, we discuss on the dependency of the performance of our proposed approach with recommendation length K, as presented in Fig. 12. Increasing the number of recommendation K means that the chance of receiving more bids with good quality from same number of workers at the same time increases. This in turn helps to find better solutions which reduce overall cost of the system. This is also verified from the observation in plot of Fig. 12. As we increase K, the objective values per task over a day's period reduces for all four approaches. Although the perfect and optimal optimal methods do not have significant difference in their performance with varied K, the effect is more pronounced in case of bipartite matching based P K -BM W and CARS -BM W where the learning of preferences is benefited by the increased number of bids to choose from with increasing K. However, it needs to be noted that pushing 10 recommends at each timestep can be very intractable for workers and therefore, keeping the length of recommendation list as small as possible is desired.", "publication_ref": [], "figure_ref": ["fig_0", "fig_7", "fig_2", "fig_2"], "table_ref": []}, {"heading": "VII. CONCLUSION", "text": "e-Uber is a promising crowdsourcing platform for improving the efficiency and sustainability of ride-sharing and energysharing services through the use of EVs. It uses reverse auction mechanism to assign spatial tasks to EV drivers based on their preferences, battery level, and other realistic constraints like minimum energy requirement for grid and one-to-one assignment. To optimize the task recommendation process, the platform incorporates user behavioral models including worker preferences and bounded rationality. However, as these preferences are not known a priori, e-Uber uses reinforcement learning framework called combinatorial multi-armed bandit for learning the preferences at the runtime based on their feedback. We propose the CARS algorithm that finds optimal solution to both the P OT R and W iBS problem. Since the W iBS problem is NP-hard, we propose another bipartite matching-based heuristic, called BM W that finds feasible solution to the winner selection while meeting the minimum V2G energy requirement. Experimental results and simulations demonstrate the effectiveness of e-Uber's approaches, which outperform the baseline algorithm by serving more than 850 tasks within 24 hours of simulation. On top of that, the baseline often fails to find a feasible solution, rendering it inapplicable in this problem setting.\nFuture research could focus on implementing and evaluating e-Uber in real-world settings. This includes the assessment of the impact of different task recommendation and decision prediction algorithms, as well as the integration of new features such as real-time traffic and energy data and dynamic pricing. By exploring these areas, e-Uber has the potential to significantly improve the efficiency and sustainability of ridesharing and energy-sharing services through the use of EVs.", "publication_ref": [], "figure_ref": [], "table_ref": []}], "references": [{"ref_id": "b0", "title": "The sharing economy for the electricity storage", "journal": "IEEE Transactions on Smart Grid", "year": "2017", "authors": "D Kalathil; C Wu; K Poolla; P Varaiya"}, {"ref_id": "b1", "title": "A reinforcement learning approach for user preference-aware energy sharing systems", "journal": "IEEE Transactions on Green Communications and Networking", "year": "2021", "authors": "A Timilsina; A R Khamesi; V Agate; S Silvestri"}, {"ref_id": "b2", "title": "Prospect theory-inspired automated p2p energy trading with q-learning-based dynamic pricing", "journal": "IEEE", "year": "2022", "authors": "A Timilsina; S Silvestri"}, {"ref_id": "b3", "title": "Peer-topeer trading in electricity networks: an overview", "journal": "IEEE Transactions on Smart Grid", "year": "2020", "authors": "W Tushar; T K Saha; C Yuen; D Smith; H V Poor"}, {"ref_id": "b4", "title": "An efficient vehicle-to-vehicle (v2v) energy sharing framework", "journal": "IEEE Internet of Things Journal", "year": "2021", "authors": "M Shurrab; S Singh; H Otrok; R Mizouni; V Khadkikar; H Zeineldin"}, {"ref_id": "b5", "title": "Optimal operation and services scheduling for an electric vehicle battery swapping station", "journal": "IEEE transactions on power systems", "year": "2014", "authors": "M R Sarker; H Pand\u017ei\u0107; M A Ortega-Vazquez"}, {"ref_id": "b6", "title": "Crowdsourcing electrified mobility for omni-sharing distributed energy resources", "journal": "Springer", "year": "2021", "authors": "W Ai; T Deng; W Qi"}, {"ref_id": "b7", "title": "Incentme: Effective mechanism design to stimulate crowdsensing participants with uncertain mobility", "journal": "IEEE Transactions on Mobile Computing", "year": "2018", "authors": "F Restuccia; P Ferraro; S Silvestri; S K Das; G L Re"}, {"ref_id": "b8", "title": "First: A framework for optimizing information quality in mobile crowdsensing systems", "journal": "ACM Transactions on Sensor Networks (TOSN)", "year": "2018", "authors": "F Restuccia; P Ferraro; T S Sanders; S Silvestri; S K Das; G L Re"}, {"ref_id": "b9", "title": "Hvac power conservation through reverse auctions and machine learning", "journal": "IEEE", "year": "2022", "authors": "E Casella; A R Khamesi; S Silvestri; D A Baker; S K Das"}, {"ref_id": "b10", "title": "Managing contingencies in smart grids via the internet of things", "journal": "IEEE Transactions on Smart Grid", "year": "2016", "authors": "S Ciavarella; J.-Y Joo; S Silvestri"}, {"ref_id": "b11", "title": "Socialbehavioral aware optimization of energy consumption in smart homes", "journal": "IEEE", "year": "2018", "authors": "V Dolce; C Jackson; S Silvestri; D Baker; A De Paola"}, {"ref_id": "b12", "title": "Technical design of a grid-connected photovoltaic system and its challenges in nepalese power scenario", "journal": "IEEE", "year": "2017", "authors": "A Timilsina; B "}, {"ref_id": "b13", "title": "Comparative analysis of cell balancing topologies in battery management systems", "journal": "", "year": "2019", "authors": "A Khanal; A Timilsina; B Paudyal; S Ghimired"}, {"ref_id": "b14", "title": "Design and performance analysis of highly efficient class e resonant inverter", "journal": "Zerone Scholar", "year": "2016", "authors": "A Timilsina; B Nepali; B Paudyal; J D Kunwar"}, {"ref_id": "b15", "title": "Analysis and optimization of magnetic resonant wireless power transfer system", "journal": "", "year": "2017", "authors": "A Timilsina; B Paudyal; B Nepali; J D Kunwar; A K Mishra; S K Ghimire"}, {"ref_id": "b16", "title": "Cloudletbased intelligent auctioning agents for truthful autonomous electric vehicles energy crowdsourcing", "journal": "IEEE Transactions on Vehicular Technology", "year": "2020", "authors": "A Yassine; M S Hossain; G Muhammad; M Guizani"}, {"ref_id": "b17", "title": "Preferenceaware task assignment in spatial crowdsourcing: from individuals to groups", "journal": "IEEE Transactions on Knowledge and Data Engineering", "year": "2020", "authors": "Y Zhao; K Zheng; H Yin; G Liu; J Fang; X Zhou"}, {"ref_id": "b18", "title": "Enabling privacy-preserving incentives for mobile crowd sensing systems", "journal": "IEEE", "year": "2016", "authors": "H Jin; L Su; B Ding; K Nahrstedt; N Borisov"}, {"ref_id": "b19", "title": "Multi-attribute crowdsourcing task assignment with stability and satisfactory", "journal": "IEEE Access", "year": "2019", "authors": "Y Xing; L Wang; Z Li; Y Zhan"}, {"ref_id": "b20", "title": "Trends for mobile iot crowdsourcing privacy and security in the big data era", "journal": "IEEE Transactions on Technology and Society", "year": "2022", "authors": "S Sodagari"}, {"ref_id": "b21", "title": "Sra: Secure reverse auction for task assignment in spatial crowdsourcing", "journal": "IEEE Transactions on Knowledge and Data Engineering", "year": "2019", "authors": "M Xiao; K Ma; A Liu; H Zhao; Z Li; K Zheng; X Zhou"}, {"ref_id": "b22", "title": "A truthful auction mechanism for mobile crowd sensing with budget constraint", "journal": "IEEE Access", "year": "2019", "authors": "Y Liu; X Xu; J Pan; J Zhang; G Zhao"}, {"ref_id": "b23", "title": "Crowdsourcing incentives for multi-hop urban parcel delivery network", "journal": "IEEE Access", "year": "2019", "authors": "H Hong; X Li; D He; Y Zhang; M Wang"}, {"ref_id": "b24", "title": "Context-aware and energy-driven route optimization for fully electric vehicles via crowdsourcing", "journal": "IEEE Transactions on Intelligent Transportation Systems", "year": "2013", "authors": "Y Wang; J Jiang; T Mu"}, {"ref_id": "b25", "title": "Model for crowdsourced parcel delivery embedded into mobility as a service based on autonomous electric vehicles", "journal": "Energies", "year": "2021", "authors": "Y He; C Csisz\u00e1r"}, {"ref_id": "b26", "title": "Maps of bounded rationality: Psychology for behavioral economics", "journal": "American Econ. Rev", "year": "2003", "authors": "D Kahneman"}, {"ref_id": "b27", "title": "The progressive second price auction mechanism for network resource sharing", "journal": "", "year": "1998", "authors": "A A Lazar; N Semret"}, {"ref_id": "b28", "title": "Heuristics for the 0-1 min-knapsack problem", "journal": "Acta Cybernetica", "year": "1991", "authors": "J Csirik"}, {"ref_id": "b29", "title": "Combinatorial network optimization with unknown variables: Multi-armed bandits with linear rewards and individual observations", "journal": "IEEE/ACM Transactions on Networking", "year": "2012-10", "authors": "Y Gai; B Krishnamachari; R Jain"}, {"ref_id": "b30", "title": "An algorithm to solve the m\u00d7 n assignment problem in expected time o (mn log n)", "journal": "Networks", "year": "1980", "authors": "R M Karp"}, {"ref_id": "b31", "title": "New york city taxi and limousine commission (tlc) trip record data of the year 2013", "journal": "", "year": "2019", "authors": "C New; York Taxi; L Commission"}, {"ref_id": "b32", "title": "", "journal": "", "year": "2019", "authors": "P S Inc"}], "figures": [{"figure_label": "1", "figure_type": "figure", "figure_id": "fig_0", "figure_caption": "Fig. 1 .1Fig. 1. e-Uber crowdsourcing platform overview", "figure_data": ""}, {"figure_label": "2", "figure_type": "figure", "figure_id": "fig_1", "figure_caption": "Fig. 2 .2Fig. 2. Working mechanism of e-Uber", "figure_data": ""}, {"figure_label": "2", "figure_type": "figure", "figure_id": "fig_2", "figure_caption": "Algorithm 2 :2Bipartite Matching-based Winner selection (BMW) Input : Sets of Workers (W) and Spatial Tasks (S), Bids (B) Output: Winning bids with final pay (P) / * Initialization */ 1 \u03a6out = {W \u222a S, E \u03a6 = \u2205}; \u03a6temp = \u2205; P = \u2205 ; / * Generate bipartite graph G */ 2 \u2200s j \u2208 S, if g(z j ) = 1 then V \u2190 {s j } else R \u2190 {s j }; 3 \u2200w i \u2208 W, collect their respective bids B i ; 4 Build Bipartite Graph G = {W \u222a S, E G = \u2205} ; 5 for each w i \u2208 W, s j \u2208 S do 6 if b ij > 0 then Add edge (w i , s j ) to E G with weight, b ij ; 7 end / * Run minimum weighted bpt matching until termination */ 8 while", "figure_data": ""}, {"figure_label": "13", "figure_type": "figure", "figure_id": "fig_3", "figure_caption": "13 ifZ13= \u2205 then Remove all edges \u2208 Z from G and \u03a6out else \u03a6temp = \u03a6out; 14 end 15 end 16 q * = Eout; / * Final Payment and Task Assignment */ 17 \u2200w k \u2208 W, P k \u2190 Second to the selected bid b kj ; 18 Assign the tasks to winning workers along with final price P;", "figure_data": ""}, {"figure_label": "3", "figure_type": "figure", "figure_id": "fig_4", "figure_caption": "Fig. 3 .3Fig. 3. Training Loss % Fig. 4. Bid Prediction testing accuracy", "figure_data": ""}, {"figure_label": "56", "figure_type": "figure", "figure_id": "fig_5", "figure_caption": "Fig. 5 .Fig. 6 .56Fig. 5. Snapshot of obj. values & matches vs. time", "figure_data": ""}, {"figure_label": "89", "figure_type": "figure", "figure_id": "fig_6", "figure_caption": "Fig. 8 .Fig. 9 .89Fig. 8. Avg. Price/task vs. Task(%)", "figure_data": ""}, {"figure_label": "11", "figure_type": "figure", "figure_id": "fig_7", "figure_caption": "Fig. 11 .11Fig. 11. Cumulative reward plot Fig. 12. Obj. values/matching vs. K", "figure_data": ""}, {"figure_label": "", "figure_type": "table", "figure_id": "tab_0", "figure_caption": "Update [ \u03b1 iz j ] |W|\u00d7|z j | and [m ij ] |W|\u00d7|z j | based on the collected bids using Eqs. (", "figure_data": "ln t m iz j;"}], "formulas": [{"formula_id": "formula_0", "formula_text": "wi\u2208W sj \u2208S \u03b1 izj x ij(1)", "formula_coordinates": [4.0, 110.65, 207.24, 189.37, 20.06]}, {"formula_id": "formula_1", "formula_text": "s.t. sj \u2208S x ij \u2264 K, \u2200w i (1a) wi\u2208W x ij \u2265 \u03c8, \u2200s j (1b) sj \u2208S g(z j )x ij \u2265 |V 2G| |S| K, \u2200w i (1c) l ij x ij \u2264 (r i -r min i )e i , \u2200w i , s j (1d) x ij = 0, if |c sj -c wi | > \u03bb, \u2200w i , s j (1e) x ij \u2208 {0, 1}, \u2200w i , s j (1f) g(z j ) = 1, if z j = 2 0, otherwise(2)", "formula_coordinates": [4.0, 87.0, 235.56, 213.03, 170.51]}, {"formula_id": "formula_2", "formula_text": "minimize wi\u2208W sj \u2208S b ij q ij (3) s.t. sj \u2208S q ij \u2264 1, \u2200w i (3a) wi\u2208W q ij = 1, \u2200s j , z j < 2 (3b) wi\u2208W q ij \u2264 1, \u2200s j , z j = 2 (3c) wi\u2208W sj \u2208S g(z j )l ij q ij \u2265 E,(3d)", "formula_coordinates": [4.0, 317.08, 191.77, 245.96, 143.34]}, {"formula_id": "formula_3", "formula_text": "q ij \u2208 {0, 1}, \u2200w i , s j(3e)", "formula_coordinates": [4.0, 364.68, 341.28, 198.36, 9.65]}, {"formula_id": "formula_4", "formula_text": "R A(t) (t) = wi,sj a ij (t)\u1fb1 ij (t)(4)", "formula_coordinates": [5.0, 378.26, 407.11, 184.78, 19.64]}, {"formula_id": "formula_5", "formula_text": "R(t) = tR * A(t) (t) -E t t =1 R A(t ) (t )],(5)", "formula_coordinates": [5.0, 355.92, 504.07, 207.12, 30.47]}, {"formula_id": "formula_6", "formula_text": "A(t) = arg max A\u2208F wi\u2208W sj \u2208S a ij \u03b1 izj + (Q + 1) ln t m izj(6)", "formula_coordinates": [5.0, 321.01, 657.33, 242.02, 37.36]}, {"formula_id": "formula_7", "formula_text": "\u03b1 izj (t) = \uf8f1 \uf8f2 \uf8f3 \u03b1iz j (t-1)miz j (t-1)+\u03b1iz j (t) miz j (t-1)+1 if 0 < b ij < \u221e, \u03b1 izj (t -1) otherwise. (7) m izj (t) = m izj (t -1) + 1(8)", "formula_coordinates": [6.0, 52.48, 209.01, 247.54, 62.42]}, {"formula_id": "formula_8", "formula_text": "A\u2208F w i s j a ij \u03b1 iz j + (Q+1)", "formula_coordinates": [6.0, 105.49, 538.78, 114.5, 17.17]}, {"formula_id": "formula_9", "formula_text": "R(t) \u2264 4a 2 max Q 3 (Q + 1) ln(t) (\u2206 min ) 2 + \u03c0 2 3 Q 2 + Q \u2206 max ,(9)", "formula_coordinates": [6.0, 55.85, 634.73, 244.18, 24.8]}, {"formula_id": "formula_10", "formula_text": "A\u2208F max i,j a ij . Besides, \u2206 min = min R A <R * (R * -R A ) and \u2206 max = max R A <R * (R * -R A )", "formula_coordinates": [6.0, 48.96, 666.31, 251.06, 31.33]}, {"formula_id": "formula_11", "formula_text": "(w i ,s j )\u2208E out g(z j )l ij < E or \u03a6temp =", "formula_coordinates": [6.0, 342.89, 469.51, 135.78, 15.47]}, {"formula_id": "formula_12", "formula_text": "(w i ,s j )\u2208E out g(z j )l ij + (w i ,s j )\u2208Z l ij \u2265 E;", "formula_coordinates": [6.0, 376.17, 551.85, 153.08, 15.47]}, {"formula_id": "formula_13", "formula_text": "Theorem 3. The time complexity of the BM W algorithm is O(|W|.|S| 2 .log(|S|)).", "formula_coordinates": [7.0, 48.96, 321.17, 251.06, 20.76]}], "doi": ""}

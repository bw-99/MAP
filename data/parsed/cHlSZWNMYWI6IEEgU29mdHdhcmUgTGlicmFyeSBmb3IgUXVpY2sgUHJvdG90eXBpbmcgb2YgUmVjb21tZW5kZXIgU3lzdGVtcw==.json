{"title": "pyRecLab: A So ware Library for ick Prototyping of Recommender Systems", "authors": "Gabriel Sepulveda; Vicente Dominguez; Denis Parra", "pub_date": "", "abstract": "is paper introduces pyRecLab, a so ware library wri en in C++ with Python bindings which allows to quickly train, test and develop recommender systems. Although there are several so ware libraries for this purpose, only a few let developers to get quickly started with the most traditional methods, permi ing them to try di erent parameters and approach several tasks without a significant loss of performance. Among the few libraries that have all these features, they are available in languages such as Java, Scala or C#, what is a disadvantage for less experienced programmers more used to the popular Python programming language. In this article we introduce details of pyRecLab, showing as well performance analysis in terms of error metrics (MAE and RMSE) and train/test time. We benchmark it against the popular Java-based library LibRec, showing similar results. We expect programmers with li le experience and people interested in quickly prototyping recommender systems to be bene ted from pyRecLab.", "sections": [{"heading": "INTRODUCTION", "text": "When so ware developers face the challenge of learning about recommender systems (RecSys), developing a RecSys for the rst time, or quickly prototyping a recommender to test available data, a reasonable option to get started is using an existent so ware library. Nowadays, it is possible to nd several libraries in di erent programming languages, being among of the most popular ones MyMedialite [3], LensKit [2], LibRec [4], lightfm [6] and rrecsys [1].\nWhile the aforementioned tools have documentation, implement several methods, and present most of the common functionality required to develop and evaluate a recommendation system, all Permission to make digital or hard copies of part or all of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for pro t or commercial advantage and that copies bear this notice and the full citation on the rst page. Copyrights for third-party components of this work must be honored. For all other uses, contact the owner/author(s).  of them miss some type of functionality or algorithm which hinder specially newcomers. In particular, while teaching for three years a graduate course on Recommender Systems during the Fall Semester (2014-2016) at a Department of Computer Science, most students have found recurrent di culties in using existent tools to nish an introductory assignment. e assignment is related to tasks such as rating prediction and item recommendation to speci c users, using well-known collaborative ltering methods such as User K-NN, Item K-NN, Slope One and FunkSVD [7]. Some of the problems found were: (a) the lack of implementation of certain methods in some libraries, (b) poor train/test time performance under medium-sized datasets (such as Rrecsys which does not implement sparse matrices), (c) lack of functionality which is typical in a recommendation se ing, such us suggesting a list of items given a speci c user ID, (d) di culties to change parameters in certain models, and (e) students' lack of familiarity with certain programming languages such as Java or C#. While Java is the most popular language based on several rankings, it is also the case that Python is the most popular introductory teaching language in the U.S. since 2004 [5] as well as the one with largest growth in the latest 5 years based on the PYPL ranking 1 .\nFor these reasons, we developed pyRecLab 2 . We wrote it in C++ with Python bindings, in order to facilitate its adoption among new programmers familiar with Python, but also o ering an appropriate performance when dealing with larger datasets. We implemented most of the foundational recommendation methods for rating prediction and recommendation. Moreover, users can easily change ", "publication_ref": ["b2", "b1", "b3", "b5", "b0", "b6", "b4"], "figure_ref": [], "table_ref": []}, {"heading": "OTHER RECOMMENDATION LIBRARIES", "text": "MyMediaLite [3]: It implements several recommendation algorithms, supporting explicit and implicit feedback, as well as contextaware methods. It also allows evaluation with metrics such as MAE, RMSE, prec@N, and nDCG [7]. Many of it functionalities are available from command line; however, to integrate it with other soware it is necessary to program in languages like C# or F#, which is di cult for many newcomer Python developers.\nLenskit [2]: A popular library which provides all basic collaborative ltering methods for predicting ratings (User/Item KNN, Slope One and FunkSVD). It is developed in Java, which could be an entry barrier for new programmers who are mostly familiar with Python.\nLibRec [4]: Just like MyMediaLite and Lenskit, a well developed library in terms of algorithms implemented and the metrics available for evaluation. However, documentation is not as good as Lenskit and since it is implemented in Java, it also raises the barrier for new programmers.\nLightfm [6]: is library implements several matrix factorization algorithms for both implicit and explicit feedback. It also has an interface for Python, facilitating its use to several developers. However, it does not implement basic traditional recommender algorithms (User/Item KNN, slope One), so it is not advisable for introductory teaching purposes.\nRrecsys [1]: is tool gets the closest to pyRecLab in terms of easy-of-use, quick prototyping and educational purposes. It is wri en in R language. However, it has two main weaknesses: it misses some traditional algorithms (like Slope One) and it is limited in terms of the amount of data it can process, since it does not support sparse matrices. input le formats (csv, tsv) as well as allowing the user to specify what to le columns represent. \u2022 Data handlers. is module implements several data structures, which allow a homogeneous access to the ratings. It grants a good level of independence from the original format from which data were read, with a high level of abstraction. ese data structures will be directly used by the recommendation algorithms for the processing, storage and generation of output data. is module represents the interface between the recommendation algorithms and the Python interpreter. It was developed in C++, and since we aimed at maintaining an appropriate level of code readability, we decided to use the Python/C API rather than Cython for implementation. is allows us to de ne low-level structures in C++ language with a direct mapping with objects handled by the Python interpreter. In this way, we have de ned a data type for each of the recommendation algorithms, which can be instantiated directly from the Python interpreter.", "publication_ref": ["b2", "b6", "b1", "b3", "b5", "b0"], "figure_ref": [], "table_ref": []}, {"heading": "DESIGN AND IMPLEMENTATION", "text": "", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "RESULTS & CONCLUSION", "text": "To check the performance of pyRecLab, we tested it against the popular library LibRec [4] in terms of error and train/test time.\nPrediction Results. MAE and RMSE results of rating prediction over Movielens 100K dataset are shown in Table 1. Di erences are very small to LibRec, showing that pyRecLab can reproduce results of a mature recommender library. Time Performance. Although the results vary depending on the method, Figure 2 shows train/test performance using FunkSVD. While both libraries perform similarly in training phase, pyRecLab performs faster in testing time at di erent number of latent factors.\nSummarizing, we have introduced PyRecLab, a library for recommender systems which combines the performance of C++ in its implementation with the versatility of Python for easy-of-use. We expect to add algorithms and recommendations metrics, as well as new code samples to facilitate its widespread adoption.", "publication_ref": ["b3"], "figure_ref": [], "table_ref": ["tab_1"]}], "references": [{"ref_id": "b0", "title": "rrecsys: an R-package for prototyping recommendation algorithms", "journal": "", "year": "2016", "authors": "C Ludovik; Markus Zanker"}, {"ref_id": "b1", "title": "LensKit: a modular recommender framework", "journal": "ACM", "year": "2011", "authors": "Michael Michael D Ekstrand; Jack Ludwig; John T Kolb;  Riedl"}, {"ref_id": "b2", "title": "MyMediaLite: A free recommender system library", "journal": "ACM", "year": "2011", "authors": "Zeno Gantner; Christoph Ste En Rendle; Lars Freudenthaler;  Schmidtieme"}, {"ref_id": "b3", "title": "LibRec: A Java Library for Recommender Systems", "journal": "", "year": "2015", "authors": "Guibing Guo; Jie Zhang; Zhu Sun; Neil Yorke-Smith"}, {"ref_id": "b4", "title": "Python is now the most popular introductory teaching language at top us universities", "journal": "BLOG@ CACM", "year": "2014-07", "authors": "Philip Guo"}, {"ref_id": "b5", "title": "Metadata Embeddings for User and Item Cold-start Recommendations", "journal": "", "year": "2015", "authors": "Maciej Kula"}, {"ref_id": "b6", "title": "Recommender systems: Sources of knowledge and evaluation metrics", "journal": "Springer", "year": "2013", "authors": "Denis Parra; Shaghayegh Sahebi"}], "figures": [{"figure_label": "1", "figure_type": "figure", "figure_id": "fig_0", "figure_caption": "Figure 1 :1Figure 1: pyRecLab architecture.", "figure_data": ""}, {"figure_label": "12", "figure_type": "figure", "figure_id": "fig_1", "figure_caption": "Figure 1 ,Figure 2 :12Figure 1, shows the main modules of pyRecLab. At the bo om, the blue block represents the Python interpreter, which loads the methods and data structures when importing the PyRecLab module. At the top, in orange, all the sub-modules of the library: \u2022 File IO. is component allows data input/output by means of reading from text les, as well as writing output recommendations in txt and json formats. It allows great exibility in terms of", "figure_data": ""}, {"figure_label": "", "figure_type": "table", "figure_id": "tab_0", "figure_caption": "", "figure_data": "Data Handlers( Rating MatrixPython Interface"}, {"figure_label": "1", "figure_type": "table", "figure_id": "tab_1", "figure_caption": "pyRecLab vs. LibRec on MovieLens 100K data.", "figure_data": "MAERMSEpyRecLab LibRec pyRecLab LibRecUserAvg0.8501910.850191 1.0629951.062995ItemAvg0.8275680.827568 1.0334111.033411SlopeOne 0.7485520.748299 0.9527950.952460User KNN 0.7548160.755361 0.9623550.966395Item KNN 0.7493160.748354 0.9536370.953433Funk SVD 0.7328200.731986 0.9253900.923978parameters to understand their e ect and they can also producerecommendations given a speci c user ID."}, {"figure_label": "", "figure_type": "table", "figure_id": "tab_2", "figure_caption": "\u2022 Recommendation Algorithms. Under the Data handlers block, there are a number of contiguous blocks representing the recommendation algorithms. Algorithms for rating prediction and recommendation are: Item Average, Slope One, User KNN, Item KNN and Funk SVD. On the other hand, Most Popular is only used to generate recommendations. \u2022 Python Interface.", "figure_data": ""}], "formulas": [], "doi": "10.1145/nnnnnnn.nnnnnnn"}

{"title": "30 Years of Software Refactoring Research: A Systematic Literature Review", "authors": "Chaima Abid; Vahid Alizadeh; Marouane Kessentini;  Thiago; Nascimento Ferreira; Danny Dig; Thiago Do", "pub_date": "", "abstract": "Due to the growing complexity of software systems, there has been a dramatic increase and industry demand for tools and techniques on software refactoring in the last ten years, defined traditionally as a set of program transformations intended to improve the system design while preserving the behavior. Refactoring studies are expanded beyond code-level restructuring to be applied at different levels (architecture, model, requirements, etc.), adopted in many domains beyond the object-oriented paradigm (cloud  computing, mobile, web, etc.), used in industrial settings and considered objectives beyond improving the design to include other non-functional requirements (e.g., improve performance, security, etc.). Thus, challenges to be addressed by refactoring work are, nowadays, beyond code transformation to include, but not limited to, scheduling the opportune time to carry refactoring, recommendations of specific refactoring activities, detection of refactoring opportunities, and testing the correctness of applied refactorings. Therefore, the refactoring research efforts are fragmented over several research communities, various domains, and objectives. To structure the field and existing research results, this paper provides a systematic literature review and analyzes the results of 3183 research papers on refactoring covering the last three decades to offer the most scalable and comprehensive literature review of existing refactoring research studies. Based on this survey, we created a taxonomy to classify the existing research, identified research trends, and highlighted gaps in the literature and avenues for further research.", "sections": [{"heading": "INTRODUCTION", "text": "For decades, code refactoring has been applied in informal ways before it was introduced and properly defined in academic work. The first known use of the term Refactoring in the published literature was in an article written by William Opdyke and Ralph Johnson in September 1990 [1]. William Griswold's Ph.D. dissertation [2], published in 1991, is also one of the first major academic works on refactoring functional and procedural programs. The author defined a set of automatable transformations and described their impact on the code structure. One year later, William Opdyke also published his Ph.D. dissertation [3] on the Refactoring of object-oriented programs. In 1999, Martin Fowler published the first book about refactoring that has as title Improving the Design of Existing Code [4]. This book popularised the practice of code refactoring, set its fundamentals, and had a high impact on the world of software development. Martin Fowler defined Refactoring in his book as a sequence of small changes -called refactoring operations -made to the internal structure of the code without altering its external behavior. The goal of these refactoring operations is to improve the code readability and reusability as well as reduce its complexity and maintenance costs in the long run. Since then, a lot has changed in the software development world, but one thing has remained the same: The need for Refactoring.\nNearly 30 years later, Refactoring has become a crucial part of software development practice, especially with the ever-changing landscape of IT and user requirements. It is a core element of agile methodologies, and most professional IDEs include refactoring tools. Recent studies show that restructuring software systems may reduce developers' time by over 60% [5]. Others demonstrate how Refactoring can help detect, fix, and reduce software bugs [6]. Companies are becoming more and more aware of the importance of Refactoring, and they encourage their developers to continuously refactor their code to set a clean foundation for future updates.\nIt might be difficult for a developer to be justified to spend time on improving a piece of code to have the same functionality. However, it can be seen as an investment for future developments. Specifically, Refactoring is a crucial task on software with longer lifespans with multiple developers need to read and understand the codes. Refactoring can improve both the quality of software and the productivity of its developers. Increasing the quality of the software is due to decreasing its complexity at design and source code level caused by refactoring, which is proved by many studies [7], [8]. The long-term effect of Refactoring is improving developers' productivity by increasing two crucial factors, understandability and maintainability of the codes, especially when a new developer joins an existing project. It is shown that Refactoring can help to detect, fix, and reduce software bugs and leading to software projects which are less likely to expose bug in development process [6]. Another study claims that there are some specific kinds of refactoring methods that are very probable to induce bug fixes [9].", "publication_ref": ["b0", "b1", "b2", "b3", "b4", "b5", "b6", "b8", "b5", "b9"], "figure_ref": [], "table_ref": []}, {"heading": "Problem Description and Motivation", "text": "Refactoring is among the fastest-growing software engineering research areas, if not the fastest. Figure 1 shows the distribution of publications related to refactoring across the globe. Figure 2 reflects the number of publications in the top 10 most active countries in the field of Refactoring. The United States tops the list of countries with a total of 714 publications followed by Germany and Canada with a total of 317 and 248 publications, respectively. During the past 4 years, the number of published refactoring studies has increased with an average of 37% in all top 10 countries. This demonstrates a noticeable increase in interest/need in Refactoring.\nOver 5584 authors from all over the world contributed to the field of Refactoring. We highlight the most active authors in Figure 3 and4, based on both the number of publications and citations in the area. Many scholars started research in the refactoring filed prior to 2000. Others are relatively new to the field and started their contributions after year 2010. All top 10 authors in the field have a constantly increasing number of publications over the past 20 years. Marouane Kessentini heads the list with a total of 43 publications (51% of them were published during the past five years) followed by Steve Counsell and Danny Dig with a total of 39 and 36 publications, respectively. Marouane kessentini published an average of more than 4 articles per year while all other authors published an average between 1.5 and 2.75 publications per year. Figure 5  Recently, several researchers and practitioners have adopted the use of refactoring operations at higher degrees of abstraction than source code level (e.g., databases, Unified Modeling Language (UML) models, Object Constraint Language (OCL) rules, etc.). As a result, they often had to redefine the principles and guidelines of refactoring according to the requirements and specifications of their domains. For instance, in User Interface Refactoring, developers make changes to the UI to retain its semantics and consistency for all users. These refactorings include, but not limited to, Align entry field, Apply common button size, Apply font, Indicate format, and Increase color contrast. In Database Refactoring, developers improve the database schema by applying changes such as Rename column, Split table, Move method, Replace LOB with table, and Introduce column constraint. Henceforth, the refactoring operations are called restructuring operations when applied to artifacts other than the ones related to object-oriented programming. Although the different refactoring communities (e.g., software maintenance and evolution, model-driven engineering, formal methods, search-based software engineering, etc.) are interdependent in many ways, they remain disconnected, which may create inconsistencies. For example, when model-level Refactoring does not match the codelevel practice, it can lead to incoherence and technical issues during development. The detachment is visible not only between different refactoring domains but also between practitioners and researchers. The distance between them primarily originates from the lack of insights into both worlds' recent findings and needs. For instance, developers tend to use the refactoring features provided by IDEs due to their accessibility and popularity. Most of the time, they are uninformed of the benefits that can be derived from adopting state-of-the-art advances in academia. All these challenges call for a need to identify, critically appraise, and summarize the existing work published across the different domains. Existing systematic literature reviews examine findings in very specific refactoring areas such as identifying the impact of refactoring on quality metrics [10] or code smells [11]. To the best of our knowledge, no work collects and synthesizes existing research, tools, and recent advances made in the refactoring community. This paper is the most comprehensive synthesis of theories and principles of refactoring intended to help researchers and practitioners make quick advances and avoid reinventing or re-implementing research infrastructure from scratch, wasting time and resources. We also build a refactoring infrastructure that will connect researchers with practitioners in industry and provide a bridge between different refactoring communities in order to advance the field of refactoring research.", "publication_ref": ["b10", "b11"], "figure_ref": ["fig_1", "fig_2", "fig_3", "fig_4"], "table_ref": []}, {"heading": "Contributions", "text": "The Refactoring area is growing very rapidly, and many advances, challenges, and trends have lately emerged. The primary purpose of this study is to implement a systematic literature review (SLR) for the field of refactoring as a whole. This SLR follows a defined protocol to increase the study's validity and rationality so that the output can be high in quality and evidence-based. We used various electronic databases and a large number of articles to comprise all the possible candidate studies and cover more works than existing SLRs.\nThis SLR contributes to the existing literature in the following ways:", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "\u2022", "text": "We identify a set of 3183 studies related to refactoring published until May 2020, fulfilling the quality assessment criteria. These studies can be used by the research and industry communities as a reliable basis and help them conduct further research on Refactoring.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "\u2022", "text": "We present a comprehensive qualitative and quantitative synthesis reflecting the state-of-the-art in refactoring with data extracted from those 3183 high-rigor studies. Our synthesis covers the following themes: artifacts, refactoring tools, different approaches, and performance evaluation in refactoring research.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "\u2022", "text": "We provide guidelines and recommendations based on our findings to support further research in the area.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "\u2022", "text": "We implement a platform that includes the following components: (1) A searchable repository of refactoring publications based on our proposed taxonomy;\n(2) A searchable repository of authors who contributed to the refactoring community; (3) Analysis  ", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Related Surveys", "text": "Mens et al. [12] provided an overview of existing research in the field of software refactoring. They compared and discussed different approaches based on different criteria such as refactoring activities, techniques and formalisms, types of software artifacts that are being refactored, and the effect of refactoring on the software process. Elish et al. [13] proposed a classification of refactoring methods based on their measurable effect on software quality attributes. The investigated software quality attributes are adaptability, completeness, maintainability, understandability, reusabil- ity, and testability. Du Bois et al. [14] provided an overview of the field of software restructuring and Refactoring. They summarized Refactoring's current applications and tool support and discussed the techniques used to implement refactorings, refactoring scalability, dependencies between refactorings, and application of refactorings at higher levels of abstraction. Mens et al. [15] identified emerging trends in refactoring research (e.g., refactoring activities, techniques, tools, processes, etc.), and enumerates a list of open questions, from a practical and theoretical point of views. Misbhauddin et al. [16] provide a systematic overview of existing research in the field of model Refactoring. Al Dallal et al. [17] presented a systematic literature review of existing studies, published through the end of 2013, identifying opportunities for code refactoring activities. In another of their work [10], they presented a systematic literature review that summarizes the impact of refactoring on several internal and external quality attributes. Singh et al. [11] published a systematic literature review of refactoring concerning code smells. However, the review of Refactoring is done in a general manner, and the identification of code smells and antipatterns is performed in-depth. Abebe et al. [18] conducted a study to reveal the trends, opportunities, and challenges of software refactor researches using a systematic literature review. Baqais et al. [19] performed a systematic literature review of papers that suggest, propose, or implement an automated refactoring process.\nThe different studies mentioned above are mainly about identifying the studies related to very specific or specialized topics. In this paper, we are trying to be as comprehensive as possible by collecting, categorizing, and summarizing all the papers related to refactoring in general that conform to our quality standards.", "publication_ref": ["b12", "b13", "b14", "b16", "b10", "b11"], "figure_ref": [], "table_ref": []}, {"heading": "Organization", "text": "The rest of the paper is organized as follows: First, Section 2 outlines the research method and the underlying protocol for the systematic literature review. Section 3 describes the proposed refactoring infrastructure. The results of this systematic review are reported in Sections 4. Finally, Section 5 presents the conclusions.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "RESEARCH METHODOLOGY", "text": "Our literature review follows the guidelines established by Kitchenham and Charters [20], which decompose a systematic literature review in software engineering into three stages: planning, conducting, and reporting the review. We have also taken inspiration from recent systematic literature reviews in the fields of empirical software engineering [10] and search-based software engineering [21]. All the steps of our research are well documented, and all the related data are available online for further validation and exploration []. This section details the performed research steps and the protocol of the literature review. First, section 2.1 describes the research questions underlying our survey. Second, section 2.2 details the literature search step. Next, section 2.3 highlights the inclusion and exclusion criteria. The data preprocessing step and our proposed taxonomy are described in sections 2.4 and 2.5, respectively. The quality assessment criteria are defined in section 2.6. Finally, Section 2.7 discusses threats to the validity of our study.", "publication_ref": ["b10", "b21"], "figure_ref": [], "table_ref": []}, {"heading": "Research Questions", "text": "The following research questions have been derived based on the objectives described in the introduction, which form the basis for the literature review: ", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Literature Search Strategy", "text": "All the papers have been queried from a wide range of scientific literature sources to make our search as comprehensive as possible: We first defined a list of terms covering the variety of both application domains and refactoring techniques. For that, we checked the title, keywords, and abstract of the relevant papers that were already known to us. Synonyms and keywords were derived from this list. These keywords were combined using logical operators ANDs and ORs to create search terms. Before starting collecting the primary studies (PS), we tested the search terms' effectiveness on all the data sources. Then, we refined the queries to avoid getting irrelevant papers. The string adjustments were agreed on by all authors. The final list of search strings are shown in Table 1. These search strings were modified to suit the specific requirements of different electronic databases. We conducted our search on May 31st, 2020, and identified studies published up until that date. The search was done first by the corresponding author and then verified by the rest of the authors. In our systematic review, we followed a multi-stage model to minimize the probability of missing relevant publications as much as possible. The different stages are shown in figure 6 along with the total returned publications at each stage. The first stage consists of executing the search queries on the databases mentioned above; a total of 6158 references were found. Then, we removed the duplicates, which reduced the list of candidate papers to 3882. Then, we performed a manual examination of titles and abstracts to discard irrelevant publications based on the inclusion and exclusion criteria. We also looked at the body of the paper whenever necessary. This decreased the list of candidate papers to 3161 publications. Next, we  Fig. 6. SLR steps used the resulting set as input for the snowballing process, recommended by Wohlin [22], to identify additional studies. We consulted web profiles of relevant authors and their networks. We also checked cross-references until no further papers were detected. As a result, 17 new references were added. After that, we contacted the corresponding authors of the identified publications to inquire about any missing relevant studies. This led to adding 5 studies.", "publication_ref": ["b22"], "figure_ref": [], "table_ref": ["tab_1"]}, {"heading": "Inclusion and Exclusion Criteria", "text": "To filter out the irrelevant articles among those selected in Stage 2 and determine the Primary studies, we considered the following inclusion and exclusion criteria.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Inclusion criteria", "text": "All of the following criteria must be satisfied in the selected primary studies:\n1) The article must have been published in a peer reviewed journal or conference proceeding between the years 1990 and 2020. The main reason for imposing a constraint over the start year is because the first known use of the term \"refactoring\" in the published literature was in a September, 1990 article by William Opdyke and Ralph Johnson [1]. We included papers up till May 31st 2020.\n2) The article must be related to computer science and engineering and propose techniques, methods and tools for refactoring.\n3) The paper must be written in English.\n4) In case a conference paper has a journal extension, we would include both the conference and journal publications. 5) The paper must pass the quality assessment criteria that are elaborated in Section 2.6.", "publication_ref": ["b0"], "figure_ref": [], "table_ref": []}, {"heading": "Exclusion criteria", "text": "Papers satisfying any of the exclusion criteria were discarded, as follows:\n1) Studies that are not related to the computer science field. 2) Studies that investigated the impact of general maintenance on code quality. In this case, the maintenance tasks were potentially performed due to several reasons and not limited to refactoring, and therefore, we cannot judge whether the impact was due to refactoring or to other maintenance tasks such as corrective or adaptive maintenance. 3) Grey Literature", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Data Preprocessing", "text": "A pre-processing technique was applied to improve reliability and precision, as detailed in the following sub sections.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Simplifying Author's name", "text": "In general, scientific and bibliographic databases such as Web of Science (WoS) and Scopus have the following inconsistencies in authors names:\n\u2022 Most journals abbreviate the author's first name to an initial and a dot.\n\u2022 Most journals use the author name's special accents.\n\u2022 WoS uses a comma between the author's last name and first name initial, but Scopus does not.\nThese name-related inconsistencies mean that scientometrics scripts cannot find all of the similar author's names. For that reason, ScientoPy script applies the following steps to simplify author's name fields:\n\u2022 Remove dots and coma from author's name.\n\u2022 Remove special accents from author's name 2.4.2 Fixing inconsistent country names Some authors use different naming to refer to the same country (such as USA and United States). For that reason, some country names were replaced based on Table 3.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Study Classification", "text": "According to the research questions listed in Section 2.1, we classified the PSs into five dimensions: (1) refactoring lifecycle (related to RQ1), ( 2) artifacts affected by refactoring (related to RQ2), (3) refactoring objectives (related to RQ3), (4) refactoring techniques (related to RQ4) and ( 5) refactoring evaluation (related to RQ5). The determination of the attributes of each dimension was performed incrementally. That is, for each dimension, we started with an empty set of attributes. The authors of this study screened the full texts of the PSs one by one, analyzed each reported study based on the considered dimension, and determined  the attributes of that dimension as considered by each PS. Table 4 outlines the keywords extracted for each category.\nIt should be pointed out that, most of the time, we remove all of the affixes (i.e., suffixes, prefixes, etc.) attached to a word in order to keep its lexical base, also known as root or stem or its dictionary form or lemma. For instance, the word document allows us to detect the words documentation and documenting. Also, we did not include bi-grams and tri-grams that can be detected using one uni-gram. For example, Class Diagram, Object Diagram, Sequence Diagram, and Use Case Diagram can all be detected using the word Diagram alone.\nThe screening of the PSs resulted in determining six stages for the refactoring life-cycle (e.g., detection, prioritization, recommendation, testing, documentation, and prediction). We also classified the papers according to the level of automation of the proposed technique (e.g., automatic, manual, semi-automatic). The results are described in section 4.1. For the second dimension, we identified five artifacts on which the impact of refactoring is studied by at least one of the PSs. These artifacts are code, architecture, model, GUI, and database. The classification of PSs based on these artifacts is discussed in detail in Section 4.2. We subdivided the third dimension into five categories (e.g., External quality, internal quality, performance, migration, and security) to reflect the refactoring objective and six categories (e.g., Object-oriented design, Aspect-oriented design, Model-driven engineering, Documentation, Mobile development, and Cloud computing) to describe the refactoring paradigms. The classification of PSs based on these categories is discussed in detail in Section 4.3. We divided the fourth dimension into four categories (e.g., data mining, search-based algorithms, formal methods, and fuzzy logic) to reveal the refactoring techniques adopted in the studies and into twelve categories (e.g., Java, C, C#, Python, Cobol, PHP, Scala, Smalltalk, Ruby, Javascript, MATLAB, and CSS) to show the most common programming languages used in our PSs. The details of this categorization are reported in section 4.4. Finally, for the fifth dimension, we divide the PSs into two categories: open-source and industrial. The open-source category includes studies that validate their approaches using open source systems. In contrast, the industrial category consists of the studies that validate their work on systems of their industrial collaborators. These findings are outlined in Section 4.5.", "publication_ref": ["b2", "b3"], "figure_ref": [], "table_ref": ["tab_3"]}, {"heading": "Study Quality Assessment", "text": "To ensure a level of quality of papers, we only included venues that are known for publishing high-quality software engineering research in general with an h-index of at least 10, as has been done by [23] . Each of the papers that were published before 2019 has to be cited at least once. The quality of each primary study was assessed based on a quality checklist defined by Kitchenham and Charters [20]. This step aims to extract the primary studies with information suitable for analysis and answering the defined research questions. The quality checklist, (described in table 2) were defined by Galster et al. [23]. They are developed by considering bias and validity problems that can occur at different stages, including the study design, conduct, analysis, and conclusion. Each question is answered by a \"Yes\", \"Partially\", or \"No\", which correspond to a score of 1, 0.5, or 0, respectively. If a question does not apply to a study, we do not evaluate the study for that question. The quality assessment checklist was independently applied to all 3882 studies by two of the authors. All disagreements on the quality assessment results were discussed, and a consensus was reached eventually. Few cases where agreement could not be reached were sent to the third author for further investigation. 154 studies did not meet the quality assessment criteria.", "publication_ref": ["b23", "b23"], "figure_ref": [], "table_ref": []}, {"heading": "Threats to Validity", "text": "Several limitations may affect the generalizability and the interpretations of our results. The first is the possibility of paper selection bias. To ensure that the studies were selected in an unbiased manner, we followed the well-defined research protocol and guidelines reported by Kitchenham and Charters [20] instead of proposing nonstandard quality factors. Also, the final decision on the articles with selection disagreements was performed based on consensus meetings. The Primary studies were assessed by one researcher and checked by the other, a technique applied in similar studies [21]. The second threat consists of missing a relevant study. To overcome this threat, we employed several strategies that we mentioned in Section 2.2. Few related studies were detected after performing the automatic search, which indicates that the constructed search strings and the mentioned utilized libraries were comprehensive enough to identify most of the relevant articles. Another critical issue is whether our taxonomy is complete and robust sufficient to analyze and classify the primary studies. To overcome this problem, we used an iterative content analysis method by going through the papers one by one and continuously expand the taxonomy for every new encountered concept. Furthermore, to gather sufficient keywords to detect the different categories, we followed the same iterative process, and we added synonyms based on the authors' expertise in the field of refactoring. Another threat is related to the tagging of the papers according to our taxonomy. To mitigate this problem, we asked 27 graduate students to check the correctness of the classification results by reading the abstract, the title, and keywords. They also check the body of the paper whenever necessary.", "publication_ref": ["b21"], "figure_ref": [], "table_ref": []}, {"heading": "REFACTORING INFRASTRUCTURE", "text": "We implemented a large scale platform [24] that collects, manages, and analyzes refactoring related papers to help researchers and practitioners share, report, and discover the latest advancements in software refactoring research. It includes the following components:\n1) A searchable repository of refactoring publications based on our proposed taxonomy. Figure 9 shows a screenshot of the publications' tab of the refactoring repository website. The papers can be searched by author, title, or year of publication. Each paper has tags that describe its content based on our taxonomy described in section 2.5. The papers can also be filtered using those tags and sorted alphabetically or chronologically according to the title and year of publication, respectively. The user can export the publications' dataset to many formats, including pdf, excel, and CSV. He can also easily report a new publication by entering its link. 2) A searchable repository of authors who contributed to the refactoring community. Figure 8 shows a screenshot of the authors' tab of the refactoring repository website. The authors can be searched and sorted alphabetically by name, affiliation, or country. They can also be sorted based on the total number of refactoring publications.\nThe user can also consult the Google Scholar and Scopus profiles of the authors if available. Finally, the user can easily report a new author by entering their information and their profile. Furthermore, we defined the refactoring h-index, which shows how many papers about refactoring published by the author have been cited proportionately. A refactoring h-index of X means that the author has X papers about refactoring that have been cited at least X times. Authors can also be sorted according to the refactoring h-index and the total number of citations (see figure 11). Besides, we created a coauthor network and corresponding visualizations (see figure 12) to get a snapshot view of the breadth and depth of an individual's collaborations in the field of refactoring research. Finally, we generated a histogram (see figure 7) that shows the number of publications issued by the top institutions active in the refactoring research by considering the authors' affiliations.", "publication_ref": ["b24"], "figure_ref": ["fig_7", "fig_1", "fig_9", "fig_6"], "table_ref": []}, {"heading": "3) Analysis and visualization of the refactoring", "text": "trends and techniques based on the collected papers. Figure 10 shows a screenshot of the refactoring repository dashboard. It contains histograms and pie charts that show the distribution and percentages of the categories defined in our taxonomy. It also includes maps that reflect the spread of refactoring activity across the world.\nThe proposed infrastructure will enable researchers to perform a fair comparison between their new refactoring approaches and state-of-the-art tools; enable researchers to use refactoring data of large software systems; facilitate interactions between researchers from currently disconnected domains/communities of refactoring (model-driven engineering, service computing, parallelism and performance optimization, software quality, testing, etc.); enable practitioners and researchers to quickly identify relevant existing research papers and tools for their problems based on the proposed taxonomy and classification; create benchmarks against which various refactoring approaches can be evaluated; enable effective interactions between practitioners and refactoring researchers to identify relevant problems faced by the software industry. ", "publication_ref": [], "figure_ref": ["fig_1"], "table_ref": []}, {"heading": "RESULTS", "text": "In this section, we aim to answer the research questions. To provide an overview of the current state of the art in refactoring and guide the reader to a specific set of approaches, tools, and recent advances that are of interest, we classified the 3183 reviewed papers based on the taxonomy described in Section 2.5. Table 5 contains representative references for the categories created for each RQ. We only provided 10 references per category because we cannot possibly report in this paper the categorization of all the studies since we are dealing with a total of 3183 papers. The results of the classification of all the papers are provided in our website [24]. For some taxonomy categories, papers may have multiple values and thus be listed several times. As a result, percentages in the tables may sum up to more than 100 percent. Also, not all the papers were classified in all dimensions. Consequently, percentages in one dimension may not sum up to 100 percent. The rest of this section presents the observations and insights that can be derived from the visualization of the categories.", "publication_ref": ["b24"], "figure_ref": [], "table_ref": ["tab_4"]}, {"heading": "Refactoring life-cycle", "text": "Going through the primary studies, we have been able to establish a refactoring life-cycle that is composed of six \u2022 Refactoring detection: Identifying refactoring opportunities is an important stage that precedes the actual refactoring process. It can be done by manually inspecting and analyzing an artifact of a system to identify refactoring opportunities. However, this technique is time-consuming and costly. Researchers in this area typically propose fully or semiautomated techniques to identify refactoring opportunities. These techniques may be applicable to different artifacts and should be evaluated empirically.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "\u2022", "text": "", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Refactoring prioritization:", "text": "The number of refactoring opportunities usually exceeds the amount of problems that the developer can deal with, particularly when the effort available for performing refactorings is limited. Moreover, not all refactoring opportunities are equally relevant to the goals of the system or its health. In this stage, the refactorings operations are prioritized using different criteria (e.g., maximizing the refactoring of classes with a large  number of anti-patterns or with the previous history of bugs, etc.) according to the needs of developers.\n[S1], [S2], [S3], [S4], [S5], [S6], [S7], [S8], [S9], [S10] Prioritization 9.43% [S11], [S12], [S13], [S14], [S15], [S16], [S17], [S18], [S19], [S20] Recommendation 16.18% [S3], [S11], [S12], [S21], [S22], [S23], [S24], [S25], [S26], [S27] Testing 18.44% [S4], [S6], [S7], [S8], [S13], [S28], [S29], [S30], [S31], [S32] Documention 5.22% [S33], [S34], [S35], [S36], [S37], [S38], [S39], [S40], [S41], [S42], [S43] Prediction 4.818% [S44], [S45], [S46], [S47], [S48], [S49], [S50], [S51], [S52], [S53] Level of automation (RQ1) Automatic 30.95% [S54], [S55], [S56], [S57], [S58], [S59], [S60], [S61], [S62], [S63] Semi-automatic 1.95% [S64], [S65], [S66], [S67], [S68], [S69], [S70], [S71], [S72], [S73], [S74], [S75] Manual 8.67% [S69], [S76], [S77], [S78], [S79], [S80], [S81], [S82], [S83], [S84] Artifact (RQ2) Code 72.89% [S1], [S2], [S3], [S11], [S65], [S85], [S86], [S87], [S88], [S89] Model 59.25% [S1], [S3], [S28], [S29], [S65], [S87], [S89], [S90], [S91], [S92] Architecture 17.25% [S28], [S91], [S93], [S94], [S95], [S96], [S97], [S98], [S99], [S100] GUI 2.58% [S6], [S8], [S28], [S87], [S89], [S90], [S101], [S102], [S103], [S104] Database 4.12% [S27], [S36], [S65], [S100], [S105], [S106], [S107], [S108], [S109], [S110] Paradigm (RQ3) Object-oriented design 34.09% [S1], [S8], [S30], [S85], [S87], [S88], [S101], [S111], [S112], [S113] Aspect-oriented 10.87% [S88], [S96], [S101], [S102], [S103], [S114], [S115], [S116], [S117], [S118] Model-driven engineering 7.35% [S3], [S15], [S32], [S58], [S65], [S119], [S120], [S121], [S122], [S123] Mobile apps development 3.55% [S23], [S87], [S87], [S95], [S99], [S112], [S124], [S125], [S126], [S127] Could computing 4.15% [S128], [S129], [S130], [S131], [S132], [S133], [S134], [S135], [S136], [S137] Refactoring Objective (RQ3) Internal Quality 41.63% [S3], [S12], [S21], [S29], [S30], [S89], [S90], [S94], [S138], [S139] Performance 15.93% [S10], [S12], [S28], [S86], [S88], [S91], [S92], [S96\n\u2022 Refactoring recommendation: Several refactoring recommendation tools have been proposed that dynamically adapt and suggest refactorings to developers. The output is sequences of refactorings that developers can apply to improve the quality of systems by fixing, for example, code smells or optimizing security metrics.\n\u2022 Refactoring testing: After choosing the refactorings to be applied, tests need to be done to ensure the correctness of artifacts transformations and avoid future bugs. This is done by checking the satisfaction of the pre-and post-conditions of the refactoring operations and the preservation of the system behavior.\n\u2022 Refactoring documentation: After applying and testing the refactorings, we need to document the refac- torings, their locations, why they have been applied, and the quality improvements.\n\u2022 Prediction: It is interesting for developers to know which locations are likely to demand refactoring in future releases of their software products. This will help them focus on the relevant artifacts that will undergo changes in the future, prepare them for further improvements and extensions of functionality, and optimize the management of limited resources and time. Predicting locations of future refactoring can be done using the development history.\nFigure 13 illustrates the percentage of the papers related to each stage of the refactoring life-cycle. 33.08% of the papers deal with testing. Researchers have invested heavily in testing to ensure the reliability of refactoring because changing the structure of code can easily introduce bugs in the program and lead to challenging debugging sessions. A plenty of effort is made towards the automation of the testing process to facilitate the adoption of refactoring [S54], [S55], [S56]. Detecting refactoring opportunities is also a topic of interest to researchers. Several approaches have been proposed to detect refactoring opportunities including but not limited to techniques that depend on quality metrics (e.g., cohesion, coupling, lines of code, etc.), code smells (e.g., feature envy, Blob class, etc.), Clustering (similarities between one method and other methods, distances between the methods and attributes, etc.), Graphs (e.g., represent the dependencies among classes, relations between methods and attributes, etc.), and Dynamic analysis (e.g., analyzing method traces, etc.). Refactoring documentation is an underexplored area of research. Only 5.22% of the collected papers dived into refactoring documentation. Many studies examined the automation of the different refactoring stages to reduce the refactoring effort and, therefore, increase its adaption. Figure 14 shows the count of publications dealing with manual, semi-automatic, and automated refactoring. In fact, 30.95% of the papers deal with the automation of refactoring. Only 1.95% and 8.67% of the papers used manual and semi-automatic refactoring, respectively.", "publication_ref": [], "figure_ref": ["fig_10", "fig_4"], "table_ref": []}, {"heading": "Artifacts affected by refactoring", "text": "As we mentioned before, refactoring is not limited to software code. In fact, it can be applied to any type of software artifacts (e.g., software architectures, database schema, models, user interfaces, and code). Figure 15 shows the percentage of refactoring publications per artifact. The evidence from this histogram shows that the most popular refactoring artifact is code (72.89%). Model refactoring has also received considerable attention, with a percentage of 59.25%. Graphical user interfaces (GUIs) and Database refactoring have received the least attention of all with a fraction of only 4.12% and 2.58%, respectively. This might be due to the fact that database refactoring is conceptually more difficult than code refactoring; code refactorings only need to maintain behavioral semantics while database refactorings also must maintain informational semantics. Also, GUI refactoring is very demanding, requiring the adoption of user interfaces architectural patterns from the early software design stages. Future research should explore database and user interface refactoring further as they are an indispensable part of today's software.", "publication_ref": [], "figure_ref": ["fig_11"], "table_ref": []}, {"heading": "Refactoring objectives", "text": "Five paradigms have been identified from analyzing the primary studies: object-oriented designs, cloud computing, mobile apps, model-driven, and aspect-oriented. Objectoriented programming has gained popularity because it matches the way people actually think in the real world, structuring their code into meaningful objects with relationships that are obvious and intuitive. The increased popularity of the object-oriented paradigm has also increased the interest in object-oriented refactoring. This can be observed in figure 16 where more than 34% of the studies related to refactoring focus on object-oriented designs. Less than 5% of the papers investigated refactoring for cloud computing and mobile app development. For the refactoring objectives classification of the taxonomy, five subcategories are considered: external quality (e.g. correctness, usability, efficiency, reliability, etc.) , internal quality (e. g. maintainability, flexibility, portability, re-usability, readability etc.) , performance (e.g. response time, error rate, request rate, memory use, etc.), migration (e.g. Dispersion in the Class Hierarchy, number of referenced variables, number of assigned variables etc. ), security (e.g. time needed to resolve vulnerabilities, Number of viruses and spams blocked, Number of port probes, number of patches applied, Cost per defect, Attack surface etc.). Figure 17 is illustrating the reasons why people refactor their systems. Improving the internal quality takes up the largest portion (41.63%) followed by refactoring to improve the external quality (22.68%). Although security is a major concern for almost all systems, only 3.11% of the papers investigated refactorings for security reasons.", "publication_ref": [], "figure_ref": ["fig_12", "fig_6"], "table_ref": []}, {"heading": "Refactoring techniques", "text": "Object-oriented programming languages have common traits/properties that facilitate the development of widely automated source code analysis and transformation tools. Many studies [25] have given sufficient proof that a refactoring tool can be built for almost any object-oriented language (Python, PHP, Java, and C++). Support for multiple languages in a refactoring tool is mentioned by [26]. Java is probably the most commercially important recent objectoriented language with an infrastructure that is designed to support analysis. It has generic parsing, tree building, prettyprinting, tree manipulation, source-to-source rewriting, attribute grammar evaluations, control, and data flow analysis. This explains the fact that 17.15% of refactoring studies (see figure 18) provided refactoring techniques and tools that support Java. At the same time, most of the other programming languages have a fraction of less than 1%. We classified the refactoring techniques into four main categories: data mining (e.g., Clustering, Classification, Decision trees, Association, Neural networks, etc.), search-based methods (e.g., Genetic algorithms, Hill climbing, Simulated annealing, Multi-objective evolutionary algorithms, etc.), formal methods (B-Method, the specification languages used in automated theorem proving, RAISE, the Z notation, SPARK Ada, etc.), and fuzzy logic. More than 25% of the papers use Search-based techniques to address refactoring problems (see figure 19). This can be explained by the fact that search-based approaches have been proven to be efficient at finding solutions for complex and labor-intensive tasks. With the growing complexity of software systems, there's an infinite amount of improvement/changes you can make to any piece of artifact. Exact algorithms are hard to use to solve the refactoring problem within an instancedependent, finite run-time. That's why finding optimal refactoring solutions are sacrificed for the sake of getting perfect solutions in polynomial time using heuristic methods like search-based algorithms. Data mining techniques have also received significant attention (17.59%) as they are known to be efficient at discovering new information, such as unknown patterns or hidden relationships, from huge databases like, for our case, large code repositories.", "publication_ref": ["b25", "b26"], "figure_ref": ["fig_13", "fig_7"], "table_ref": []}, {"heading": "Refactoring evaluation", "text": "Open-source software systems are becoming increasingly important these days. 61.1% of the studies (see figure 20) However, opensource software is often developed with a different management style than the industrial ones. Thus, refactoring techniques and tools must be validated and checked for quality and reliability using industrial systems. More industrial collaborations are needed to bridge the gap between academic research and the industry's research needs, and therefore, produce groundbreaking research and innovation that solves complex real-world problems.", "publication_ref": [], "figure_ref": ["fig_2"], "table_ref": []}, {"heading": "CONCLUSION", "text": "In this paper, we have conducted a systematic literature review on refactoring accompanied by meta-analysis to answer the defined research questions. After a comprehensive search that follows a systematic series of steps and assessing the quality of the studies, 3183 publications were identified. Based on these selected papers, we derived a taxonomy focused on five key aspects of Refactoring: refactoring lifecycle, artifacts affected by refactoring, refactoring objectives, refactoring techniques, and refactoring evaluation. Using this classification scheme, we analyzed the primary studies and presented the results in a way that enables researchers to relate their work to the current body of knowledge and identify future research directions. We also implemented a repository that helps researchers/practitioners collect and report papers about Refactoring. It also provides visualization charts and graphs that highlight the analysis results of our selected studies. This infrastructure will bridge the gap among the different refactoring communities and allow for more effortless knowledge transfer. To conclude, we believe that the results of our systematic review will help advance the refactoring research area. Since we expect this research area to continue to grow in the future, we hope that our repository and taxonomy will become useful in organizing, developing and judging new approaches.", "publication_ref": [], "figure_ref": [], "table_ref": []}], "references": [{"ref_id": "b0", "title": "Refactoring: An aid in designing application frameworks and evolving object-oriented systems", "journal": "", "year": "1990", "authors": "W F Opdyke"}, {"ref_id": "b1", "title": "Program restructuring as an aid to software maintenance", "journal": "", "year": "1992", "authors": "W G Griswold"}, {"ref_id": "b2", "title": "Refactoring object-oriented frameworks", "journal": "", "year": "1992", "authors": "W F Opdyke"}, {"ref_id": "b3", "title": "Refactoring: Improving the Design of Existing Code", "journal": "", "year": "1999", "authors": "M Fowler; K Beck; J Brant; W Opdyke; D Roberts"}, {"ref_id": "b4", "title": "Evolutionary algorithms for solving multi-objective problems", "journal": "Springer", "year": "2007", "authors": "C A C Coello; G B Lamont; D A Van Veldhuizen"}, {"ref_id": "b5", "title": "Do We Have a Chance to Fix Bugs When Refactoring Code Smells?", "journal": "", "year": "2016", "authors": "W Ma; L Chen; Y Zhou; B Xu"}, {"ref_id": "b6", "title": "Refactoring-Does It Improve Software Quality?", "journal": "", "year": "2007", "authors": "K Stroggylos; D Spinellis"}, {"ref_id": "b7", "title": "", "journal": "", "year": "", "authors": " Fig"}, {"ref_id": "b8", "title": "Analysis of Code Refactoring Impact on Software Quality", "journal": "MATEC Web of Conferences", "year": "2016", "authors": "A Kaur; M Kaur"}, {"ref_id": "b9", "title": "When does a refactoring induce bugs? An empirical study", "journal": "", "year": "2012", "authors": "G Bavota; B De Carluccio; A De Lucia; M Di Penta; R Oliveto; O Strollo"}, {"ref_id": "b10", "title": "Empirical evaluation of the impact of object-oriented code refactoring on quality attributes: A systematic literature review", "journal": "IEEE Transactions on Software Engineering", "year": "2017", "authors": "J ; Al Dallal; A Abdin"}, {"ref_id": "b11", "title": "A systematic literature review: Refactoring for disclosing code smells in object oriented software", "journal": "Ain Shams Engineering Journal", "year": "2018", "authors": "S Singh; S Kaur"}, {"ref_id": "b12", "title": "A survey of software refactoring", "journal": "IEEE Transactions on software engineering", "year": "2004", "authors": "T Mens; T Tourw\u00e9"}, {"ref_id": "b13", "title": "A classification of refactoring methods based on software quality attributes", "journal": "Arabian Journal for Science and Engineering", "year": "2011", "authors": "K O Elish; M Alshayeb"}, {"ref_id": "b14", "title": "A discussion of refactoring in research and practice", "journal": "", "year": "2004", "authors": "B Du Bois; P Van Gorp; A Amsel; N Van Eetvelde; H Stenten; S Demeyer; T Mens"}, {"ref_id": "b15", "title": "Refactoring: Emerging trends and open problems", "journal": "", "year": "2003", "authors": "T Mens; A Van Deursen"}, {"ref_id": "b16", "title": "Uml model refactoring: a systematic literature review", "journal": "Empirical Software Engineering", "year": "2015", "authors": "M Misbhauddin; M Alshayeb"}, {"ref_id": "b17", "title": "Identifying refactoring opportunities in objectoriented code: A systematic literature review", "journal": "Information and software Technology", "year": "2015", "authors": "J Al Dallal"}, {"ref_id": "b18", "title": "Trends, opportunities and challenges of software refactoring: A systematic literature review", "journal": "International Journal of Software Engineering and Its Applications", "year": "2014", "authors": "M Abebe; C.-J Yoo"}, {"ref_id": "b19", "title": "Automatic software refactoring: a systematic literature review", "journal": "Software Quality Journal", "year": "2019", "authors": "A A B Baqais; M Alshayeb"}, {"ref_id": "b20", "title": "Guidelines for performing systematic literature reviews in software engineering", "journal": "", "year": "2007", "authors": "B Kitchenham; S Charters"}, {"ref_id": "b21", "title": "A systematic review of interaction in search-based software engineering", "journal": "IEEE Transactions on Software Engineering", "year": "2018", "authors": "A Ramirez; J R Romero; C L Simons"}, {"ref_id": "b22", "title": "Guidelines for snowballing in systematic literature studies and a replication in software engineering", "journal": "", "year": "2014", "authors": "C Wohlin"}, {"ref_id": "b23", "title": "Variability in software systems-a systematic literature review", "journal": "IEEE Transactions on Software Engineering", "year": "2013", "authors": "M Galster; D Weyns; D Tofan; B Michalik; P Avgeriou"}, {"ref_id": "b24", "title": "Slr website", "journal": "", "year": "2020", "authors": ""}, {"ref_id": "b25", "title": "A metamodel for language-independent refactoring", "journal": "IEEE", "year": "2000", "authors": "S Tichelaar; S Ducasse; S Demeyer; O Nierstrasz"}, {"ref_id": "b26", "title": "A methodology for the automated introduction of design patterns", "journal": "PRIMARY SOURCES", "year": "1999", "authors": "M \u00d3 Cinn\u00e9ide; P Nixon"}, {"ref_id": "b27", "title": "A comparative study of bug patterns in java cloned and non-cloned code", "journal": "IEEE", "year": "2014", "authors": "H Sajnani; V Saini; C V Lopes"}, {"ref_id": "b28", "title": "A conceptual framework for clone detection using machine learning", "journal": "IEEE", "year": "2017", "authors": "J Ghofrani; M Mohseni; A Bozorgmehr"}, {"ref_id": "b29", "title": "A model-based approach to software refactoring", "journal": "IEEE", "year": "2015", "authors": "I Verebi"}, {"ref_id": "b30", "title": "An empirical investigation into the nature of test smells", "journal": "", "year": "2016", "authors": "M Tufano; F Palomba; G Bavota; M Di Penta; R Oliveto; A De Lucia; D Poshyvanyk"}, {"ref_id": "b31", "title": "Approach to mine the modularity of software network based on the most vital nodes", "journal": "IEEE Access", "year": "2018", "authors": "B Zhang; G Huang; Z Zheng; J Ren; C Hu"}, {"ref_id": "b32", "title": "Are my unit tests in the right package?", "journal": "IEEE", "year": "2016", "authors": "G Balogh; T Gergely; \u00c1 Besz\u00e9des; T Gyim"}, {"ref_id": "b33", "title": "Assessing the refactorability of software clones", "journal": "IEEE Transactions on Software Engineering", "year": "2015", "authors": "N Tsantalis; D Mazinanian; G P Krishnan"}, {"ref_id": "b34", "title": "Automated behavioral testing of refactoring engines", "journal": "IEEE Transactions on Software Engineering", "year": "2012", "authors": "G Soares; R Gheyi; T Massoni"}, {"ref_id": "b35", "title": "Automated refactoring of nested-if formulae in spreadsheets", "journal": "", "year": "2018", "authors": "J Zhang; S Han; D Hao; L Zhang; D Zhang"}, {"ref_id": "b36", "title": "Automated support for program refactoring using invariants", "journal": "IEEE", "year": "2001", "authors": "Y Kataoka; M D Ernst; W G Griswold; D Notkin"}, {"ref_id": "b37", "title": "A comparative study on the bug-proneness of different types of code clones", "journal": "IEEE", "year": "2015", "authors": "M Mondal; C K Roy; K A Schneider"}, {"ref_id": "b38", "title": "An interactive and dynamic search-based approach to software refactoring recommendations", "journal": "IEEE Transactions on Software Engineering", "year": "2018", "authors": "V Alizadeh; M Kessentini; W Mkaouer; M Ocinneide; A Ouni; Y Cai"}, {"ref_id": "b39", "title": "Code hot spot: A tool for extraction and analysis of code change history", "journal": "IEEE", "year": "2011", "authors": "W Snipes; B Robinson; E Murphy-Hill"}, {"ref_id": "b40", "title": "Dynamic and automatic feedback-based threshold adaptation for code smell detection", "journal": "IEEE Transactions on Software Engineering", "year": "2015", "authors": "H Liu; Q Liu; Z Niu; Y Liu"}, {"ref_id": "b41", "title": "Graal: The quest for source code knowledge", "journal": "", "year": "", "authors": "V Cosentino; S Duenas; A Zerouali; G Robles; J M Gonz\u00e1lez-Barahona"}, {"ref_id": "b42", "title": "Identifying extract method refactoring opportunities based on functional relevance", "journal": "IEEE Transactions on Software Engineering", "year": "2016", "authors": "S Charalampidou; A Ampatzoglou; A Chatzigeorgiou; A Gkortzis; P Avgeriou"}, {"ref_id": "b43", "title": "Prioritization of smelly classes: A two phase approach (reducing refactoring efforts)", "journal": "IEEE", "year": "2017", "authors": "A Rani; J K Chhabra"}, {"ref_id": "b44", "title": "Refactoring decision support for developers and architects based on architectural impact", "journal": "IEEE", "year": "2019", "authors": "P Rachow"}, {"ref_id": "b45", "title": "Schedule of bad smell detection and resolution: A new way to save effort", "journal": "IEEE transactions on Software Engineering", "year": "2011", "authors": "H Liu; Z Ma; W Shao; Z Niu"}, {"ref_id": "b46", "title": "Scripting parametric refactorings in java to retrofit design patterns", "journal": "IEEE", "year": "2015", "authors": "J Kim; D Batory; D Dig"}, {"ref_id": "b47", "title": "A longitudinal analysis of the dependency concentration in smaller modules for open-source software products", "journal": "IEEE", "year": "2010", "authors": "M A Parande; G Koru"}, {"ref_id": "b48", "title": "Deep learning based feature envy detection", "journal": "", "year": "2018", "authors": "H Liu; Z Xu; Y Zou"}, {"ref_id": "b49", "title": "Earmo: An energy-aware refactoring approach for mobile apps", "journal": "IEEE Transactions on Software Engineering", "year": "2017", "authors": "R Morales; R Saborido; F Khomh; F Chicano; G Antoniol"}, {"ref_id": "b50", "title": "Facilitating software refactoring with appropriate resolution order of bad smells", "journal": "", "year": "2009", "authors": "H Liu; L Yang; Z Niu; Z Ma; W Shao"}, {"ref_id": "b51", "title": "Identifying renaming opportunities by expanding conducted rename refactorings", "journal": "IEEE Transactions on Software Engineering", "year": "2015", "authors": "H Liu; Q Liu; Y Liu; Z Wang"}, {"ref_id": "b52", "title": "Investigating the use of code analysis and nlp to promote a consistent usage of identifiers", "journal": "IEEE", "year": "2017", "authors": "B Lin; S Scalabrino; A Mocci; R Oliveto; G Bavota; M Lanza"}, {"ref_id": "b53", "title": "Methodbook: Recommending move method refactorings via relational topic models", "journal": "IEEE Transactions on Software Engineering", "year": "2013", "authors": "G Bavota; R Oliveto; M Gethers; D Poshyvanyk; A De Lucia"}, {"ref_id": "b54", "title": "A longitude analysis on bitcoin issue repository", "journal": "IEEE", "year": "2018", "authors": "C Hinds-Charles; J Adames; Y Yang; Y Shen; Y Wang"}, {"ref_id": "b55", "title": "A decision support system to refactor class cycles", "journal": "IEEE", "year": "2015", "authors": "T D Oyetoyan; D S Cruzes; C Thurmann-Nielsen"}, {"ref_id": "b56", "title": "An empirical investigation into the impact of refactoring on regression testing", "journal": "IEEE", "year": "2012", "authors": "N Rachatasumrit; M Kim"}, {"ref_id": "b57", "title": "Automatically repairing test cases for evolving method declarations", "journal": "IEEE", "year": "2010", "authors": "M Mirzaaghaei; F Pastore; M Pezze"}, {"ref_id": "b58", "title": "Characterizing the relative significance of a test smell", "journal": "IEEE", "year": "2006", "authors": "B Van Rompaey; B Du Bois; S Demeyer"}, {"ref_id": "b59", "title": "A refactoring library for scala compiler extensions", "journal": "Springer", "year": "2015", "authors": "A Sherwany; N Zaza; N Nystrom"}, {"ref_id": "b60", "title": "A semantic web based approach for design pattern detection from source code", "journal": "IEEE", "year": "2012", "authors": "S Paydar; M Kahani"}, {"ref_id": "b61", "title": "A card game for learning software-refactoring principles", "journal": "", "year": "2019", "authors": "T Haendler"}, {"ref_id": "b62", "title": "A case study implementing features using aspectj", "journal": "IEEE", "year": "2007", "authors": "C Kastner; S Apel; D Batory"}, {"ref_id": "b63", "title": "A catalog of bad smells in design-by-contract methodologies with java modeling language", "journal": "Journal of Computing Science and Engineering", "year": "2013", "authors": "T Viana"}, {"ref_id": "b64", "title": "A concept and implementation of higher-level xml transformation languages", "journal": "Knowledge-Based Systems", "year": "2009", "authors": "D Foetsch; E Pulvermueller"}, {"ref_id": "b65", "title": "A data structure for the refactoring of multimodal knowledge", "journal": "", "year": "2009", "authors": "J Reutelshoefer; J Baumeister; F Puppe"}, {"ref_id": "b66", "title": "A measurement framework for object-oriented software testability", "journal": "Information and software technology", "year": "2005", "authors": "S Mouchawrab; L C Briand; Y Labiche"}, {"ref_id": "b67", "title": "A methodology to infer and refactor an object-oriented model from c applications", "journal": "Software: Practice and Experience", "year": "2018", "authors": "I Cassol; G Ar\u00e9valo"}, {"ref_id": "b68", "title": "A novel methodology based on formal methods for analysis and verification of wikis", "journal": "IEEE", "year": "2014", "authors": "G De Ruvo; A Santone"}, {"ref_id": "b69", "title": "Interactive refactoring documentation bot", "journal": "IEEE", "year": "2019", "authors": "S Rebai; O B Sghaier; V Alizadeh; M Kessentini; M Chater"}, {"ref_id": "b70", "title": "Mining execution relations for crosscutting concerns", "journal": "IET software", "year": "2008", "authors": "J Krinke"}, {"ref_id": "b71", "title": "The inconsistent measurement of message chains", "journal": "IEEE", "year": "2013", "authors": "D Bowes; D Randall; T Hall"}, {"ref_id": "b72", "title": "Feature interactions and software derivatives", "journal": "Journal of Object Technology", "year": "2004", "authors": "J Liu"}, {"ref_id": "b73", "title": "Improving the performance of a large scale spreadsheet: a case study", "journal": "IEEE", "year": "2016", "authors": "A Swidan; F Hermans; R Koesoemowidjojo"}, {"ref_id": "b74", "title": "Extracting properties from test cases by refactoring", "journal": "IEEE", "year": "2011", "authors": "H Li; S Thompson; T Arts"}, {"ref_id": "b75", "title": "Traits: A mechanism for fine-grained reuse", "journal": "ACM Transactions on Programming Languages and Systems (TOPLAS)", "year": "2006", "authors": "S Ducasse; O Nierstrasz; N Sch\u00e4rli; R Wuyts; A P Black"}, {"ref_id": "b76", "title": "Divide and conquer refactoring: dealing with the large, scattering or tangling use case model", "journal": "", "year": "2010", "authors": "R Ramos; J Castro; J Ara \u00dajo; F Alencar; R Penteado"}, {"ref_id": "b77", "title": "Gathering refactoring data: a comparison of four methods", "journal": "", "year": "2008", "authors": "E Murphy-Hill; A P Black; D Dig; C Parnin"}, {"ref_id": "b78", "title": "A structure-driven process of automated refactoring to design patterns", "journal": "Springer", "year": "2017", "authors": "A Derezi \u0143ska"}, {"ref_id": "b79", "title": "A testdriven approach for extracting libraries of reusable components from existing applications", "journal": "Springer", "year": "2011", "authors": "E Selim; Y Ghanam; C Burns; T Seyed; F Maurer"}, {"ref_id": "b80", "title": "Automated refactoring for stampedlock", "journal": "IEEE Access", "year": "2019", "authors": "Y Zhang; S Dong; X Zhang; H Liu; D Zhang"}, {"ref_id": "b81", "title": "Machine learningbased analysis of program binaries: A comprehensive study", "journal": "IEEE Access", "year": "2019", "authors": "H Xue; S Sun; G Venkataramani; T Lan"}, {"ref_id": "b82", "title": "Refactoring java programs for customizable locks based on bytecode transformation", "journal": "IEEE Access", "year": "2019", "authors": "Y Zhang; S Shao; H Liu; J Qiu; D Zhang; G Zhang"}, {"ref_id": "b83", "title": "Towards automatic parallelization of stream processing applications", "journal": "IEEE Access", "year": "2018", "authors": "M F Dolz; D D R Astorga; J Fern\u00e1ndez; J D Garc\u00eda; J Carretero"}, {"ref_id": "b84", "title": "A catalogue of model smells and refactoring operations for object-oriented software", "journal": "IEEE", "year": "2018", "authors": "B K Sidhu; K Singh; N Sharma"}, {"ref_id": "b85", "title": "A catalogue of refactorings to remove incomplete annotations", "journal": "J. UCS", "year": "2014", "authors": "F Medeiros; M Ribeiro; R Gheyi; B F Dos; Santos Neto"}, {"ref_id": "b86", "title": "A clustering method for pruning false positive of clonde code detection", "journal": "IEEE", "year": "2013", "authors": "P Ma; Y Bian; X Su"}, {"ref_id": "b87", "title": "A comparative analysis of monitoring concerns implementation in object oriented systems", "journal": "IEEE", "year": "2018", "authors": "G.-S Cojocar; A.-M Guran"}, {"ref_id": "b88", "title": "A comparative study of manual and automated refactorings", "journal": "Springer", "year": "2013", "authors": "S Negara; N Chen; M Vakilian; R E Johnson; D Dig"}, {"ref_id": "b89", "title": "A comparison of approaches to legacy system crosscutting concerns mining", "journal": "IEEE", "year": "2013", "authors": "T Chen; C He"}, {"ref_id": "b90", "title": "A semi-automated framework for the identification and estimation of architectural technical debt: A comparative case-study on the modularization of a software component", "journal": "Information and Software Technology", "year": "2018", "authors": "A Martini; E Sikander; N Madlani"}, {"ref_id": "b91", "title": "A semi-automatic approach for extracting software product lines", "journal": "IEEE Transactions on Software Engineering", "year": "2011", "authors": "M T Valente; V Borges; L Passos"}, {"ref_id": "b92", "title": "Adapting transformations to metamodel changes via external transformation composition", "journal": "Software & Systems Modeling", "year": "2014", "authors": "K Garc\u00e9s; J M Vara; F Jouault; E Marcos"}, {"ref_id": "b93", "title": "An approach to prioritize code smells for refactoring", "journal": "Automated Software Engineering", "year": "2016", "authors": "S A Vidal; C Marcos; J A D\u00edaz-Pace"}, {"ref_id": "b94", "title": "An expression processor: a case study in refactoring haskell programs", "journal": "Springer", "year": "2010", "authors": "C Brown; H Li; S Thompson"}, {"ref_id": "b95", "title": "An integrated crosscutting concern migration strategy and its semi-automated application to jhotdraw", "journal": "Automated Software Engineering", "year": "2009", "authors": "M Marin; A Van Deursen; L Moonen; R Van Der Rijst"}, {"ref_id": "b96", "title": "Aspect-oriented reengineering of an objectoriented library in a short iteration agile process", "journal": "Informatica", "year": "2011", "authors": "A O'riordan"}, {"ref_id": "b97", "title": "Assessing refactoring instances and the maintainability benefits of them from version archives", "journal": "Springer", "year": "2013", "authors": "K Fujiwara; K Fushida; N Yoshida; H Iida"}, {"ref_id": "b98", "title": "Automated refactoring of atl model transformations: a search-based approach", "journal": "", "year": "2016", "authors": "B Alkhazi; T Ruas; M Kessentini; M Wimmer; W I Grosky"}, {"ref_id": "b99", "title": "Automating feature model refactoring: A model transformation approach", "journal": "Information and Software Technology", "year": "2016", "authors": "M Tanhaei; J Habibi; S.-H Mirian-Hosseinabadi"}, {"ref_id": "b100", "title": "Less is more: From multi-objective to mono-objective refactoring via developer's knowledge extraction", "journal": "IEEE", "year": "2019", "authors": "V Alizadeh; H Fehri; M Kessentini"}, {"ref_id": "b101", "title": "Refbot: intelligent software refactoring bot", "journal": "IEEE", "year": "2019", "authors": "V Alizadeh; M A Ouali; M Kessentini; M Chater"}, {"ref_id": "b102", "title": "Multilingual source code analysis: A systematic literature review", "journal": "IEEE Access", "year": "2017", "authors": "Z Mushtaq; G Rasool; B Shehzad"}, {"ref_id": "b103", "title": "An automatic architecture reconstruction and refactoring framework", "journal": "Springer", "year": "2011", "authors": "F Schmidt; S G Macdonell; A M Connor"}, {"ref_id": "b104", "title": "An efficient framework for multi-dimensional tuning of high performance computing applications", "journal": "IEEE", "year": "2012", "authors": "G Cong; H Wen; I -H. Chung; D Klepacki; H Murata; Y Negishi"}, {"ref_id": "b105", "title": "An empirical study of supplementary patches in open source projects", "journal": "Empirical Software Engineering", "year": "2017", "authors": "J Park; M Kim; D.-H Bae"}, {"ref_id": "b106", "title": "An empirical study on similar changes in evolving software", "journal": "IEEE", "year": "2018", "authors": "T L Nguyen; A Fish; M Song"}, {"ref_id": "b107", "title": "An evaluation of clone detection techniques for crosscutting concerns", "journal": "IEEE", "year": "2004", "authors": "M Bruntink; A Van Deursen; T Tourwe; R Van Engelen"}, {"ref_id": "b108", "title": "An expert system for determining candidate software classes for refactoring", "journal": "Expert Systems with Applications", "year": "2009", "authors": "Y Kosker; B Turhan; A Bener"}, {"ref_id": "b109", "title": "An exploratory study on cooccurrence of design patterns and bad smells using software metrics", "journal": "Software: Practice and Experience", "year": "2019", "authors": "B L Sousa; M A Bigonha; K A Ferreira"}, {"ref_id": "b110", "title": "An instrumentation framework for the critical task of measurement collection in the future internet", "journal": "Computer Networks", "year": "2014", "authors": "O Mehani; G Jourjon; T Rakotoarivelo; M Ott"}, {"ref_id": "b111", "title": "A comprehensive approach to naming and accessibility in refactoring java programs", "journal": "IEEE Transactions on Software Engineering", "year": "2012", "authors": "M Sch\u00e4fer; A Thies; F Steimann; F Tip"}, {"ref_id": "b112", "title": "A practical tutorial on refactoring for parallelism", "journal": "IEEE", "year": "2010", "authors": "D Dig"}, {"ref_id": "b113", "title": "A source-level energy optimization framework for mobile applications", "journal": "IEEE", "year": "2016", "authors": "X Li; J P Gallagher"}, {"ref_id": "b114", "title": "engineering paper] a tool for optimizing java 8 stream software via automated refactoring", "journal": "IEEE", "year": "2018", "authors": "R Khatchadourian; Y Tang; M Bagherzadeh; S Ahmed"}, {"ref_id": "b115", "title": "Api-evolution support with diffcatchup", "journal": "IEEE Transactions on Software Engineering", "year": "2007", "authors": "Z Xing; E Stroulia"}, {"ref_id": "b116", "title": "A rigorous approach for proving model refactorings", "journal": "", "year": "2005", "authors": "R Gheyi; T Massoni; P Borba"}, {"ref_id": "b117", "title": "Adding parallelism to the hybrid image processing library in multi-threading and multi-core systems", "journal": "IEEE", "year": "2011", "authors": "B Cyganek"}, {"ref_id": "b118", "title": "An empirical evaluation of ant build maintenance using formiga", "journal": "IEEE", "year": "2015", "authors": "R Hardt; E V Munson"}, {"ref_id": "b119", "title": "A case study in refactoring a legacy component for reuse in a product line", "journal": "IEEE", "year": "2005", "authors": "R Kolb; D Muthig; T Patzke; K Yamauchi"}, {"ref_id": "b120", "title": "An extensible meta-model for program analysis", "journal": "IEEE Transactions on Software Engineering", "year": "2007", "authors": "D Strein; R Lincke; J Lundberg; W L \u00d6we"}, {"ref_id": "b121", "title": "Automated s/w reengineering for fault-tolerant and energy-efficient distributed execution", "journal": "IEEE", "year": "2013", "authors": "Y.-W Kwon"}, {"ref_id": "b122", "title": "Design recovery and maintenance of build systems", "journal": "IEEE", "year": "2007", "authors": "B Adams; H Tromp; K De Schutter; W De Meuter"}, {"ref_id": "b123", "title": "Evaluating architectural stability with real options theory", "journal": "IEEE", "year": "2004", "authors": "R Bahsoon; W Emmerich"}, {"ref_id": "b124", "title": "Experience report: refactoring the mesh interface in flash, a multiphysics software", "journal": "IEEE", "year": "2018", "authors": "J ; K Weide; A Dubey"}, {"ref_id": "b125", "title": "Meta-learning for realizing self-x management of future networks", "journal": "IEEE Access", "year": "2017", "authors": "M A Khan; H Tembine"}, {"ref_id": "b126", "title": "Program analysis and transformation for dataintensive system evolution", "journal": "IEEE", "year": "2010", "authors": "A Cleve"}, {"ref_id": "b127", "title": "Automated refactoring of object oriented code into aspects", "journal": "IEEE", "year": "2005", "authors": "D Binkley; M Ceccato; M Harman; F Ricca; P Tonella"}, {"ref_id": "b128", "title": "Extracting error handling to aspects: A cookbook", "journal": "IEEE", "year": "2007", "authors": "F Castor Filho; A Garcia; C M F Rubira"}, {"ref_id": "b129", "title": "Generating reusable web components from mockups", "journal": "", "year": "2018", "authors": "M Bajammal; D Mazinanian; A Mesbah"}, {"ref_id": "b130", "title": "Grammar recovery from parse trees and metrics-guided grammar refactoring", "journal": "IEEE Transactions on Software Engineering", "year": "2009", "authors": "N A Kraft; E B Duffy; B A Malloy"}, {"ref_id": "b131", "title": "Global analysis and transformations in preprocessed languages", "journal": "IEEE Transactions on Software Engineering", "year": "2003", "authors": "D Spinellis"}, {"ref_id": "b132", "title": "Refactoring in the presence of annotations", "journal": "IEEE", "year": "2012", "authors": "C Noguera; A Kellens; C De Roover; V Jonckers"}, {"ref_id": "b133", "title": "A method for identifying and recommending reconstructed clones", "journal": "Software Engineering and Service Sciences", "year": "2019", "authors": "S Rongrong; Z Liping; Z Fengrong"}, {"ref_id": "b134", "title": "A model transformation approach towards refactoring use case models based on antipatterns", "journal": "", "year": "2012", "authors": "Y Khan; M El-Attar"}, {"ref_id": "b135", "title": "A unit test approach for database schema evolution", "journal": "Information and Software Technology", "year": "2011", "authors": "K Grolinger; M A Capretz"}, {"ref_id": "b136", "title": "Aspide: Integrated development environment for answer set programming", "journal": "Springer", "year": "2011", "authors": "O Febbraro; K Reale; F Ricca"}, {"ref_id": "b137", "title": "Analyzing multiple configurations of a c program", "journal": "IEEE", "year": "2005", "authors": "A Garrido; R Johnson"}, {"ref_id": "b138", "title": "Automated refactoring of client-side javascript code to es6 modules", "journal": "IEEE", "year": "2018", "authors": "A Paltoglou; V E Zafeiris; E A Giakoumakis; N Diamantidis"}, {"ref_id": "b139", "title": "Automated refactoring of legacy java software to enumerated types", "journal": "IEEE", "year": "2007", "authors": "R Khatchadourian; J Sawin; A Rountev"}, {"ref_id": "b140", "title": "A classification of crosscutting concerns", "journal": "IEEE", "year": "2005", "authors": "M Marin; L Moonen; A Van Deursen"}, {"ref_id": "b141", "title": "Aspect-oriented refactoring of legacy applications: An evaluation", "journal": "IEEE Transactions on Software Engineering", "year": "2010", "authors": "M Mortensen; S Ghosh; J Bieman"}, {"ref_id": "b142", "title": "Automatic identification of important clones for refactoring and tracking", "journal": "IEEE", "year": "2014", "authors": "M Mondal; C K Roy; K A Schneider"}, {"ref_id": "b143", "title": "Experiences in modularizing business rules into aspects", "journal": "IEEE", "year": "2008", "authors": "A Kellens; K De Schutter; T D'hondt; V Jonckers; H Doggen"}, {"ref_id": "b144", "title": "Feature unweaving: Refactoring software requirements specifications into software product lines", "journal": "IEEE", "year": "2010", "authors": "R Stoiber; S Fricker; M Jehle; M Glinz"}, {"ref_id": "b145", "title": "Deepsim: deep learning code functional similarity", "journal": "", "year": "2018", "authors": "G Zhao; J Huang"}, {"ref_id": "b146", "title": "Object-oriented reengineering: patterns and techniques", "journal": "IEEE", "year": "2005", "authors": "S Demeyer; S Ducasse; O Nierstrasz"}, {"ref_id": "b147", "title": "Revealing the effect of coding practices on software maintainability", "journal": "IEEE", "year": "2013", "authors": "P Hegedus"}, {"ref_id": "b148", "title": "Software design improvement through anti-patterns identification", "journal": "IEEE", "year": "2004", "authors": "T Feng; J Zhang; H Wang; X Wang"}, {"ref_id": "b149", "title": "A coalgebraic semantic framework for reasoning about uml sequence diagrams", "journal": "IEEE", "year": "2008", "authors": "S Meng; L S Barbosa"}, {"ref_id": "b150", "title": "Cross-language code analysis and refactoring", "journal": "IEEE", "year": "2012", "authors": "P Mayer; A Schroeder"}, {"ref_id": "b151", "title": "A case study on the impact of refactoring on quality and productivity in an agile team", "journal": "Springer", "year": "2007", "authors": "R Moser; P Abrahamsson; W Pedrycz; A Sillitti; G Succi"}, {"ref_id": "b152", "title": "A microservice based architecture to support offloading in mobile cloud computing", "journal": "", "year": "2019", "authors": "A L C\u00e2ndido; F A Trinta; L S Rocha; P A Rego; N C Mendonc; V C Garcia"}, {"ref_id": "b153", "title": "A preliminary study of android refactorings", "journal": "IEEE", "year": "2019", "authors": "A Peruma"}, {"ref_id": "b154", "title": "A design pattern approach for restful tests: A case study", "journal": "", "year": "2018", "authors": "M Mascheroni; E "}, {"ref_id": "b155", "title": "A model of heterogeneous distributed system for foreign exchange portfolio analysis", "journal": "Journal of Information and Organizational Sciences", "year": "2006", "authors": "D Kermek; T Jakupi\u0107; N Vr\u010dek"}, {"ref_id": "b156", "title": "A visualization tool to detect refactoring opportunities in soa applications", "journal": "IEEE", "year": "2017", "authors": "G Rodriguez; A Teyseyre; \u00c1 Soria; L Berdun"}, {"ref_id": "b157", "title": "Automating property-based testing of evolving web services", "journal": "", "year": "2014", "authors": "H Li; S Thompson; P Lamela Seijas; M A Francisco"}, {"ref_id": "b158", "title": "Cohesion-driven decomposition of service interfaces without access to source code", "journal": "IEEE Transactions on Services Computing", "year": "2014", "authors": "D Athanasopoulos; A V Zarras; G Miskos; V Issarny; P Vassiliadis"}, {"ref_id": "b159", "title": "Detecting refactorings among multiple web service releases: A heuristic-based approach", "journal": "IEEE", "year": "2017", "authors": "M Kessentini; H Wang"}, {"ref_id": "b160", "title": "Discovering behavioural interfaces for overloaded web services", "journal": "IEEE", "year": "2015", "authors": "F Wei; C Ouyang; A Barros"}, {"ref_id": "b161", "title": "Energy efficient code optimization in mobile environment", "journal": "IEEE", "year": "2014", "authors": "K Fekete; A Pelle; K Csorba"}, {"ref_id": "b162", "title": "Genetic improvement of programs", "journal": "IEEE", "year": "2014", "authors": "W B Langdon"}, {"ref_id": "b163", "title": "Identification of web service refactoring opportunities as a multi-objective problem", "journal": "IEEE", "year": "2016", "authors": "H Wang; A Ouni; M Kessentini; B Maxim; W I Grosky"}, {"ref_id": "b164", "title": "An empirical study of refactoringchallenges and benefits at microsoft", "journal": "IEEE Transactions on Software Engineering", "year": "2014", "authors": "M Kim; T Zimmermann; N Nagappan"}, {"ref_id": "b165", "title": "Are all code smells harmful? a study of god classes and brain classes in the evolution of three open source systems", "journal": "IEEE", "year": "2010", "authors": "S M Olbrich; D S Cruzes; D I Sj\u00f8berg"}, {"ref_id": "b166", "title": "Automatic fine-grained issue report reclassification", "journal": "IEEE", "year": "2014", "authors": "P S Kochhar; F Thung; D Lo"}, {"ref_id": "b167", "title": "Dynamic adaptation of software component structures", "journal": "IEEE", "year": "2006", "authors": "G Bastide; A Seriai; M Oussalah"}, {"ref_id": "b168", "title": "Incremental and iterative reengineering towards software product line: An industrial case study", "journal": "IEEE", "year": "2011", "authors": "G Zhang; L Shen; X Peng; Z Xing; W Zhao"}, {"ref_id": "b169", "title": "Playing with refactoring: Identifying extract class opportunities through game theory", "journal": "IEEE", "year": "2010", "authors": "G Bavota; R Oliveto; A De Lucia; G Antoniol; Y.-G Gueheneuc"}, {"ref_id": "b170", "title": "Potential biases in bug localization: Do they matter?", "journal": "", "year": "2014", "authors": "P S Kochhar; Y Tian; D Lo"}, {"ref_id": "b171", "title": "Defaultification refactoring: A tool for automatically converting java methods to default", "journal": "IEEE", "year": "2017", "authors": "R Khatchadourian; H Masuhara"}, {"ref_id": "b172", "title": "Large-scale automated refactoring using clangmr", "journal": "IEEE", "year": "2013", "authors": "H K Wright; D Jasper; M Klimek; C Carruth; Z Wan"}, {"ref_id": "b173", "title": "Migrating cascading style sheets to preprocessors by introducing mixins", "journal": "", "year": "2016", "authors": "D Mazinanian; N Tsantalis"}, {"ref_id": "b174", "title": "Migrating interface implementations to aspects", "journal": "IEEE", "year": "2004", "authors": "P Tonella; M Ceccato"}, {"ref_id": "b175", "title": "Migrating object oriented code to aspect oriented programming", "journal": "", "year": "2006", "authors": "M Ceccato"}, {"ref_id": "b176", "title": "Migration from procedural programming to aspect oriented paradigm", "journal": "IEEE", "year": "2009", "authors": "D Majumdar"}, {"ref_id": "b177", "title": "Refactoring of a beef-cattle farm simulator", "journal": "IEEE Latin America Transactions", "year": "2011", "authors": "C Marcos; S Vidal; E Abait; M Arroqui; S Sampaoli"}, {"ref_id": "b178", "title": "Enumeration refactoring: a tool for automatically converting java constants to enumerated types", "journal": "", "year": "2010", "authors": "R Khatchadourian; B Muskalla"}, {"ref_id": "b179", "title": "Refactoring inspection support for manual refactoring edits", "journal": "IEEE Transactions on Software Engineering", "year": "2017", "authors": "E L Alves; M Song; T Massoni; P D Machado; M Kim"}, {"ref_id": "b180", "title": "Traceability for the maintenance of secure software", "journal": "IEEE", "year": "2008", "authors": "Y Yu; J Jurjens; J Mylopoulos"}, {"ref_id": "b181", "title": "Notice of violation of ieee publication principles a qualitative approach for refactoring of code clone opportunities using graph and tree methods", "journal": "IEEE", "year": "2016", "authors": "C Kulkarni"}, {"ref_id": "b182", "title": "Agile development of secure web-based applications", "journal": "International Journal of Information Technology and Web Engineering (IJITWE)", "year": "2006", "authors": "A F Tappenden; T Huynh; J Miller; A Geras; M Smith"}, {"ref_id": "b183", "title": "An abstract interpretation framework for refactoring with application to extract methods with contracts", "journal": "", "year": "2012", "authors": "P M Cousot; R Cousot; F Logozzo; M Barnett"}, {"ref_id": "b184", "title": "An introduction to software product line refactoring", "journal": "Springer", "year": "2009", "authors": "P Borba"}, {"ref_id": "b185", "title": "Application and relational database co-refactoring", "journal": "Computer Science and Information Systems", "year": "2014", "authors": "O Macek; K Richta"}, {"ref_id": "b186", "title": "Architecting and generalizing a safety case for critical condition detection software an experience report", "journal": "IEEE", "year": "2013", "authors": "M S Feather; L Z Markosian"}, {"ref_id": "b187", "title": "Intrepair: Informed repairing of integer overflows", "journal": "IEEE Transactions on Software Engineering", "year": "2019", "authors": "P Muntean; M Monperrus; H Sun; J Grossklags; C Eckert"}, {"ref_id": "b188", "title": "Refactor conditionals into polymorphism: what's the performance cost of introducing virtual calls?", "journal": "IEEE", "year": "2005", "authors": "S Demeyer"}, {"ref_id": "b189", "title": "Rejuvenating c++ programs through demacrofication", "journal": "IEEE", "year": "2012", "authors": "A Kumar; A Sutton; B Stroustrup"}, {"ref_id": "b190", "title": "The demacrofier", "journal": "IEEE", "year": "2012", "authors": ""}, {"ref_id": "b191", "title": "A meta-model for representing language-independent primary dependency structures", "journal": "ENASE", "year": "2012", "authors": "I Sora"}, {"ref_id": "b192", "title": "Analyzing and forecasting near-miss clones in evolving software: An empirical study", "journal": "IEEE", "year": "2011", "authors": "M F Zibran; R K Saha; M Asaduzzaman; C K Roy"}, {"ref_id": "b193", "title": "Automating repetitive code changes using examples", "journal": "", "year": "2016", "authors": "R Rolim"}, {"ref_id": "b194", "title": "Clone detection via structural abstraction", "journal": "Software Quality Journal", "year": "2009", "authors": "W S Evans; C W Fraser; F Ma"}, {"ref_id": "b195", "title": "Cloning in popular server side technologies using agile development: An empirical study", "journal": "Pakistan Journal of Engineering and Applied Sciences", "year": "2018", "authors": "A Khan; H A Basit; S M Sarwar; M M Yousaf"}, {"ref_id": "b196", "title": "Criticality of defects in cyclic dependent components", "journal": "IEEE", "year": "2013", "authors": "T D Oyetoyan; R Conradi; D S Cruzes"}, {"ref_id": "b197", "title": "Empirical support for two refactoring studies using commercial c# software", "journal": "", "year": "2009", "authors": "M Gatrell; S Counsell; T Hall"}, {"ref_id": "b198", "title": "Evaluating code clone genealogies at release level: An empirical study", "journal": "IEEE", "year": "2010", "authors": "R K Saha; M Asaduzzaman; M F Zibran; C K Roy; K A Schneider"}, {"ref_id": "b199", "title": "Evaluation of design pattern utilization and software metrics in c# programs", "journal": "Springer", "year": "2019", "authors": "A Derezi; M Byczkowski"}, {"ref_id": "b200", "title": "A language and framework for invariant-driven transformations", "journal": "ACM Sigplan Notices", "year": "2009", "authors": "Y A Liu; M Gorbovitski; S D Stoller"}, {"ref_id": "b201", "title": "Adapting bioinformatics applications for heterogeneous systems: a case study", "journal": "Concurrency and Computation: Practice and Experience", "year": "2014", "authors": "I Lanc; P Bui; D Thain; S Emrich"}, {"ref_id": "b202", "title": "Declarative specification of indentation rules: a tooling perspective on parsing and pretty-printing layout-sensitive languages", "journal": "", "year": "2018", "authors": "L E D S Amorim; M J Steindorfer; S Erdweg; E Visser"}, {"ref_id": "b203", "title": "Detecting code smells in python programs", "journal": "IEEE", "year": "2016", "authors": "Z Chen; L Chen; W Ma; B Xu"}, {"ref_id": "b204", "title": "Exploring regular expression usage and context in python", "journal": "", "year": "2016", "authors": "C Chapman; K T Stolee"}, {"ref_id": "b205", "title": "From fats to feets: Further improvements to an astronomical feature extraction tool based on machine learning", "journal": "Astronomy and computing", "year": "2018", "authors": "J B Cabral; B S\u00e1nchez; F Ramos; S Gurovich; P M Granitto; J Vanderplas"}, {"ref_id": "b206", "title": "Openseespy: Python library for the opensees finite element framework", "journal": "SoftwareX", "year": "2018", "authors": "M Zhu; F Mckenna; M H Scott"}, {"ref_id": "b207", "title": "Profile-guided static typing for dynamic scripting languages", "journal": "", "year": "2009", "authors": "M Furr; J -H. An; J S Foster"}, {"ref_id": "b208", "title": "Python for development of openmp and cuda kernels for multidimensional data", "journal": "", "year": "2011", "authors": "Z W Bell; G G Davidson; T M D'azevedo; W Joubert; J K Munro; D R Patlolla; B Vacaliuc"}, {"ref_id": "b209", "title": "Re-factoring based program repair applied to programming assignments", "journal": "IEEE", "year": "2019", "authors": "Y Hu; U Z Ahmed; S Mechtaev; B Leong; A Roychoudhury"}, {"ref_id": "b210", "title": "A platform-specific code smell alert system for high performance computing applications", "journal": "IEEE", "year": "2014", "authors": "C Wang; S Hirasawa; H Takizawa; H Kobayashi"}, {"ref_id": "b211", "title": "A learning-based method for detecting defective classes in object-oriented systems", "journal": "IEEE", "year": "2015", "authors": "C \u00b8 Biray; F Buzluca"}, {"ref_id": "b212", "title": "An analysis of complex industrial test code using clone analysis", "journal": "IEEE", "year": "2018", "authors": "W Hasanain; Y Labiche; S Eldh"}, {"ref_id": "b213", "title": "An empirical study on the use of css preprocessors", "journal": "IEEE", "year": "2016", "authors": "D Mazinanian; N Tsantalis"}, {"ref_id": "b214", "title": "Cssdev: refactoring duplication in cascading style sheets", "journal": "IEEE", "year": "2017", "authors": ""}, {"ref_id": "b215", "title": "Discovering refactoring opportunities in cascading style sheets", "journal": "", "year": "2014", "authors": "D Mazinanian; N Tsantalis; A Mesbah"}, {"ref_id": "b216", "title": "Generating predicate callback summaries for the android framework", "journal": "IEEE", "year": "2017", "authors": "D D Perez; W Le"}, {"ref_id": "b217", "title": "Is it dangerous to use version control histories to study source code evolution?", "journal": "Springer", "year": "2012", "authors": "S Negara; M Vakilian; N Chen; R E Johnson; D Dig"}, {"ref_id": "b218", "title": "Reasoning with style", "journal": "", "year": "2015", "authors": "M Bosch; P Genev\u00e8s; N Laya\u00efda"}, {"ref_id": "b219", "title": "Output-oriented refactoring in php-based dynamic web applications", "journal": "IEEE", "year": "2013", "authors": "H A Nguyen; H V Nguyen; T T Nguyen; T N Nguyen"}, {"ref_id": "b220", "title": "An industrial experience report on performance-aware refactoring on a databasecentric web application", "journal": "IEEE", "year": "2019", "authors": "B Chen; Z M Jiang; P Matos; M Lacaria"}, {"ref_id": "b221", "title": "Are php applications ready for hack?", "journal": "IEEE", "year": "2015", "authors": "L Eshkevari; F Santos; J R Cordy; G Antoniol"}, {"ref_id": "b222", "title": "Differential precondition checking: A lightweight, reusable analysis for refactoring tools", "journal": "IEEE", "year": "2011", "authors": "J L Overbey; R E Johnson"}, {"ref_id": "b223", "title": "Differential precondition checking: a language-independent, reusable analysis for refactoring engines", "journal": "Automated Software Engineering", "year": "2016", "authors": "J L Overbey; R E Johnson; M Hafiz"}, {"ref_id": "b224", "title": "Enabling php software engineering research in rascal", "journal": "Science of Computer Programming", "year": "2017", "authors": "M Hills; P Klint; J J Vinju"}, {"ref_id": "b225", "title": "Extraction and comprehension of moodle's access control model: A case study", "journal": "IEEE", "year": "2011", "authors": "F Gauthier; D Letarte; T Lavoie; E Merlo"}, {"ref_id": "b226", "title": "Php air: Analyzing php systems with rascal", "journal": "IEEE", "year": "2014", "authors": "M Hills; P Klint"}, {"ref_id": "b227", "title": "Reverse engineering goal models from legacy code", "journal": "IEEE", "year": "2005", "authors": "Y Yu; Y Wang; J Mylopoulos; S Liaskos; A Lapouchnian; J C S Do Prado Leite"}, {"ref_id": "b228", "title": "A strafunski application letter", "journal": "Springer", "year": "2003", "authors": "R L\u00e4mmel; J Visser"}, {"ref_id": "b229", "title": "A desiderata for refactoring-based software modularity improvement", "journal": "", "year": "2010", "authors": "G M Rama"}, {"ref_id": "b230", "title": "A survey of software refactoring", "journal": "IEEE Transactions on software engineering", "year": "2004", "authors": "T Mens; T Tourw\u00e9"}, {"ref_id": "b231", "title": "Fine slicing", "journal": "Springer", "year": "2012", "authors": "A Abadi; R Ettinger; Y A Feldman"}, {"ref_id": "b232", "title": "Detection of code clones in software generators", "journal": "", "year": "2014", "authors": "M Lillack; C Bucholdt; D Schilling"}, {"ref_id": "b233", "title": "Migrating as400-cobol to java: a report from the field", "journal": "IEEE", "year": "2013", "authors": "H M Sneed; K Erdoes"}, {"ref_id": "b234", "title": "Modernization case study: Italian ministry of instruction, university, and research", "journal": "Elsevier", "year": "2010", "authors": "M K Smith; T Laszewski"}, {"ref_id": "b235", "title": "Removing code clones from industrial systems using compiler directives", "journal": "IEEE", "year": "2017", "authors": "T Hatano; A Matsuo"}, {"ref_id": "b236", "title": "Detection and handling of model smells for matlab/simulink models", "journal": "", "year": "2015", "authors": "T Gerlitz; Q M Tran; C Dziobek"}, {"ref_id": "b237", "title": "Estimation of torques transmitted by twin-clutch of dry dual-clutch transmission during vehicle's launching process", "journal": "IEEE Transactions on Vehicular Technology", "year": "2016", "authors": "Z Zhao; X Li; L He; C Wu; J K Hedrick"}, {"ref_id": "b238", "title": "Lossy image compression using svd coding algorithm", "journal": "IEEE", "year": "2016", "authors": "K Aishwarya; R Ramesh; P M Sobarad; V Singh"}, {"ref_id": "b239", "title": "Proving correctness of refactorings for hybrid simulink models with control flow", "journal": "Springer", "year": "2016", "authors": "S Schlesinger; P Herber; T ; S Glesner"}, {"ref_id": "b240", "title": "Simulation of a model for refactoring approach for parallelism using parallel computing tool box", "journal": "Springer", "year": "2016", "authors": "S Makka; B Sagar"}, {"ref_id": "b241", "title": "Software engineering practices and simulink: bridging the gap", "journal": "International Journal on Software Tools for Technology Transfer", "year": "2018", "authors": "V Pantelic; S Postma; M Lawford; M Jaskolka; B Mackenzie; A Korobkine; M Bender; J Ong; G Marks; A Wassyng"}, {"ref_id": "b242", "title": "The research on fault restoration and refactoring for active distribution network", "journal": "IEEE", "year": "2019", "authors": "H Zhu; Y Yu; W Qi; S Liu; Y Weng; T Yuan; H Li"}, {"ref_id": "b243", "title": "Using high performance algorithms for the hybrid simulation of disease dynamics on cpu and gpu", "journal": "", "year": "2015", "authors": "V N Leonenko; N V Pertsev; M Artzrouni"}, {"ref_id": "b244", "title": "A metamodel for language-independent refactoring", "journal": "IEEE", "year": "2000", "authors": "S Tichelaar; S Ducasse; S Demeyer; O Nierstrasz"}, {"ref_id": "b245", "title": "Beyond the refactoring browser: Advanced tool support for software refactoring", "journal": "", "year": "2003", "authors": "T M T T F Munoz"}, {"ref_id": "b246", "title": "Challenges of refactoring c programs", "journal": "", "year": "2002", "authors": "A Garrido; R Johnson"}, {"ref_id": "b247", "title": "Delving source code with formal concept analysis", "journal": "Computer Languages, Systems & Structures", "year": "2005", "authors": "K Mens; T Tourw\u00e9"}, {"ref_id": "b248", "title": "Drag-and-drop refactoring: intuitive and efficient program transformation", "journal": "IEEE", "year": "2013", "authors": "Y Y Lee; N Chen; R E Johnson"}, {"ref_id": "b249", "title": "Experiments with pro-active declarative meta-programming", "journal": "", "year": "2009", "authors": "V U ; A Kellens; K Gybels; T D Hondt"}, {"ref_id": "b250", "title": "Improving refactoring tools in smalltalk using static type inference", "journal": "Science of Computer Programming", "year": "2014", "authors": "M Unterholzner"}, {"ref_id": "b251", "title": "Mudpie: layers in the ball of mud", "journal": "Computer Languages, Systems & Structures", "year": "2004", "authors": "D Vainsencher"}, {"ref_id": "b252", "title": "On the use of type predicates in object-oriented software: The case of smalltalk", "journal": "", "year": "2014", "authors": "O Calla; R Robbes; \u00c9 Tanter; D ; A Bergel"}, {"ref_id": "b253", "title": "Preserving instance state during refactorings in live environments", "journal": "Future Generation Computer Systems", "year": "2020", "authors": "P Tesone; G Polito; L Fabresse; N Bouraqadi; S Ducasse"}, {"ref_id": "b254", "title": "Adaptation of refactoring strategies to multiple axes of modularity: characteristics and criteria", "journal": "IEEE", "year": "2008", "authors": "V Arnaoudova; C Constantinides"}, {"ref_id": "b255", "title": "Refactorings for replacing dynamic instructions with static ones: the case of ruby", "journal": "", "year": "2018", "authors": "E Rodrigues; R S Durelli; R W De Bettio; L Montecchi; R Terra"}, {"ref_id": "b256", "title": "Retaining comments when refactoring code", "journal": "", "year": "2008", "authors": "P Sommerlad; G Zgraggen; T Corbat; L Felber"}, {"ref_id": "b257", "title": "Ruby refactoring plug-in for eclipse", "journal": "", "year": "2007", "authors": "T Corbat; L Felber; M Stocker; P Sommerlad"}, {"ref_id": "b258", "title": "A selenium based approach to automatic test script generation for refactoring javascript code", "journal": "IEEE", "year": "2013", "authors": "R Chen; H Miao"}, {"ref_id": "b259", "title": "Babelref: detection and renaming tool for cross-language program entities in dynamic web applications", "journal": "IEEE", "year": "2012", "authors": "H V Nguyen; H A Nguyen; T T Nguyen; T N Nguyen"}, {"ref_id": "b260", "title": "D-goldilocks: Automatic redistribution of remote functionalities for performance and efficiency", "journal": "IEEE", "year": "2020", "authors": "K An; E Tilevich"}, {"ref_id": "b261", "title": "Identification and refactoring of exception handling code smells in javascript", "journal": "Journal of Internet Technology", "year": "2017", "authors": "C.-Y Hsieh; C Le My; K T Ho; Y C Cheng"}, {"ref_id": "b262", "title": "Identifying utility functions in java and javascript", "journal": "IEEE", "year": "2016", "authors": "T Mendes; M T Valente; A Hora"}, {"ref_id": "b263", "title": "Implementing a performant scheme interpreter for the web in asm", "journal": "Computer Languages, Systems & Structures", "year": "2017", "authors": "N Van Es; Q Stievenart; J Nicolay; T D'hondt; C De Roover"}, {"ref_id": "b264", "title": "Jitprof: pinpointing jitunfriendly javascript code", "journal": "", "year": "2015", "authors": "L Gong; M Pradel; K Sen"}, {"ref_id": "b265", "title": "Jsnose: Detecting javascript code smells", "journal": "IEEE", "year": "2013", "authors": "A M Fard; A Mesbah"}, {"ref_id": "b266", "title": "Macrofication: Refactoring by reverse macro expansion", "journal": "Springer", "year": "2016", "authors": "C Schuster; T Disney; C Flanagan"}, {"ref_id": "b267", "title": "Moving target defense against cross-site scripting attacks (position paper)", "journal": "Springer", "year": "2014", "authors": "J Portner; J Kerr; B Chu"}, {"ref_id": "b268", "title": "Real-time context-aware microservice architecture for predictive analytics and smart decision-making", "journal": "IEEE Access", "year": "2019", "authors": "G Ortiz; J A Caravaca; A Garc\u00eda-De Prado; J Boubeta-Puig"}, {"ref_id": "b269", "title": "A heuristic-based approach to refactor crosscutting behaviors in uml state machines", "journal": "IEEE", "year": "2014", "authors": "M U Khan; M Z Iqbal; S Ali"}, {"ref_id": "b270", "title": "A lightweight remodularization process based on structural similarity", "journal": "IEEE", "year": "2016", "authors": "R Terra; M T Valente; N Anquetil"}, {"ref_id": "b271", "title": "A methodology for the simplification of tabular designs in model-based development", "journal": "IEEE", "year": "2015", "authors": "M Bialy; M Lawford; V Pantelic; A Wassyng"}, {"ref_id": "b272", "title": "A posteriori operation detection in evolving software models", "journal": "Journal of Systems and Software", "year": "2013", "authors": "P Langer; M Wimmer; P Brosch; M Herrmannsd \u00d6rfer; M Seidl; K Wieland; G Kappel"}, {"ref_id": "b273", "title": "Birds on the wall: Distributing a process-oriented simulation", "journal": "IEEE", "year": "2009", "authors": "A T Sampson; J M Bjorndalen; P S Andrews"}, {"ref_id": "b274", "title": "Automatic software refactoring via weighted clustering in method-level networks", "journal": "IEEE Transactions on Software Engineering", "year": "2017", "authors": "Y Wang; H Yu; Z Zhu; W Zhang; Y Zhao"}, {"ref_id": "b275", "title": "More: A multi-objective refactoring recommendation approach to introducing design patterns and fixing code smells", "journal": "Journal of Software: Evolution and Process", "year": "2017", "authors": "A Ouni; M Kessentini; M Cinn\u00e9ide; H Sahraoui; K Deb; K Inoue"}, {"ref_id": "b276", "title": "Bi-level identification of web service defects", "journal": "Springer", "year": "2016", "authors": "H Wang; M Kessentini; A Ouni"}, {"ref_id": "b277", "title": "On the use of design defect examples to detect model refactoring opportunities", "journal": "Software Quality Journal", "year": "2016", "authors": "A Ghannem; G El Boussaidi; M Kessentini"}, {"ref_id": "b278", "title": "On the use of machine learning and search-based software engineering for ill-defined fitness function: a case study on software refactoring", "journal": "Springer", "year": "2014", "authors": "B Amal; M Kessentini; S Bechikh; J Dea; L B Said"}, {"ref_id": "b279", "title": "Search-based metamodel matching with structural and syntactic measures", "journal": "Journal of Systems and Software", "year": "2014", "authors": "M Kessentini; A Ouni; P Langer; M Wimmer; S Bechikh"}, {"ref_id": "b280", "title": "What you like in design use to correct bad-smells", "journal": "Software Quality Journal", "year": "2013", "authors": "M Kessentini; R Mahaouachi; K Ghedira"}, {"ref_id": "b281", "title": "Detecting model refactoring opportunities using heuristic search", "journal": "", "year": "2011", "authors": "A Ghannem; M Kessentini; G El Boussaidi"}, {"ref_id": "b282", "title": "Competitive coevolutionary code-smells detection", "journal": "Springer", "year": "2013", "authors": "M Boussaa; W Kessentini; M Kessentini; S Bechikh; S B Chikha"}, {"ref_id": "b283", "title": "A comparison of some soft computing methods for software fault prediction", "journal": "Expert systems with applications", "year": "2015", "authors": "E Erturk; E A Sezer"}, {"ref_id": "b284", "title": "A practical guide to support change-proneness prediction", "journal": "", "year": "2019", "authors": "C S Melo; M M L Da Cruz; A D F Martins; T Matos; J M Da Silva Monteiro Filho; J De Castro;  Machado"}, {"ref_id": "b285", "title": "Application of smote and lssvm with various kernels for predicting refactoring at method level", "journal": "Springer", "year": "2018", "authors": "L Kumar; S M Satapathy; A Krishna"}, {"ref_id": "b286", "title": "Automatic method completion", "journal": "IEEE", "year": "2004", "authors": "R Hill; J Rideout"}, {"ref_id": "b287", "title": "Automatic query reformulations for text retrieval in software engineering", "journal": "IEEE", "year": "2013", "authors": "S Haiduc; G Bavota; A Marcus; R Oliveto; A De Lucia; T Menzies"}, {"ref_id": "b288", "title": "Bug prediction model using code smells", "journal": "IEEE", "year": "2018", "authors": "G M Ubayawardana; D D Karunaratna"}, {"ref_id": "b289", "title": "A combine usability framework for imcat evaluation", "journal": "IEEE", "year": "2014", "authors": "Z Aliyu; L A Rahim; E E Mustapha"}, {"ref_id": "b290", "title": "Formal extreme (and extremely formal) programming", "journal": "Springer", "year": "2003", "authors": "A Herranz; J J Moreno-Navarro"}, {"ref_id": "b291", "title": "Formal use of design patterns and refactoring", "journal": "Springer", "year": "2008", "authors": "L Quan; Q Zongyan; Z Liu"}, {"ref_id": "b292", "title": "Graph based model transformation verification using mapping patterns and graph comparison algorithm", "journal": "International Journal of Advancements in Computing Technology", "year": "2012", "authors": "J W Ko; Y J Song"}, {"ref_id": "b293", "title": "Model evolution and refinement", "journal": "Science of Computer Programming", "year": "2012", "authors": "T Ruhroth; H Wehrheim"}, {"ref_id": "b294", "title": "Patterns to guide practical refactoring: examples targetting promotion in z", "journal": "Springer", "year": "2003", "authors": "S Stepney; F Polack; I Toyn"}, {"ref_id": "b295", "title": "Refactoring uml models: using openarchitectureware to measure uml model quality and perform pattern matching on uml models with ocl queries", "journal": "", "year": "2009", "authors": "T V Enckevort"}, {"ref_id": "b296", "title": "On fuzzy repetitions detection in documentation reuse", "journal": "Programming and Computer Software", "year": "2016", "authors": "D Luciv; D Koznov; H A Basit; A N Terekhov"}, {"ref_id": "b297", "title": "Performance-based software model refactoring in fuzzy contexts", "journal": "Springer", "year": "2015", "authors": "D Arcelli; V Cortellessa; C Trubiani"}, {"ref_id": "b298", "title": "Adfl: An improved algorithm for american fuzzy lop in fuzz testing", "journal": "Springer", "year": "2018", "authors": "C Wang; S Kang"}, {"ref_id": "b299", "title": "An approach for source code classification using software metrics and fuzzy logic to improve code quality with refactoring techniques", "journal": "Springer", "year": "2011", "authors": "P Lerthathairat; N Prompoon"}, {"ref_id": "b300", "title": "Code evaluation using fuzzy logic", "journal": "WSEAS)", "year": "2008", "authors": "Z Avdagic; D Boskovic; A Delic"}, {"ref_id": "b301", "title": "Deep learning based code smell detection", "journal": "IEEE Transactions on Software Engineering", "year": "2019", "authors": "H Liu; J Jin; Z Xu; Y Bu; Y Zou; L Zhang"}, {"ref_id": "b302", "title": "What motivate software engineers to refactor source code? evidences from professional developers", "journal": "IEEE", "year": "2009", "authors": "Y Wang"}, {"ref_id": "b303", "title": "Kobold: web usability as a service", "journal": "IEEE", "year": "2017", "authors": "J Grigera; A Garrido; G Rossi"}, {"ref_id": "b304", "title": "Recommendation system for software refactoring using innovization and interactive dynamic optimization", "journal": "", "year": "2014", "authors": "M W Mkaouer; M Kessentini; S Bechikh; K Deb; M \u00d3 Cinn\u00e9ide"}, {"ref_id": "b305", "title": "Reducing interactive refactoring effort via clustering-based multi-objective search", "journal": "", "year": "2018", "authors": "V Alizadeh; M Kessentini"}], "figures": [{"figure_label": "", "figure_type": "figure", "figure_id": "fig_0", "figure_caption": "is a histogram showing how many publications were issued each year starting from 1990. The number of published journal articles, conference papers, and books has increased dramatically during the last decade, reaching a pick of 265 publications in 2016. During just the last four years (2016-2019), over 1026 papers were published in the field, with an average of 256 papers each year.", "figure_data": ""}, {"figure_label": "1", "figure_type": "figure", "figure_id": "fig_1", "figure_caption": "Fig. 1 .1Fig. 1. Distribution of refactoring publications around the world.", "figure_data": ""}, {"figure_label": "2", "figure_type": "figure", "figure_id": "fig_2", "figure_caption": "Fig. 2 .2Fig. 2. Number of publications in the top 10 most active countries in the refactoring field", "figure_data": ""}, {"figure_label": "3", "figure_type": "figure", "figure_id": "fig_3", "figure_caption": "Fig. 3 .3Fig. 3. Top 10 Authors with the highest number of publications and citations in the field of refactoring", "figure_data": ""}, {"figure_label": "4", "figure_type": "figure", "figure_id": "fig_4", "figure_caption": "Fig. 4 .4Fig. 4. Evolution of the Top 10 Authors during the past 10 years", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_5", "figure_caption": "\u2022Digital libraries: ACM Library, IEEE Xplore, Science-Direct, SpringerLink. \u2022 Citation databases: Web of Science (formerly ISI Web of Knowledge), Scopus. \u2022 Citation search engines: DBLP, Google Scholar.", "figure_data": ""}, {"figure_label": "7", "figure_type": "figure", "figure_id": "fig_6", "figure_caption": "Fig. 7 .7Fig. 7. Top institutions active in the refactoring field", "figure_data": ""}, {"figure_label": "9", "figure_type": "figure", "figure_id": "fig_7", "figure_caption": "Fig. 9 .9Fig. 9. A screenshot of the publications tab of the refactoring repository Website", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_8", "figure_caption": "Fig. 11. A screenshot of the refactoring repository dashboard that shows the authors, their h-index and total number of publications and citations", "figure_data": ""}, {"figure_label": "12", "figure_type": "figure", "figure_id": "fig_9", "figure_caption": "Fig. 12 .12Fig. 12. A screenshot of the authors network graph from the refactoring repository website", "figure_data": ""}, {"figure_label": "13", "figure_type": "figure", "figure_id": "fig_10", "figure_caption": "Fig. 13 .13Fig. 13. Histogram illustrating the percentage of refactoring publications per refactoring life-cycle", "figure_data": ""}, {"figure_label": "15", "figure_type": "figure", "figure_id": "fig_11", "figure_caption": "Fig. 15 .15Fig. 15. histogram illustrating the count of refactoring publications per artifact", "figure_data": ""}, {"figure_label": "16", "figure_type": "figure", "figure_id": "fig_12", "figure_caption": "Fig. 16 .16Fig. 16. Histogram illustrating the count of refactoring publications per paradigm", "figure_data": ""}, {"figure_label": "18", "figure_type": "figure", "figure_id": "fig_13", "figure_caption": "Fig. 18 .18Fig. 18. histogram illustrating the count of refactoring publications per programming language", "figure_data": ""}, {"figure_label": "1", "figure_type": "table", "figure_id": "tab_1", "figure_caption": "list of search strings search strings (software OR system OR code OR service OR diagram OR database OR architecture OR Model OR GUI OR user interface OR UI OR design OR artifact OR developer OR computer OR programming OR object-oriented OR implement OR mobile app OR cloud OR document ) AND (refactor OR refactoring)", "figure_data": ""}, {"figure_label": "2", "figure_type": "table", "figure_id": "tab_2", "figure_caption": "", "figure_data": "PS quality assessment questions [17]QuestionAre the applied identification techniques for refactoring opportunities clearly described?DesignAre the refactoring activities considered clearly stated and defined? Was the sample size justified?Are the evaluation measures fully defined?ConductAre the data collection methods adequately described?Are the results of applying the identification techniques evaluated?Are the data sets adequately described? (size, programming languages, source)Are the study participants or observational units adequately described?AnalysisAre the statistical methods described?Are the statistical methods justified?Is the purpose of the analysis clear?Are the scoring systems (performance evaluation) described?Are all study questions answered?Are negative findings presented?ConclusionAre the results compared with previous reports?Do the results add to the literature?Are validity threats discussed?TABLE 3List of countries and their replacementsCountryReplacementRepublic of ChinaChinaUSAUnited StatesEngland, Scotland and WalesEnglandU Arab EmiratesUnited Arab EmiratesRussiaRussian FederationViet NamVietnamTrinid & TobagoTrinidad and Tobago"}, {"figure_label": "4", "figure_type": "table", "figure_id": "tab_3", "figure_caption": "List of keywords used to detect the different categories", "figure_data": "CategoryKeywordsRefactoring life-cycle (RQ1)Detectiondetect, opportunity, smell, antipattern, design defectPrioritizationschedul, sequence, prioritRecommendationrecommend, correction, correcting, fixing, suggestTestingtest, regression testing, test case, unit testDocumentationdocumentPredictionpredict, future release, next release, development history, refactoring historyLevel of automation (RQ1)ManualmanualSemi-automaticsemi-automat, semi-manualAutomaticautomatArtifact (RQ2)Codecode, java, object orient, smell, antipattern, anti-pattern, object-orientModeldesign, model, UML, diagram, Unified Modeling LanguageArchitecturearchitecture, hotspot, hierarchyGUIgui, user interface, UIDatabaserelational, schema, database, Structured Query Language, SQLParadigm (RQ3)Object-oriented designobject orient, object-orient, oo, java, c, ++, python, C sharp, c#, css, Python, R, PHP, JavaScript, Ruby,Perl, Object Pascal, Objective-C, Dart, Swift, Scala, Kotlin, Common Lisp, MATLAB, SmalltalkAspect-oriented designaspectModel-driven engineeringmodel transform, uml, reverse engineering, diagram, Unified Modeling LanguageDocumentationdocumentMobile developmentandroid, mobile, IOS, phone, smartphone, cellphonesCould computingAmazon EC2, Amazon Simple Storage Service, S3Refactoring Objectives (RQ3)Internal Qualitymaintainability, cyclomatic, depth of inheritance, coupling, quality, Flexibility, Portability, Re-usability,Readability, Testability, UnderstandabilityPerformanceperformance, parallel, Response Time, Error Rates, Request Rate, availabilityExternal qualityanalysability, changeability, time behaviour, resource, Correctness, Usability, Efficiency, Reliability,Integrity, Adaptability, Accuracy, RobustnessMigrationmigratSecuritysecure, safety, Attack surface, virus, hack, vulnerability, vulnerable, spamProgramming languages (RQ4)JavajavaCc, c++C#c sharp, c#PythonpythonCSScssPHPphpCobolcobolScalascalaJavascriptjavascriptRubyrubySmalltalksmalltalkMATLABmatlabAdopted methods (RQ4)Search-based algorithmssearch, search-base, sbse, genetic, fitness, simulated annealing, tabu search, search space, Hill climbing,Multi-objective evolutionary algorithms, multi objective optimization, multi-objective programming,vector optimization, multi-criteria optimization, multi-attribute optimization, Pareto optimization,Evolutionary Multi-objective Optimization, EMO, Single-Objective Optimization, Many-ObjectiveOptimization, multi objectiveData miningartificial intelligence, ai , machine learning, naive bayes, decision tree, SVM, support vector machine,Cluster, Classification, classify, Association, Neural networks, deep learning, random forest, regression,reinforcement learning, learningFormal methodsmodel check, formal method, B-Method, RAISE, Z notation, SPARK AdaFuzzy logicfuzzyEvaluation method (RQ5)Open sourceopen source, open-sourceIndustrialproprietary, industrial, industry, collaborator, collaboration"}, {"figure_label": "5", "figure_type": "table", "figure_id": "tab_4", "figure_caption": "Representative references for all categories", "figure_data": "CategoryPercentagePapersRefactoring life-cycle (RQ1)Detection28.65%"}], "formulas": [{"formula_id": "formula_0", "formula_text": "[S1], [S2], [S3], [S4], [S5], [S6], [S7], [S8], [S9], [S10] Prioritization 9.43% [S11], [S12], [S13], [S14], [S15], [S16], [S17], [S18], [S19], [S20] Recommendation 16.18% [S3], [S11], [S12], [S21], [S22], [S23], [S24], [S25], [S26], [S27] Testing 18.44% [S4], [S6], [S7], [S8], [S13], [S28], [S29], [S30], [S31], [S32] Documention 5.22% [S33], [S34], [S35], [S36], [S37], [S38], [S39], [S40], [S41], [S42], [S43] Prediction 4.818% [S44], [S45], [S46], [S47], [S48], [S49], [S50], [S51], [S52], [S53] Level of automation (RQ1) Automatic 30.95% [S54], [S55], [S56], [S57], [S58], [S59], [S60], [S61], [S62], [S63] Semi-automatic 1.95% [S64], [S65], [S66], [S67], [S68], [S69], [S70], [S71], [S72], [S73], [S74], [S75] Manual 8.67% [S69], [S76], [S77], [S78], [S79], [S80], [S81], [S82], [S83], [S84] Artifact (RQ2) Code 72.89% [S1], [S2], [S3], [S11], [S65], [S85], [S86], [S87], [S88], [S89] Model 59.25% [S1], [S3], [S28], [S29], [S65], [S87], [S89], [S90], [S91], [S92] Architecture 17.25% [S28], [S91], [S93], [S94], [S95], [S96], [S97], [S98], [S99], [S100] GUI 2.58% [S6], [S8], [S28], [S87], [S89], [S90], [S101], [S102], [S103], [S104] Database 4.12% [S27], [S36], [S65], [S100], [S105], [S106], [S107], [S108], [S109], [S110] Paradigm (RQ3) Object-oriented design 34.09% [S1], [S8], [S30], [S85], [S87], [S88], [S101], [S111], [S112], [S113] Aspect-oriented 10.87% [S88], [S96], [S101], [S102], [S103], [S114], [S115], [S116], [S117], [S118] Model-driven engineering 7.35% [S3], [S15], [S32], [S58], [S65], [S119], [S120], [S121], [S122], [S123] Mobile apps development 3.55% [S23], [S87], [S87], [S95], [S99], [S112], [S124], [S125], [S126], [S127] Could computing 4.15% [S128], [S129], [S130], [S131], [S132], [S133], [S134], [S135], [S136], [S137] Refactoring Objective (RQ3) Internal Quality 41.63% [S3], [S12], [S21], [S29], [S30], [S89], [S90], [S94], [S138], [S139] Performance 15.93% [S10], [S12], [S28], [S86], [S88], [S91], [S92], [S96", "formula_coordinates": [11.0, 86.9, 95.77, 415.98, 226.88]}], "doi": "10.1051/matecconf/20165702012"}

{"Prompt Tuning for Item Cold-start Recommendation": "Yuezihan Jiang Kuaishou Technology Beijing, China yuezihan.jiang@gmail.com Gaode Chen \u2217 Kuaishou Technology Beijing, China chengaode19@gmail.com Wenhan Zhang Peking University Beijing, China pku.zwh@pku.edu.cn Jingchi Wang Peking University Beijing, China wangjingchi@pku.edu.cn Yinjie Jiang Kuaishou Technology Beijing, China jiangyinjie@kuaishou.com Qi Zhang Kuaishou Technology Beijing, China zhangqi38@kuaishou.com Jingjian Lin Kuaishou Technology Beijing, China linjingjian@kuaishou.com Peng Jiang Kuaishou Technology Beijing, China jp2006@139.com", "Kaigui Bian \u2217": "Peking University Beijing, China bkg@pku.edu.cn", "ABSTRACT": "", "CCS CONCEPTS": "The item cold-start problem is crucial for online recommender systems, as the success of the cold-start phase determines whether items can transition into popular ones. Prompt learning, a powerful technique used in natural language processing (NLP) to address zero- or few-shot problems, has been adapted for recommender systems to tackle similar challenges. However, existing methods typically rely on content-based properties or text descriptions for prompting, which we argue may be suboptimal for cold-start recommendations due to 1) semantic gaps with recommender tasks, 2) model bias caused by warm-up items contribute most of the positive feedback to the model, which is the core of the cold-start problem that hinders the recommender quality on cold-start items. We propose to leverage high-value positive feedback, termed pinnacle feedback as prompt information, to simultaneously resolve the above two problems. We experimentally prove that compared to the content description proposed in existing works, the positive feedback is more suitable to serve as prompt information by bridging the semantic gaps. Besides, we propose item-wise personalized prompt networks to encode pinnaclce feedback to relieve the model bias by the positive feedback dominance problem. Extensive experiments on four real-world datasets demonstrate the superiority of our model over state-of-the-art methods. Moreover, PROMO has been successfully deployed on a popular short-video sharing platform, a billion-user scale commercial short-video application, achieving remarkable performance gains across various commercial metrics within cold-start scenarios. RecSys '24, October 14-18, 2024, Bari, Italy \u00a9 2024 Copyright held by the owner/author(s). Publication rights licensed to ACM. ACM ISBN 979-8-4007-0505-2/24/10...$15.00 https://doi.org/10.1145/3640457.3688126 \u00b7 Information systems \u2192 Information retrieval ; Personalization ; Environment-specific retrieval .", "KEYWORDS": "Prompt Learning, Cold-start Recommendation", "ACMReference Format:": "Yuezihan Jiang, Gaode Chen, Wenhan Zhang, Jingchi Wang, Yinjie Jiang, Qi Zhang, Jingjian Lin, Peng Jiang, and Kaigui Bian. 2024. Prompt Tuning for Item Cold-start Recommendation. In 18th ACM Conference on Recommender Systems (RecSys '24), October 14-18, 2024, Bari, Italy. ACM, New York, NY, USA, 11 pages. https://doi.org/10.1145/3640457.3688126", "1 INTRODUCTION": "Recently, item cold-start recommendation has garnered significant attention from researchers [5, 24], as every item inevitably undergoes this phase, which significantly shapes its potential for popularity. With the burgeoning success of pre-training techniques in Natural Language Processing (NLP) [27], numerous endeavors have been made to integrate pre-training into cold-start recommendations [15, 16]. These methods leverage pre-trained knowledge to alleviate the sparsity issue, thereby enhancing the quality of cold-start recommendations [41]. However, amidst the prevailing trend of pretraining, the effective extraction of useful information from pretrained models emerges as a promising avenue. One such method, prompt-tuning [21, 25], stands out for its remarkable advantages over classical fine-tuning paradigms, particularly in zero-shot and few-shot scenarios. By employing hard text templates or soft continuous embeddings as prompts, prompt-tuning transforms downstream tasks into analogous well-trained pre-training tasks. The merits of prompt-tuning lie in two key aspects: firstly, it bridges the gap between pretraining and downstream objectives, thereby optimizing the utilization of pretraining model knowledge, which is especially advantageous in cold-start scenarios. Secondly, prompt-tuning requires tuning only a small set of parameters for the prompts and labels, making it more parameter-efficient. Input Num 0.62 Positive Feedback Content Feature 0.42 0.39 0.4 0.34 1 0.3 0.25 0.19 0.13 Although researchers have applied prompt learning to address cold-start recommendations by reframing them as zero- or fewshot problems [40, 43], the effectiveness of prompt learning in real industrial recommendation settings remains suboptimal from both data and model perspectives. \u00b7 Data side cost and gap . Existing approaches often necessitate additional human annotations, such as text prompt descriptions for candidate items, resulting in significant practical costs [44]. Moreover, relying solely on content features as prompt information may not be well-suited for recommender tasks, lacking an end-to-end connection to the recommendation process. \u00b7 Model side bias . A critical challenge in item cold-start recommendations arises from the poor model performance on cold-start items due to limited positive feedback contribution. This disparity often leads to situations where the model assigns high scores to warm-start items and low scores to cold-start items. [13, 44] employ a shared model architecture for prompt encoding, potentially resulting in insufficient personalization for cold-start items. This is because cold-start items represent only a small fraction of online traffic compared to popular items, causing the model parameters to be primarily optimized for popular items. Besides, the length of the prompt embedding restricts the volume of tunable parameters, and the prompt information is concentrated in the input layer, leading to less impact on the model. To address the data side problem, we propose leveraging positive feedback as effective prompt data for cold-start items. This choice is motivated by the direct relevance of positive feedback to recommender tasks. To verify the relevance of positive feedback to downstream recommender tasks, we pretrain two dual-tower modelsl [18] on KuaiRand-Pure [12], utilizing all user features. The only distinction between the models lies in the input from the item side: one model takes item features as input, while the other takes the user IDs of historical positive feedback users. We sample 300 coldstart items (viewed less than 1,000 times by users in KuaiRand) to examine the performance of the two models. The X-axis in Figure 1 represents the number of content features or IDs from the positive 0.0 0.2 0.4 0.6 0.8 1.0 Prediction Value 0 10 20 30 40 50 Sample Num Hot Negative Samples Cold-start Positive Samples Cold-start Negative Samples feedback users, and the Y-axis corresponds to the model's accuracy in predicting whether a user will click on an item. It's evident that the model trained with positive feedback demonstrates superior performance across all settings. This is attributed to ID embeddings being infused with user interest information during training. As the IDs space is continuous, they provide more informative signals than discrete content features, aiding the model in making more accurate predictions regarding user preferences. From a model perspective, a critical challenge in item cold-start recommendations arises from poor performance on cold-start items due to limited positive feedback contribution. This leads to a situation where the model assigns high scores to warm-start items and low scores to cold-start items. In Figure 2, histograms of prediction scores on 500 positive and 500 negative feedback on cold-start items, along with 500 negative feedback on warm-start items, are plotted separately from the online sorting model in the pretrained dual-tower model on KuaiRand dataset. It's observed that the mean values of the prediction scores on cold-start positive samples and warm-start negative samples are very close to each other. Additionally, the overlap of the prediction distributions of cold-start positive samples and warm-start negative samples is much larger than the overlap of the predictions on cold-start positive samples and coldstart negative samples, indicating that the model parameters are predominantly influenced by warm-start items, resulting in limited personalization for cold-start items and a tendency to assign higher scores to popular items. To address these challenges, we present a prompt-tuning method specifically designed for item cold-start recommendation, namely PROMO. To avoid data side cost and gap, we propose using significant positive feedback-which we term 'pinnacle feedback'-as the prompt information. To mitigate the model side bias, we suggest constructing personalized prompt networks for each item, thereby preventing model bias towards hot items. Additionally, to enhance the pinnacle feedback based prompt tuning and to ensure fair model predictions on items, we introduce positive feedback prompt-enhanced loss and fairness-aware prompt-enhanced loss separately. These enhancements aim to improve the performance of cold-start recommendations. The contributions of this paper are summarized as follows: \u00b7 New challenges: We identify challenges in deploying an industrially efficient prompt-tuning recommendation, including the data cost and gap (from the data perspective) and the limited personalization for cold-start items (from the model perspective). \u00b7 New technical solutions: PROMO makes the initial attempt to address both the challenges: (1) to avoid extra annotation cost and boost recommender performance, PROMO suggests utilizing pinnacle feedback for cold-start items as prompts and introduces soft prompts for flexible application in downstream tasks; (2) To avoid model bias caused by positive feedback dominance by warm-start items and improve the recommendation quality on cold-start items, we propose a personalized prompt network to adaptively update item representations. Furthermore, we introduce two types of prompt-enhanced loss to boost the performance of cold-start recommendations. \u00b7 SOTA performance: Extensive experiments on four benchmark recommender datasets and deployment of PROMO in a realworld platform at Kuaishou demonstrate that PROMO consistently achieves state-of-the-art performance compared to existing baseline methods in terms of a series of recommender statistics.", "2 RELATED WORKS": "", "2.1 Cold-start Recommendation": "In this section, we briefly introduce several hybrid recommender systems that can handle the item cold-start scenario. Item cold-start recommendation aims to provide effective recommender results to users on the cold-start items. It can be divided into several kinds. Content-based methods propose to model the distribution of content features, e.g., taking audio information to encode recommender embeddings [4, 8, 31], or taking domain-related information for downstream tasks [1, 2, 6, 10]. Though content information relieves the data sparsity problem, it is hard to ensure the content information can always supplement the downstream tasks, because there exists a gap between the semantic information and the recommender tasks. Collaborative filtering strategies such as CBF and CF have limited scope in the cold start scenario due to lack of information, e.g., involving social relations for collaborative filtering [7, 29], or proposing a new similarity measure for neighborhood based CF for item cold-start scenarios [38]. Meta-learning addresses the cold-start problem by learning to quickly adapt a model to new items or users with minimal data. For example, [47] introduces a meta-learning strategy for item cold-start recommendations by employing deep neural networks that adapt a neural network's biases using item history. [26] enhances tasks with multifaceted semantic contexts and employs a co-adaptation meta-learner to effectively address the challenges of new item recommendation. Transfer learning-based recommendation optimizes the cold-start recommendation quality by utilizing cross-domain knowledge. For example, [45] learns to transfer model knowledge from rich data settings to few data settings by a meta-learner learning the model parameter shifting relations. [40] utilize prompt learning mode to utilize pretrained knowledge to boost cold-start recommendations. PROMO belongs to this line of methods.", "2.2 Prompt-tuning for Recommendation": "Prompt-tuning, initially proposed in NLP [9, 11, 23], has gained traction in recommender systems for its performance improvements, particularly in few-shot scenarios. Typically, it involves freezing the backbone model and providing downstream tasks with related tunable prompt embeddings. Recently, inspired by NLP works, researchers have introduced prompt-tuning modes to recommender systems, such as encoding user-profiles and behaviors as prompts [40], incorporating graph structures as additional prompts [44], or encoding discrete item features for prompting [22]. Further, considering the relevance of few-shot learning and coldstart recommendations, [39, 40] have introduced prompt learning to solve the cold-start recommendation problem. However, these methods often achieve suboptimal performance in item cold-start scenarios because the corresponding prompt information, such as item profiles, lacks crucial contextual relevance to cold-start recommendations. Some research efforts propose leveraging annotated text descriptions and knowledge graphs to activate large language models for recommender tasks [13, 36, 42]. While effective in igniting the backbone with extra input prompt data, these approaches are less practical in industrial settings due to the high annotation costs associated with millions or billions of new items in such scenarios.", "3 PRELIMINARY": "", "3.1 Item Cold-start Problem": "We focus on addressing the item cold-start problem , where new items have no or few prior interactions, like click or rating logs. The item cold-start problem requires to provide a scoring function that can accurately estimate the user's preference for a new item, thus provides effectiveness guarantee for the item cold start problem.", "3.2 Notations & Problem Formulation": "In this work, we use boldface lowercase letters (e.g., \ud835\udc86 ) to denote vectors, boldface uppercase letters (e.g., \ud835\udc7e ) to denote matrices, and calligraphic capital letters (e.g., D ) to denote sets. Let U , I denote the sets of users and items, respectively. The problem here can be formulated as a typical CTR prediction task. Each user \ud835\udc62 \u2208 U is associated with a set of items I \ud835\udc62 with feedback \ud835\udc66 \ud835\udc62\ud835\udc56 = 1 for \ud835\udc56 \u2208 I \ud835\udc62 , indicating that the user has clicked on the items. e \ud835\udc62 , e \ud835\udc56 \u2208 R \ud835\udc51 are the input ID embeddings of \ud835\udc62 and \ud835\udc56 , respectively, R is the set of real numbers, and \ud835\udc51 is the embedding dimension. In our scenario, given the pair of ( \ud835\udc62 , \ud835\udc56 ), where \ud835\udc62 \u2208 U and \ud835\udc56 \u2208 I , our goal is to learn a function that can forecast how likely the item will be clicked by the user, i.e. \u02c6 \ud835\udc66 \ud835\udc62\ud835\udc56 , \u02c6 \ud835\udc66 \ud835\udc62\ud835\udc56 ranges from 0 to 1, indicating how likely the user will clicked on the item.", "4 THE PROPOSED METHOD": "Weinitiate the pre-training phase of PROMO, showcasing its adaptability across various base models. It consists of three parts. (1) Embedding Layer. In our scenario, the input to the base model includes several item content features and categorical ID features, such as item ID. These ID features cannot be directly input into the model as they are not trainable for downstream tasks. Therefore, we adopt the widely used embedding technique to transform the Prompt Generator \u2026 \u2026 Embedding Encoder Base Model (fixed) Item ID Sum-pooling Sum-pooling Neg Feedback Pos Feedback \u2112 \ud835\udc5d\ud835\udc53\ud835\udc5d\ud835\udc52 User Tower Item Encoder \u2112 \ud835\udc5f\ud835\udc52\ud835\udc50 \u2112 \ud835\udc5d\ud835\udc4e\ud835\udc5d\ud835\udc52 Fusion User ID Embedding Encoder Shared Model Parameter original sparse features into low-dimensional vectors. For user \ud835\udc62 \u2208 U and item \ud835\udc56 \u2208 I , id embeddings e \ud835\udc62 and e \ud835\udc56 are concatenated with their other continuous features to generate the overall embeddings.", "4.1 Prompt Generator": "(2) Backbone. Wefirst introduce the pre-training stage of PROMO. Following [40], we use the classical SASRec [19] as our pre-training model, which can be flexibly substituted with other representation learning methods in recommendations. SASRec stacks Transformer [33] blocks to encode the historical behavior sequence. For each user \ud835\udc62 with behavior sequence \ud835\udc60 \ud835\udc62 , its \ud835\udc59 -layer behavior matrix is formulated as S \ud835\udc59 \ud835\udc62 = ( e \ud835\udc59 \ud835\udc56 1 , e \ud835\udc59 \ud835\udc56 2 , . . . , e \ud835\udc59 \ud835\udc56 \ud835\udc58 ) , where e \ud835\udc59 \ud835\udc56 \ud835\udc58 is the \ud835\udc58 -th behavior's representation of \ud835\udc62 at the \ud835\udc59 -th layer. The ( \ud835\udc59 + 1 ) -layer behavior matrix is learned as follows: where \ud835\udc53 seq is a MLP encoder, \ud835\udc89 \ud835\udc62 is the final user representation of \ud835\udc62 learned in the pre-training stage, and \ud835\udc3f is the number of Transformer layers. Through the base model, we can obtain the hidden representations h \ud835\udc62 \u2208 R \ud835\udc51 and h \ud835\udc56 \u2208 R \ud835\udc51 of user \ud835\udc62 and item \ud835\udc56 , respectively. Then, we can make predictions on the unobserved interaction between user \ud835\udc62 and item \ud835\udc56 as follows: where [\u00b7] \u22a4 represents the transpose of the matrix, \ud835\udf0f represents the temperature coefficient, and \ud835\udf0e is the sigmoid function. (3) Loss. The objective function used in the base model and PROMO is both the negative log-likelihood function defined as: where D train is the training set, \u02c6 \ud835\udc66 is the output representing the predicted probability whether item \ud835\udc56 is clicked by \ud835\udc62 , and \ud835\udc66 \u2208 0 , 1 is the ground-truth label. Existing methods face challenges in effectively prompting recommendation models in cold-start scenarios for two primary reasons. Firstly, these methods heavily rely on content features as prompt information. These content features may suffer from a semantic gap between their representation and the requirements of recommender tasks, potentially hindering their efficacy. Secondly, as experimentally illustrated in Sec.1, we argue that positive feedback information is better suited to serve as prompt information, as it offers contextual information tailored to address the scarcity of positive feedback in item cold-start scenarios. From a model perspective, the training samples of popular items, especially the positive samples, provide the majority of training data to the recommender system, resulting in the predominance of training samples from popular items. Consequently, this leads to model bias, where the model tends to assign higher scores to popular items, perpetuating their dominance in recommendations. 4.1.1 Prompt Data. Initially, we propose utilizing pinnacle feedback as input for prompting, where \"pinnacle feedback\" refers to users who have provided exceptionally positive feedback for a given item. This approach offers advantages on two fronts: (1) These users are crucial for the recommender system to understand the item, and (2) by leveraging user feedback as prompt information and as part of the cold-start item representation, the user-item matching problem can be reframed as a user-user matching problem, potentially increasing the traffic distribution efficiency of cold-start items and aiding more cold-start items in transitioning into popular items. To select appropriate positive feedback for item \ud835\udc56 \u2208 I , we present a criterion to measure the score of each feedback for item \ud835\udc56 , which is also applied in our online recommender system. For each user \ud835\udc62 \u2208 U who has viewed the item \ud835\udc56 , we consider multiple positive feedback from users (i.e., positive comments and forward) on the items to calculate preference score for selecting pinnacle feedback. This measurement standard can be flexibly modified to suit different recommender scenarios, e.g., short-video recommendation and ecommerce recommendation. Specifically, we measure the sample value \ud835\udc63 \ud835\udc62,\ud835\udc56 of user (feedback) \ud835\udc62 to item \ud835\udc56 using the following formula. where \ud835\udc36\ud835\udc45 \ud835\udc62,\ud835\udc56 represents the staying time of the user on the item page, and \ud835\udc3c\ud835\udc45 \ud835\udc62,\ud835\udc56 is a comprehensive score of user interaction feedback, such as liking the item or following the owner of the item. According to the above criteria, we select the top\ud835\udc58 users with the highest value as the pinnacle sample list for the item \ud835\udc56 , that is, \ud835\udc43\ud835\udc5c\ud835\udc60 \ud835\udc56 = ( \ud835\udc62 \ud835\udc5d\ud835\udc5c\ud835\udc60 1 , \ud835\udc62 \ud835\udc5d\ud835\udc5c\ud835\udc60 2 , ..., \ud835\udc62 \ud835\udc5d\ud835\udc5c\ud835\udc60 \ud835\udc58 ). For cases where certain items lack user feedback, referring to ideas behind [3], we utilize collaborative filtering information from warm-upitems to help cold-start items, we generate pseudo-pinnacle sample information from related popular items. Specifically, for a cold-start item \ud835\udc4e \u2208 I , we calculate item similarities between itself and popular item \ud835\udc4f \u2208 I using the formula: where h \ud835\udc4e and h \ud835\udc4f represent embeddings of items \ud835\udc4e and \ud835\udc4f , encoded from the base model. We select the most similar popular item to item \ud835\udc4e , and apply Equation (4) to extract related positive feedback as pseudo-prompt information. In order to give full play to the role of the pinnacle samples, we also randomly select \ud835\udc58 negative feedback of item \ud835\udc56 (users who do not have any positive interaction with the item \ud835\udc56 ), that is, \ud835\udc41\ud835\udc52\ud835\udc54 \ud835\udc56 = ( \ud835\udc62 \ud835\udc5b\ud835\udc52\ud835\udc54 1 , \ud835\udc62 \ud835\udc5b\ud835\udc52\ud835\udc54 2 , ..., \ud835\udc62 \ud835\udc5b\ud835\udc52\ud835\udc54 \ud835\udc58 ), as the input prompt information. Based on the pre-trained Embedding Layer in the base model, we use the look-up operation to convert \ud835\udc43\ud835\udc5c\ud835\udc60 \ud835\udc56 and \ud835\udc41\ud835\udc52\ud835\udc54 \ud835\udc56 into embedding representations S \ud835\udc5d\ud835\udc5c\ud835\udc60 \ud835\udc56 = ( e \ud835\udc5d\ud835\udc5c\ud835\udc60 \ud835\udc62 1 , e \ud835\udc5d\ud835\udc5c\ud835\udc60 \ud835\udc62 2 , ..., e \ud835\udc5d\ud835\udc5c\ud835\udc60 \ud835\udc62 \ud835\udc58 ) and S \ud835\udc5b\ud835\udc52\ud835\udc54 \ud835\udc56 = ( e \ud835\udc5b\ud835\udc52\ud835\udc54 \ud835\udc62 1 , e \ud835\udc5b\ud835\udc52\ud835\udc54 \ud835\udc62 2 , ..., e \ud835\udc5b\ud835\udc52\ud835\udc54 \ud835\udc62 \ud835\udc58 ). 4.1.2 Personalized Prompt Network. (1) Model Architecture. From the model perspective, we use the prompt generator to generate \ud835\udc59 independent sets of embeddings e \ud835\udc5d 0 \ud835\udc56 \u2208 R \ud835\udc51 \ud835\udc5d 0 , e \ud835\udc5d 1 \ud835\udc56 \u2208 R \ud835\udc51 \ud835\udc5d 1 , \u00b7 \u00b7 \u00b7 , e \ud835\udc5d \ud835\udc59 \ud835\udc56 \u2208 R \ud835\udc51 \ud835\udc5d \ud835\udc59 , for cold start item \ud835\udc56 \u2208 I , which are different from the Embedding Layer in the base model. For the specific \ud835\udc5b -th item embedding e \ud835\udc5d \ud835\udc5b \ud835\udc56 , we reshape and split them into the weight matrix and bias vector for the personalized prompt network. This process for e \ud835\udc5d \ud835\udc5b \ud835\udc56 can be formulated as: where W \ud835\udc5d \ud835\udc5b \ud835\udc56 and \ud835\udc4f \ud835\udc5d \ud835\udc5b \ud835\udc56 denote the weight and bias of \ud835\udc5b -th layer of the personalized prompt networks, // indicates the concatenation operation, |\u00b7| gets the size of the variables. This process mitigates the problem of model bias, where popular items dominate model updates, as each item only updates its itempersonalized prompt networks. Furthermore, it ensures that the prompt information fully takes effect, as the personalized prompt network is independent from the original base model and solely encodes the prompt information. (2) Complexity. PROMOisparameter-efficient, since it only needs to tune and store a few parameters compared with fine-tuning the base model. The tunable parameters in PROMO only cost in the personalized prompt network part ( W \ud835\udc5d \ud835\udc5b \ud835\udc56 and \ud835\udc4f \ud835\udc5d \ud835\udc5b \ud835\udc56 ), which is very efficient. In PROMO, the number of parameters to be updated merely 20.1%, 27.6%, 17.7% and 25.6% of those fine-tuning in MovieLens100K, MovieLens1M, KuaiRand, and TMall datasets.", "4.2 Prompt Learning in PROMO": "In the previous section, we obtain the positive feedback list S \ud835\udc5d\ud835\udc5c\ud835\udc60 \ud835\udc56 , negative feedback list S \ud835\udc5b\ud835\udc52\ud835\udc54 \ud835\udc56 and the parameters of the personalized prompt network for the cold-start item \ud835\udc56 \u2208 I based on the prompt generator. Next, S \ud835\udc5d\ud835\udc5c\ud835\udc60 \ud835\udc56 and S \ud835\udc5b\ud835\udc52\ud835\udc54 \ud835\udc56 are fed into the personalized prompt network and the feature interaction is realized via the concatenation of the output of each layer. Take S \ud835\udc5d\ud835\udc5c\ud835\udc60 \ud835\udc56 as an example: where \u2297 denotes the matrix multiplication, \ud835\udf0e indicates the activation function, \ud835\udc59 represents the layers of the personalized prompt network, h \ud835\udc5d\ud835\udc5c\ud835\udc60 \ud835\udc59 is the output of the prompt data fed through the prompt network, and h \ud835\udc5d\ud835\udc5c\ud835\udc60 0 = S \ud835\udc5d\ud835\udc5c\ud835\udc60 \ud835\udc56 . We can also get h \ud835\udc5b\ud835\udc52\ud835\udc54 \ud835\udc59 for S \ud835\udc5b\ud835\udc52\ud835\udc54 \ud835\udc56 . To fully leverage the potential of prompt information in PROMO, we introduce the pinnacle feedback prompt-enhanced loss L \ud835\udc5d\ud835\udc53 \ud835\udc5d\ud835\udc52 and the popularity-aware prompt-enhanced loss L \ud835\udc5d\ud835\udc4e\ud835\udc5d\ud835\udc52 . Per-sample Pinnacle Feedback Prompt-enhanced Loss. Persample Positive Feedback Prompt-enhanced Loss is designed to fully take advantange of high-value positive samples for cold-start items. To achieve this, for the item \ud835\udc56 \u2208 I , we leverage the concept of contrastive learning to widen the gap between its pinnacle and negative feedback representations. We calculate the sum of the distances between each pinnacle feedback and each negative feedback of \ud835\udc56 as follows: where we employ the \ud835\udc3f 1 distance to calculate the discrepancy between each pinnacle feedback vector and each corresponding negative feedback vector. Furthermore, we utilize the log function to implement the loss: Optimizing L \ud835\udc5d\ud835\udc53 \ud835\udc5f\ud835\udc52 enables PROMO to indirectly memorize valuable feedback information in both the prompt network parameters and the prompt embedding. Additionally, the pair-wise L \ud835\udc5d\ud835\udc53 \ud835\udc5f\ud835\udc52 supplements order information to the base model, which is trained in a point-wise manner and lacks ordering ability. Intra-batch Popularity-aware Prompt-enhanced Loss. The final representation of the item \ud835\udc56 \u2208 I is composed of the output h \ud835\udc56 of the base model, the average of its positive feedback list S \ud835\udc5d\ud835\udc5c\ud835\udc60 \ud835\udc56 , and the last layer of personalized prompt network embedding e \ud835\udc5d \ud835\udc59 \ud835\udc56 : where MLP is the Multi-layer Perceptron network. With the final embeddings, we adopt a simple but widely-used inner product model, i.e., \u02c6 \ud835\udc66 \ud835\udc62,\ud835\udc56 = h e \ud835\udc53 \ud835\udc56\ud835\udc5b\ud835\udc4e\ud835\udc59 \ud835\udc62 i \u22a4 \u00b7 e \ud835\udc53 \ud835\udc56\ud835\udc5b\ud835\udc4e\ud835\udc59 \ud835\udc56 , to estimate the value of \u02c6 \ud835\udc66 \ud835\udc62,\ud835\udc56 , which is the interaction probability between a given pair of user and item. Industrial recommender systems frequently exhibit biased preferences for popular items. This bias emerges because popular items contribute the majority of positive samples. Consequently, as depicted in Figure 2 (b), the estimated scores for cold-start items in positive samples are even lower than those for popular items in negative samples. To address this, PROMO introduces an intrabatch popularity-aware prompt-enhanced loss. Before that, for the samples (pairs of the user \ud835\udc62 and the item \ud835\udc56 ) in a batch, we can get two sets D \ud835\udc5d\ud835\udc5c\ud835\udc60 _ \ud835\udc50\ud835\udc5c\ud835\udc59\ud835\udc51 and D \ud835\udc5b\ud835\udc52\ud835\udc54 _ \ud835\udc64\ud835\udc4e\ud835\udc5f\ud835\udc5a respectively based on the cold-start status of the item and the label. Here, D \ud835\udc5d\ud835\udc5c\ud835\udc60 _ \ud835\udc50\ud835\udc5c\ud835\udc59\ud835\udc51 is the positive sample set of cold-start items within a batch, and D \ud835\udc5b\ud835\udc52\ud835\udc54 _ \ud835\udc64\ud835\udc4e\ud835\udc5f\ud835\udc5a is the negative sample set of popular items within the batch. We calculate the distance between positive cold-start samples and negative popular samples within the batch and use the following loss to further push the distance to achieve fair scoring.", "4.3 Optimization": "To fully leverage knowledge from the pretrained model and PROMO, we directly fuse the representations from the pretrained model and PROMO by concatenating the embeddings together, thus obtaining the final embeddings. The final prediction value is estimated from the final embedding. The overall objective function is formulated as: where \ud835\udf06 1 and \ud835\udf06 2 are positive coefficients serving as balancing factors for the multiple loss functions. L \ud835\udc5f\ud835\udc52\ud835\udc50 has the same format as Equation 3, which is important to inject representations with personalized recommender knowledge. Following the training paradigm in prompt learning [21], the base model is frozen during the optimization. Only tuning on the small set of model parameters without changing the base model is not only parameter-efficient, but it can also better leverage the pre-trained model and avoid the catastrophic forgetting problem [20].", "5 EXPERIMENT": "In this section, we conduct an empirical assessment of our framework and present comprehensive results. Our focus lies on addressing the following six questions: Q1: Can PROMO surpass state-of-the-art baseline methods in terms of recommendation performance in cold-start scenarios across real-world datasets? Q2: What are the advantages of the prompt learning module within PROMO for enhancing downstream recommender tasks? Q3: How effective is the proposed positive feedback prompt information? Can it be replaced by other types of prompt information? Q4: How does the personalized prompt network affect the overall system performance? Q5: Does the prompt paradigm in PROMO effectively enhance the high-value positive feedback information? Q6: Does PROMO effective in providing high-quality recommender results in the industrial application?", "5.1 Datasets & Baselines": "Datasets. We utilize four public recommender datasets - MovieLens 100K & 1M [17] about movie recommendations, KuaiRand [12] of short-video recommendations and TMall [30] of E-commerce recommendations, to evaluate the effectiveness of our methods. Specifically, we preprocessing the datasets for the evaluation on cold-start performance. For all four datasets, We divide items into two groups, popular and cold-start based on their positive feedback interaction frequencies, where items with more than positive feedback interactions are popular and others are cold-start. We use of 20, 50, 50 and 20 for MovieLens 100K, MovieLens 1M, KuaiRnad-Pure and Tmall dataset, respectively. Note that the ratio of cold-start items to popular items is approximately 8:2, which is similar to the definition of long-tail items. Following the same leave-one-out technique in existing works [40, 46], we take the last interactive item for each user as the test data, the second-to-last as validation data, and the remaining data as training data to simulate the online recommendation environment. The detailed statistics are summarized in Table 1. Baselines. In order to comprehensively assess the efficacy of the prompt tuning mode in our system (PROMO), we conduct a comparison with two approaches: Pre-train, where we directly apply the pre-trained model (SASRec [19]) to the test set, and Fine-tuning, which involves tuning all parameters of the pre-trained model during the tuning phase. Besides, we compare PROMO with four popular and effective CF model: DCN [35], DeepFM [14], SASRec [19], DSSM [18], four state-of-the-art cold-start recommender models: CDN [46], DropoutNet [34], CB2CF [3], MetaEmb [28], and two prompt-tuning in recommender systems: PPR [40], PLATE [37]. Our code for PROMO is available at https://github.com/PROMOREC/ PROMO. The main characteristic of all baselines are listed below: \u00b7 CDN [46]: CDN presents a Cross Decoupling Network (CDN) to enhance long-tail item recommendation by addressing biases in user preference predictions. \u00b7 DCN [35]: DCN is a novel cross network that is efficient in learning certain bounded-degree feature interactions. As it is poweful and the feature crossing manner is similar to prompt network in PROMO, we take it as one of the baseline method. \u00b7 DeepFM [14]: DeepFM derives an end-to-end learning model that emphasizes both low- and highorder feature interactions by a shared input to the 'wide' and 'deep' parts. \u00b7 SASRec [19]: SASRec capture both long-short recommender interests by utilizing both long-term semantics (like an RNN) and using an attention mechanism to makes its predictions based on relatively few actions. \u00b7 DSSM [18]: SASRec capture both long-short recommender interests by utilizing both long-term semantics (like an RNN) and using an attention mechanism to makes its predictions based on relatively few actions. \u00b7 DropoutNet [34]: DropoutNet modify the learning procedure to explicitly condition the model for the missing input, and train DNNs to generalize to missing input.", "5.3 End-to-End Comparison": "\u00b7 CB2CF [3]: CB2CF introduces the model for bridging the gap between items' CB profiles and their CF representations. It is supervised by CF information, produces significantly better results than classical CB models that use the same CB data. \u00b7 MetaEmb [28]: MetaEmb trains generators by making use of previously learned ads through gradient-based meta-learning. \u00b7 PPR [40]: PPR introduces prompt to pre-trained recommendation models for cold-start recommendation. \u00b7 PLATE [37]: PLATE conducts prompt tuning with two novel prompt modules, capturing the distinctions among various domains and users.", "5.2 Evaluation Metrics & Parameter Settings": "For each user in the test set, we take all the items that the user has not interacted with as negative samples. For each testing useritem positive pair, we randomly sample 100 items which are not interacted by the user to generate negative pairs for evaluation, which mirrors similar settings in existing works. We evaluate the proposed PROMO with two metrics: Hitrate@K and NDCG@K. These metrics can be formulated as follows: where \ud835\udc45 ( \ud835\udc62 ) and \ud835\udc47 ( \ud835\udc62 ) represent the model recommendation set and the whole test set respectively; \ud835\udc5f\ud835\udc52\ud835\udc59 \ud835\udc57 = 0 / 1 indicates item at rank \ud835\udc57 in \ud835\udc45 ( \ud835\udc62 ) is also belonging to \ud835\udc47 ( \ud835\udc62 ) . IDCG is the DCG score for the most ideal ranking, which is ranking the items top down according to their real score. In our experiment, \ud835\udc3e is separately set to be 5 and 10. A higher score indicates a model with better retrieval or ranking ability. To address Q1 , we present the performance results of our end-toend comparison in Table 2. Across four recommender datasets, our system (PROMO) consistently outperforms all baseline methods across various metrics (H@1, H@5, H@10, N@1, N@5, and N@10). Compared to cold-start baseline methods, PROMO achieves superior performance. For instance, PROMO outperforms CB2CF and MetaEmb by large margins of 37.8% and 27.2%, respectively, in HitRate@5 on the MovieLens 1M dataset. This highlights the importance of positive feedback in enhancing recommender tasks compared to content-based information. Moreover, CF-based methods generally achieve better performance than content-based methods, further underscoring the effectiveness of utilizing feedback information for recommendations. Despite this, PROMO achieves significant improvements over CF-based methods, e.g., surpassing SASRec by 16.3%, 13.1%, 14.7%, and 13.7% according to the metrics of H@5, H@10, N@5, and N@10, respectively, on the MovieLens 100K dataset. This superiority indicates the effectiveness of the proposed pinnacle feedback information for recommendations. Additionally, it is noteworthy that the cutting-edge prompt recommendermethodPPRoftenachieves the second-best performance. This underscores the effectiveness of the prompt paradigm in addressing few-shot learning problems. However, PROMO surpasses cutting-edge prompt recommender methods like PPR and PLATE across all metrics. While PPR adopts SASRec as its backbone model and follows a two-stage training approach, PROMO's superiority is evident due to several factors. PPR's reliance on content features for prompt information may lead to suboptimal results due to the lack of utilization of positive feedback information. Furthermore, PPR's use of a shared neural network to encode prompt information may introduce model bias, favoring popular items over cold-start ones.", "5.4 Interpretability of PROMO": "To elucidate why PROMO is effective for downstream recommender tasks to answer Q2, we begin by revaluating the architecture of PROMO. As delineated in the model overview, PROMO operates as a flexible module within a two-stage framework, with the base 1.75 1.50 1.25 1.00 0.75 0.50 0.25 0.00 0.00 0.25 0.00 0.25 0.50 0.75 1.00 1.25 1.50 1.75 0.00 0.25 0.50 0.75 1.00 1.25 1.50 1.75 0.50 0.75 1.00 1.25 1.50 1.75 0.00 0.20 0.40 0.60 0.80 0.00 0.20 0.40 0.60 0.80 1.00 1.20 1.40 0.00 0.20 0.40 0.60 0.80 1.00 1.20 1.40 0.00 0.20 0.40 0.60 0.80 1.00 1.20 1.40 1.00 (a) Item representations from DSSM. model held constant. We contend that PROMO is more efficacious due to the prompt embedding it generates containing aligned information pertinent to the downstream tasks. This alignment stems from the informative nature of pinnacle positive feedback, which guides the recommender system in item distribution. To illustrate this phenomenon, we visualize the item representations produced by PROMO and a baseline of DSSM model. Specifically, upon convergence on the MovieLens100K dataset, we extract the final output embeddings of items from both models and visualize all item embeddings. The left segment of Figure 4 depicts the node representations of the DSSM, while the right segment illustrates the embeddings from PROMO. It becomes apparent that items sharing the same classes are more closely mapped together in PROMO, whereas the base model fails to implicate category information. This observation suggests that recommender systems, when better aligned with the recommendation tasks, can enrich representations with collaborative relations concerning content information, such as item class information in this instance. These learned content relations can furnish pertinent information aiding in task optimization in an end-to-end fashion. Consequently, the prompt learning module enhances the model's capacity to produce discriminative item representations by assimilating more task-relevant information from the proposed prompt optimization method in PROMO, thereby augmenting the performance of downstream tasks.", "5.5 Influence on Prompt Information": "To address Q3 , we conducted experiments to evaluate the effectiveness of the proposed prompt information. PROMO represents the first work to utilize pinnacle feedback as prompt information. To assess the efficacy of this approach, we replaced pinnacle feedback with commonly used prompt information from other prompt recommendation approaches. Specifically, we replaced the pinnacle feedback prompt information with item-IDs (referred to as PROMOI), item features (referred to as PROMO-F), and both IDs and item 1.20 1.40 features (referred to as PROMO-IF), while keeping other components of PROMO unchanged. We evaluated the effectiveness of prompt information on the MovieLens 100K, MovieLens 1M, and KuaiRand datasets, with results presented in Table 3. It is evident that PROMO outperforms all its variants according to the HitRate and NDCG metrics. This indicates that the prompt information proposed in PROMO is more relevant in indicating user interests, thereby enhancing downstream tasks. Additionally, it's noteworthy that PROMO-I exhibits the poorest performance among the variants. This can be attributed to the fact that cold-start items scarcely provide samples for the recommender system, resulting in their ID embeddings being inadequately updated, thereby failing to provide sufficient information for model prediction. Although PROMO-IF achieves considerable performance compared to other PROMO variants, it still falls behind PROMO. For example, it lags behind by 10.6% and 11.9% according to H@10 and N@10 on MovieLens 100K, and falls short by 2.4% and 8.6% on KuaiRand according to H@10 and N@10 respectively. This underscores the significance of positive feedback information in recommendations, especially in cold-start scenarios.", "5.6 Influence of Personalized Prompt Network": "To address Q4 , we assessed the effectiveness of the personalized prompt network by comparing the performance of related variants of PROMO. Specifically, PROMO was evaluated in the following configurations: (i) substituting the personalized prompt network with a global shared MLP prompt network (referred to as \"PROMOM\"), and (ii) removing the personalized prompt network module and incorporating the positive feedback information directly as an input feature to the base model, denoted as \"PROMO-T\". The performance results are provided in Table 4. It is evident that PROMO-M outperforms PROMO-T across all metrics in the three datasets. This superiority is attributed to the exclusive prompt network in PROMO-M, which emphasizes the 0 20 40 60 80 100 0 20 40 60 80 100 Memory Retention Rate(%) DeepFM Ours 0 20 40 60 80 100 0 20 40 60 80 100 MetaEmb Ours 0 20 40 60 80 100 0 20 40 60 80 100 PPR Ours Cumulative Negative Feedback Count DeepFM MetaEmb PPR importance of pinnacle feedback, thereby avoiding any reduction in effectiveness that may occur when combined with other features in PROMO-T. However, PROMO-M encounters the model bias problem, as the model parameters become dominated by popular items, leading to suboptimal performance in cold-start recommendations. On the contrary, PROMO overcomes this issue with the personalized prompt network, which enhances the pivotal pinnacle feedback information while simultaneously avoiding the model bias problem.", "5.7 Effectiveness of Pinnacle Feedback Enhancement": "To address Q5 , we evaluated whether the pinnacle feedback information is effectively retained in PROMO. We defined a memorized pinnacle feedback as a pinnacle sample accurately estimated by the model at time \ud835\udc61 0 as well as at \ud835\udc61 1. The memory retention rate was calculated as the memorized pinnacle feedback amount at \ud835\udc61 1 compared to the total pinnacle amount truly estimated at \ud835\udc61 0. We randomly selected 500 pinnacle feedback samples and assessed the memory retention rate with increasing accumulation of negative feedback on the corresponding items. For comparison, we selected three representative baseline methods due to page limitations: DeepFM from CF-based methods, MetaEmb from contentbased methods, and PPR from prompt learning methods. The memory retention rate comparison is depicted in Fig. 5. It was observed that as the cumulative negative feedback amount increased, the memory retention rate declined in all three baseline methods. The decline was more pronounced with higher cumulative negative feedback amounts, particularly evident in the DeepFM baseline. This phenomenon can be attributed to CF-based methods' focus on recent feedback information, leading them to gradually forget earlier samples under online streaming training modes, resulting in the forgetting of original pinnacle feedback information. In comparison, PROMO achieved a high memory retention rate, demonstrating its effectiveness in memorizing pinnacle feedback information and facilitating recommender performance.", "5.8 Production A/B Test": "To answer Q6 , we assess the performance of PROMO through its deployment on a popular short-video sharing platform in China where users can upload their short-videos and enjoy short-videos by other users, using the standard A/B testing methodology. We randomly divided users into two groups for online evaluation, with each group comprising more than 30 million users to ensure statistical significance. The sole distinction between these groups lies in the cascading process for online serving: users in the first group experience the recommender system that incorporates PROMO, while users in the second group are exposed to a online baseline method, which is similar to the SASRec baseline method. The online serving performance is evaluated using metrics that consider user engagement, such as Click Rate, Video Play Time, Video Like and Video Collecting. The first two metrics reflect the user's implicit satisfaction, while the latter two reflect the user's explicit preference expressed through behavior. The comparison was monitored over 14 consecutive days, and the average performance for item cold-start recommendations is presented in Table 5. We observed a consistent growth trend in both the implicit feedback and explicit feedback. For example, PROMO gain the explicit user feedback on video like of 3.9% lifting, along with the implicit user feedback of videp play time of 4.8% lifting. demonstrates that PROMO provides users with more satifactory recommender results. The online evaluation in cold-start recommendation settings highlights the effectiveness of our method.", "6 CONCLUSION": "Item cold-start challenge plays a pivotal role in the success of online recommender systems. Prompt learning, has been adapted for recommender systems to tackle similar hurdles. However, prevailing methods often rely on content-based properties or text descriptions for prompting, potentially falling short due to semantic gaps with downstream tasks. We advocate for leveraging positive feedback as a more task-relevant prompt for recommendations. This is especially crucial for cold-start items, which grapple with limited positive feedback. Moreover, the dominance of positive feedback from popular items introduces model bias, where these items receive higher scores from the recommender system. To combat these challenges, we propose leveraging high-value positive feedback, referred to as pinnacle feedback, as prompt information. Our investigation into the efficacy of pinnacle feedback as prompt data for cold-start items, along with the development of a prompt generator to acquire both pinnacle and negative feedback prompt information. Furthermore, we introduce item-wise personalized prompt networks to mitigate model bias. Extensive experiments on four real-world datasets demonstrate the superiority of our model over state-of-the-art methods. Additionally, PROMO has been successfully deployed on a industrial recommender system in China, a billion-user scale commercial short-video application, achieving remarkable performance gains across various commercial metrics within cold-start scenarios.", "ACKNOWLEDGMENTS": "This work is partially sponsored by NSFC (62032003).", "REFERENCES": "[1] Talha Mahboob Alam and Mazhar Javed Awan. 2018. Domain analysis of information extraction techniques. Int. J. Multidiscip. Sci. Eng 9, 6 (2018). [2] Talha Mahboob Alam, Kamran Shaukat, Mubbashar Mushtaq, Yasir Ali, Matloob Khushi, Suhuai Luo, and Abdul Wahab. 2021. Corporate bankruptcy prediction: Anapproach towards better corporate world. Comput. J. 64, 11 (2021), 1731-1746. [3] Oren Barkan, Noam Koenigstein, Eylon Yogev, and Ori Katz. 2019. CB2CF: a neural multiview content-to-collaborative filtering model for completely cold item recommendations. In Proceedings of the 13th ACM Conference on Recommender Systems . 228-236. [4] Dmitry Bogdanov, Mart\u00edn Haro, Ferdinand Fuhrmann, Anna Xamb\u00f3, Emilia G\u00f3mez, and Perfecto Herrera. 2013. Semantic audio content-based music recommendation and visualization based on user preference examples. Information Processing & Management 49, 1 (2013), 13-33. [5] Yuwei Cao, Liangwei Yang, Chen Wang, Zhiwei Liu, Hao Peng, Chenyu You, and Philip S Yu. 2023. Multi-task item-attribute graph pre-training for strict cold-start item recommendation. In Proceedings of the 17th ACM Conference on Recommender Systems . 322-333. [6] Gaode Chen, Xinghua Zhang, Yijun Su, Yantong Lai, Ji Xiang, Junbo Zhang, and Yu Zheng. 2023. Win-win: a privacy-preserving federated framework for dual-target cross-domain recommendation. In Proceedings of the AAAI Conference on Artificial Intelligence , Vol. 37. 4149-4156. [7] Gaode Chen, Xinghua Zhang, Yanyan Zhao, Cong Xue, and Ji Xiang. 2021. Exploring Periodicity and Interactivity in Multi-Interest Framework for Sequential Recommendation. In Proceedings of the Thirtieth International Joint Conference on Artificial Intelligence . 1426-1433. [8] Ke Chen, Beici Liang, Xiaoshuan Ma, and Minwei Gu. 2021. Learning audio embeddings with user listening data for content-based music recommendation. In ICASSP 2021-2021 IEEE International Conference on Acoustics, Speech and Signal Processing (ICASSP) . IEEE, 3015-3019. [9] Yifan Chen, Devamanyu Hazarika, Mahdi Namazifar, Yang Liu, Di Jin, and Dilek Hakkani-Tur. 2022. Inducer-tuning: Connecting Prefix-tuning and Adaptertuning. arXiv preprint arXiv:2210.14469 (2022). [10] Yashar Deldjoo, Markus Schedl, Paolo Cremonesi, Gabirella Pasi, et al. 2018. Content-based multimedia recommendation systems: definition and application domains. In Italian Information Retrieval Workshop . 1-4. [11] Ning Ding, Shengding Hu, Weilin Zhao, Yulin Chen, Zhiyuan Liu, Hai-Tao Zheng, and Maosong Sun. 2021. Openprompt: An open-source framework for promptlearning. arXiv preprint arXiv:2111.01998 (2021). [12] Chongming Gao, Shijun Li, Yuan Zhang, Jiawei Chen, Biao Li, Wenqiang Lei, Peng Jiang, and Xiangnan He. 2022. KuaiRand: An Unbiased Sequential Recommendation Dataset with Randomly Exposed Videos. In Proceedings of the 31st ACM International Conference on Information & Knowledge Management . 3953-3957. [13] Shijie Geng, Shuchang Liu, Zuohui Fu, Yingqiang Ge, and Yongfeng Zhang. 2022. Recommendation as language processing (rlp): A unified pretrain, personalized prompt & predict paradigm (p5). In Proceedings of the 16th ACM Conference on Recommender Systems . 299-315. [14] Huifeng Guo, Ruiming Tang, Yunming Ye, Zhenguo Li, and Xiuqiang He. 2017. DeepFM: a factorization-machine based neural network for CTR prediction. arXiv preprint arXiv:1703.04247 (2017). [15] Bowen Hao, Hongzhi Yin, Jing Zhang, Cuiping Li, and Hong Chen. 2023. A multi-strategy-based pre-training method for cold-start recommendation. ACM Transactions on Information Systems 41, 2 (2023), 1-24. [16] Bowen Hao, Jing Zhang, Hongzhi Yin, Cuiping Li, and Hong Chen. 2021. Pretraining graph neural networks for cold-start users and items representation. In Proceedings of the 14th ACM International Conference on Web Search and Data Mining . 265-273. [17] F Maxwell Harper and Joseph A Konstan. 2015. The movielens datasets: History and context. Acm transactions on interactive intelligent systems (tiis) 5, 4 (2015), 1-19. [18] Po-Sen Huang, Xiaodong He, Jianfeng Gao, Li Deng, Alex Acero, and Larry Heck. 2013. Learning deep structured semantic models for web search using clickthrough data. In Proceedings of the 22nd ACM international conference on Information & Knowledge Management . 2333-2338. [19] Wang-Cheng Kang and Julian McAuley. 2018. Self-attentive sequential recommendation. In 2018 IEEE international conference on data mining (ICDM) . IEEE, 197-206. [20] James Kirkpatrick, Razvan Pascanu, Neil Rabinowitz, Joel Veness, Guillaume Desjardins, Andrei A Rusu, Kieran Milan, John Quan, Tiago Ramalho, Agnieszka Grabska-Barwinska, et al. 2017. Overcoming catastrophic forgetting in neural networks. Proceedings of the national academy of sciences 114, 13 (2017), 35213526. [21] Brian Lester, Rami Al-Rfou, and Noah Constant. 2021. The power of scale for parameter-efficient prompt tuning. arXiv preprint arXiv:2104.08691 (2021). [22] Lei Li, Yongfeng Zhang, and Li Chen. 2023. Personalized prompt learning for explainable recommendation. ACM Transactions on Information Systems 41, 4 (2023), 1-26. [23] Xiang Lisa Li and Percy Liang. 2021. Prefix-tuning: Optimizing continuous prompts for generation. arXiv preprint arXiv:2101.00190 (2021). [24] Taichi Liu, Chen Gao, Zhenyu Wang, Dong Li, Jianye Hao, Depeng Jin, and Yong Li. 2023. Uncertainty-aware Consistency Learning for Cold-Start Item Recommendation. In Proceedings of the 46th International ACM SIGIR Conference on Research and Development in Information Retrieval . 2466-2470. [25] Xiao Liu, Kaixuan Ji, Yicheng Fu, Weng Tam, Zhengxiao Du, Zhilin Yang, and Jie Tang. 2022. P-tuning: Prompt tuning can be comparable to fine-tuning across scales and tasks. In Proceedings of the 60th Annual Meeting of the Association for Computational Linguistics (Volume 2: Short Papers) . 61-68. [26] Yuanfu Lu, Yuan Fang, and Chuan Shi. 2020. Meta-learning on heterogeneous information networks for cold-start recommendation. In Proceedings of the 26th ACM SIGKDD International Conference on Knowledge Discovery & Data Mining . 1563-1573. [27] Bonan Min, Hayley Ross, Elior Sulem, Amir Pouran Ben Veyseh, Thien Huu Nguyen, Oscar Sainz, Eneko Agirre, Ilana Heintz, and Dan Roth. 2023. Recent advances in natural language processing via large pre-trained language models: A survey. Comput. Surveys 56, 2 (2023), 1-40. [28] Feiyang Pan, Shuokai Li, Xiang Ao, Pingzhong Tang, and Qing He. 2019. Warm up cold-start advertisements: Improving ctr predictions via learning to learn id embeddings. In Proceedings of the 42nd International ACM SIGIR Conference on Research and Development in Information Retrieval . 695-704. [29] Suvash Sedhain, Scott Sanner, Darius Braziunas, Lexing Xie, and Jordan Christensen. 2014. Social collaborative filtering for cold-start recommendations. In Proceedings of the 8th ACM Conference on Recommender systems . 345-348. [30] The TMall Team. [n. d.]. The Tmall Dataset. https://tianchi.aliyun.com/dataset/ 42. [31] Aaron Van den Oord, Sander Dieleman, and Benjamin Schrauwen. 2013. Deep content-based music recommendation. Advances in neural information processing systems 26 (2013). [32] Laurens Van der Maaten and Geoffrey Hinton. 2008. Visualizing data using t-SNE. Journal of machine learning research 9, 11 (2008). [33] Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N Gomez, \u0141ukasz Kaiser, and Illia Polosukhin. 2017. Attention is all you need. Advances in neural information processing systems 30 (2017). [34] Maksims Volkovs, Guangwei Yu, and Tomi Poutanen. 2017. Dropoutnet: Addressing cold start in recommender systems. Advances in neural information processing systems 30 (2017). [35] Ruoxi Wang, Bin Fu, Gang Fu, and Mingliang Wang. 2017. Deep & cross network for ad click predictions. In Proceedings of the ADKDD'17 . 1-7. [36] Xiaolei Wang, Kun Zhou, Ji-Rong Wen, and Wayne Xin Zhao. 2022. Towards unified conversational recommender systems via knowledge-enhanced prompt learning. In Proceedings of the 28th ACM SIGKDD Conference on Knowledge Discovery and Data Mining . 1929-1937. [37] Yuhao Wang, Xiangyu Zhao, Bo Chen, Qidong Liu, Huifeng Guo, Huanshuo Liu, Yichao Wang, Rui Zhang, and Ruiming Tang. 2023. PLATE: A PromptEnhanced Paradigm for Multi-Scenario Recommendations. In Proceedings of the 46th International ACM SIGIR Conference on Research and Development in Information Retrieval . 1498-1507. [38] Jian Wei, Jianhua He, Kai Chen, Yi Zhou, and Zuoyin Tang. 2017. Collaborative filtering and deep learning based recommendation system for cold start items. Expert Systems with Applications 69 (2017), 29-39. [39] Xuansheng Wu, Huachi Zhou, Wenlin Yao, Xiao Huang, and Ninghao Liu. 2023. Towards Personalized Cold-Start Recommendation with Prompts. arXiv preprint arXiv:2306.17256 (2023). [40] Yiqing Wu, Ruobing Xie, Yongchun Zhu, Fuzhen Zhuang, Xu Zhang, Leyu Lin, and Qing He. 2024. Personalized Prompt for Sequential Recommendation. IEEE Transactions on Knowledge and Data Engineering (2024). [41] Chaojun Xiao, Ruobing Xie, Yuan Yao, Zhiyuan Liu, Maosong Sun, Xu Zhang, and Leyu Lin. 2021. Uprec: User-aware pre-training for recommender systems. arXiv preprint arXiv:2102.10989 (2021). [42] Lanling Xu, Junjie Zhang, Bingqian Li, Jinpeng Wang, Mingchen Cai, Wayne Xin Zhao, and Ji-Rong Wen. 2024. Prompting Large Language Models for Recommender Systems: A Comprehensive Framework and Empirical Analysis. arXiv preprint arXiv:2401.04997 (2024). [43] Zixuan Yi, Iadh Ounis, and Craig Macdonald. 2023. Contrastive graph prompttuning for cross-domain recommendation. ACM Transactions on Information Systems 42, 2 (2023), 1-28. [44] Jianyang Zhai, Xiawu Zheng, Chang-Dong Wang, Hui Li, and Yonghong Tian. 2023. Knowledge Prompt-tuning for Sequential Recommendation. In Proceedings of the 31st ACM International Conference on Multimedia . 6451-6461. [45] Yin Zhang, Derek Zhiyuan Cheng, Tiansheng Yao, Xinyang Yi, Lichan Hong, and Ed H Chi. 2021. A model of two tales: Dual transfer learning framework for improved long-tail item recommendation. In Proceedings of the web conference 2021 . 2220-2231. [46] Yin Zhang, Ruoxi Wang, Derek Zhiyuan Cheng, Tiansheng Yao, Xinyang Yi, Lichan Hong, James Caverlee, and Ed H Chi. 2023. Empowering Long-tail Item Prompt Tuning for Item Cold-start Recommendation Recommendation through Cross Decoupling Network (CDN). In Proceedings of the 29th ACM SIGKDD Conference on Knowledge Discovery and Data Mining . 5608-5617. [47] Yongchun Zhu, Ruobing Xie, Fuzhen Zhuang, Kaikai Ge, Ying Sun, Xu Zhang, Leyu Lin, and Juan Cao. 2021. Learning to warm up cold item embeddings for cold- start recommendation with meta scaling and shifting networks. In Proceedings of the 44th International ACM SIGIR Conference on Research and Development in Information Retrieval . 1167-1176."}

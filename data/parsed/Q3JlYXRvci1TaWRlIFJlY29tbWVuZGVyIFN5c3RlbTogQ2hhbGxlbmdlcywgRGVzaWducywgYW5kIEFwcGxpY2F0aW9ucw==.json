{
  "Creator-Side Recommender System: Challenges, Designs, and Applications": "Xiaoshuang Chen ‚àó Kuaishou Technology Beijing, China chenxiaoshuang@kuaishou.com Yibo Wang ‚àó Kuaishou Technology Beijing, China wangyibo10@kuaishou.com Yao Wang ‚àó Kuaishou Technology Beijing, China wangyiyan@kuaishou.com Husheng Liu Kuaishou Technology Beijing, China liuhusheng@kuaishou.com Kaiqiao Zhan Kuaishou Technology Beijing, China zhankaiqiao@kuaishou.com Kun Gai Unaffiliated Beijing, China gai.kun@qq.com",
  "Abstract": "",
  "Keywords": "Users and creators are two crucial components of recommender systems. Typical recommender systems focus on the user side, providing the most suitable items based on each user's request. In such scenarios, a few items receive a majority of exposures, while many items receive very few. This imbalance leads to poorer experiences and decreased activity among the creators receiving less feedback, harming the recommender system in the long term. To this end, we develop a creator-side recommender system, called DualRec , to answer the following question: How to find the most suitable users for each item to enhance the creators' experience? We show that typical user-side recommendation algorithms, such as retrieval and ranking algorithms, can be adapted into the creator-side versions with just a few modifications. This greatly simplifies algorithm design in DualRec. Moreover, we discuss a unique challenge in DualRec: the user availability issue, which is not present in userside recommender systems. To tackle this issue, we incorporate a user availability calculation (UAC) module to effectively enhance DualRec's performance. DualRec has already been implemented in Kwai, a short video recommendation system with over 100 million users and over 10 million creators, significantly improving the experience for creators.",
  "CCS Concepts": "",
  "¬∑ Information systems ‚Üí Recommender systems .": "‚àó These authors contributed equally to this research. ‚Ä† Corresponding author. Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than the author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from permissions@acm.org. WWWCompanion '25, April 28-May 2, 2025, Sydney, NSW, Australia ¬© 2025 Copyright held by the owner/author(s). Publication rights licensed to ACM. ACM ISBN 979-8-4007-1331-6/2025/04 https://doi.org/10.1145/3701716.3715215 Recommender System, Creator Experience, Cold Start",
  "ACMReference Format:": "Xiaoshuang Chen, Yibo Wang, Yao Wang, Husheng Liu, Kaiqiao Zhan, Ben Wang, and Kun Gai. 2025. Creator-Side Recommender System: Challenges, Designs, and Applications. In Companion Proceedings of the ACM Web Conference 2025 (WWW Companion '25), April 28-May 2, 2025, Sydney, NSW, Australia. ACM, New York, NY, USA, 9 pages. https://doi.org/10.1145/ 3701716.3715215",
  "1 Introduction": "Recommender systems are widely employed in areas such as short video platforms [16, 20], search engines [8, 14, 15], and E-commerce [5, 11, 21, 25] to connect users with relevant content. Typically, these systems aim to provide the most relevant items for each user request to enhance user satisfaction. We refer to these systems as userside recommender systems . User-side recommendations often result in a limited number of items receiving significant exposure, while many creators and their content remain unseen by consumers. Receiving fewer exposures and less feedback typically results in poorer experiences and decreased activity among creators. Recently, there has been a growing body of literature on dispatching long-tail items, such as Google's cold start system [18], FairRec [12], and others [22-24, 26]. These approaches create more opportunities for underexposed items, but they still prioritize user satisfaction when distributing these underexposed items. In a realworld recommender system, users and content creators respond differently to various types of feedback. For instance, in Kwai, a short video platform, a user's watch time on a video is crucial for reflecting user satisfaction; however, this watch time is not visible to the video's creator and, therefore, cannot impact the creator's satisfaction. In contrast, creators tend to feel more satisfied when they receive likes and comments on their videos. As shown in Figure 1, interactions such as likes and comments received by creators have a significant positive incentive effect on their content creation. This disparity between user and creator satisfaction presents challenges for recommender systems to consider the creator experience. Ben Wang ‚Ä† Kuaishou Technology Beijing, China wangben@kuaishou.com WWWCompanion '25, April 28-May 2, 2025, Sydney, NSW, Australia Xiaoshuang Chen et al. Table 1: Comparisons between user-side and creator-side recommender systems. Figure 1: Impacts of Engagement on Future Post Probability. Y = 0.8 0.8 0.6 0.6 1 1 0.4 0.0 0.0 1000 2000 3000 100 200 300 exposure count like count comment count To this end, this paper discusses the development of a creatorside recommender system aimed at finding the most appropriate users for each item to enhance creator satisfaction . This creator-side recommender system is called DualRec , where 'dual' signifies its correspondence with user-side recommender systems. DualRec is a mirror system to user-side recommender systems, with all concepts from the user-side recommender system having corresponding concepts in DualRec. Table 1 presents a comparison between user-side recommender systems and DualRec. We first demonstrate that there are many similarities between traditional user-side recommender systems and DualRec. Specifically, a typical user-side recommender system, illustrated in Figure 2(a), consists of multiple retrieval modules that generate candidate item sets, along with a ranking module that predicts user feedback on the items for final recommendations. Similarly, DualRec, as shown in Figure 2(b), also includes retrieval and ranking modules. Furthermore, we illustrate that typical algorithms used in traditional user-side recommender systems can be adapted into their corresponding creator-side versions with just a few modifications. This feature ensures the compatibility of DualRec with user-side recommendation systems, allowing research related to the latter to be directly applied to the creator-side recommendation system. We then demonstrate that, unlike user-side recommender systems, creator-side recommender systems face the user availability issue . In user-side recommender systems, when we want to recommend an item for a user request, we can generally find the item as long as it hasn't been deleted by the author. However, in creatorside recommendation systems, when we seek to identify suitable users for an item, there is no guarantee that the users will receive it. On one hand, users may simply not visit the platform. For instance, the number of daily active users is about 30% of the total user base on the Kwai platform. On the other hand, there are no constraints on the number of items assigned to the same user, and this allows for many items to be allocated to one user, which contrasts with the reality that a single user cannot consume too many items. To address this issue, we introduce a user availability calculation(UAC) module to calculate and maintain available users and use UAC to guide the creator-side recommendations, as shown in Figure 2(c). In summary, our contributions are as follows: ¬∑ We introduce a novel creator-side recommender system called DualRec, designed to find the most appropriate users for each item to enhance creator satisfaction, which cannot be covered by traditional user-side recommender systems. ¬∑ We discuss the detailed implementation of DualRec, and show that existing user-side recommendation algorithms can be mirrored to the creator-side version with a few changes, which simplifies the implementation of DualRec. ¬∑ We address the user availability issue, a unique challenge in creator-side recommendation systems, and introduce UAC to overcome this challenge. ¬∑ We implement DualRec on the Kwai platform, showing that DualRec significantly enhances the creator experience.",
  "2 Problem Formulation": "Before introducing the creator-side recommendation, we first formally discuss the user-side recommendation. Denote the user set as U and the item set as C . When a user ùë¢ ‚àà U sends a request to the system, the user-side recommender system returns ùêæ items to the user from the item set C , aiming to enhance user satisfaction. We denote the user-side recommendation process as follows:  where C ùë¢ is the returned item set with a size of ùêæ , and R ùëà represents an abstract model of the user-side recommendation process. Typically, the recommender system must provide real-time recommendations from a large item set C for each user request. Hence, the implementation of R ùëà involves a complex infrastructure that includes retrieval and ranking modules, as shown in Figure 2(a). The creator-side recommendation is a mirror problem of the userside recommendation. Given an item ùëñ ‚àà C uploaded by a certain creator, the creator-side recommender system dispatches it to ùêø users from the user set C , aiming to enhance creator satisfaction. Like Eq. (1), we write the creator-side recommendation process as:  where U ùëñ is the target user set with size ùêø for Item ùëñ , and R ùê∂ is an abstract representation of the creator-side recommendation. We aim to discuss the specific structure of R ùê∂ , and there exist two kinds of problems: ¬∑ What components are needed in the creator-side recommender system? What are the similarities and differences of these components between the user-side recommendation system and the creator-side recommendation system? ¬∑ How to address the user availability issue ? In other words, how can we ensure that the system returns users who can actually consume the item, meaning these users will visit the platform and will not be overwhelmed by too many items? Creator-Side Recommender System: Challenges, Designs, and Applications WWWCompanion '25, April 28-May 2, 2025, Sydney, NSW, Australia User Request Item Multiple Set ‚Ç¨ Retrievals Ranking Cu Recommending Cu to User u (a) User-Side Recommendation Figure 2: The DualRec Framework. Creator-Side User Availabilty ~Side Recommendation Calculation Recommendation User Activity User Request Item Prediction Ru Retrieval Available User Store IDul < Q Ranking Ranking Result Cache Du {i:u ‚Ç¨ U} Recommending Cu to User u Complete DualRec System User - Item User Multiple Sct U Retrievals Ranking Dispatch Item Basic DualRec System Totackle these issues, we propose a novel DualRec system. Specifically, we introduce a basic version of DualRec in Section 3 to tackle the first issue. Then, we discuss the solution to the user availability issue and introduce the complete DualRec system in Section 4.",
  "3 DualRec: Mirror of User-Side Recommenders": "This section presents the basic DualRec system in Figure 2(b), which is a mirror of the user-side recommendation. We discuss the implementation of the retrieval and ranking processes, showing that user-side recommendation algorithms can be easily adapted into their corresponding creator-side versions with a few modifications.",
  "3.1 System Overview": "We first discuss a typical user-side recommender system consisting of retrieval and ranking modules, as shown in Figure 2(a). Specifically, the retrieval module employs multiple lightweight algorithms to extract a small set of candidate items from the item set C , while the ranking module makes more precise predictions regarding user feedback on these items to select the final items. The DualRec framework, illustrated in Figure 2(b), mirrors the user-side recommender system. It includes creator-side retrieval and ranking modules. When a new item ùëñ is uploaded by a creator, the creator-side retrieval module finds candidate users from the user set U , and the creator-side ranking module then selects the final user set U ùëñ from the candidate user set from the retrieval module based on more accurate predictions to enhance creator satisfaction. Our fundamental idea of the algorithm design in DualRec is to treat users and items as two symmetrical components of the recommendation system. By interchanging users and items in the user-side recommendation algorithms, we can derive the corresponding creator-side versions. We are now prepared to present a detailed implementation of the retrieval and ranking modules.",
  "3.2 Retrieval": "Typical user-side retrievals include similarity-based retrievals [1, 6, 17], and model-based retrievals[4, 9, 10]. Here we discuss the corresponding creator-side versions of these retrievals. 3.2.1 Similarity-Based Retrievals. Similarity-based retrievals attempt to provide recommendations to users/items based on similar users or items. We first discuss the similarity-based retrieval algorithms in user-side recommender systems. Specifically, a similarity calculation algorithm calculates the similarity among users or items. Typical similarity calculation algorithms include the collaborativefiltering-based algorithms [6, 13] and graph-based algorithms [1, 3, 7, 17]. Then, similarity services are built to find similar users/items of a certain user/item. There are two kinds of similarity services, i.e., the user similarity service, denoted by ùëÜ ùëà , and the item similarity service, denoted by ùëÜ ùêº . Based on the similarity service, there are also two kinds of similarity-based retrievals in the user-side recommender systems, namely the user-side user-similarity-based retrieval (Figure 3(a), denoted by ùë¢ 2 ùë¢ 2 ùëñ ) and the user-side itemsimilarity-based retrieval (Figure 3(b), denoted by ùë¢ 2 ùëñ 2 ùëñ ). When a user request ùë¢ comes, the ùë¢ 2 ùë¢ 2 ùëñ calls the user similarity service to find similar users ùëÜ ùëà ( ùë¢ ) and then retrieves the previous interacted items of the users in ùëÜ ùëà ( ùë¢ ) . Formally we have:  where ùêª ùëà ( ùë¢ ‚Ä≤ ) is the previous positively interacted items of the user ùë¢ ‚Ä≤ . In contrast, the ùë¢ 2 ùëñ 2 ùëñ calls the item similarity service to find similar items of User ùë¢ 's previous interacted items:  By simply exchanging all the concepts of users and items in the user-side similarity-based retrievals, we obtain the corresponding creator-side similarity-based retrievals. Specifically, the creator-side similarity-based retrievals can be classified into the creator-side item-similarity-based retrievals ùëñ 2 ùëñ 2 ùë¢ , which is the mirrored version of ùë¢ 2 ùë¢ 2 ùëñ , and the creator-side user-similarity-based retrievals ùëñ 2 ùë¢ 2 ùë¢ , which is the mirrored version of ùë¢ 2 ùëñ 2 ùëñ . We write the two kinds of retrievals as  where ùêª ùêº ( ùëñ ) is the previous positively interacted users of the item ùëñ . The ùëñ 2 ùëñ 2 ùë¢ and ùëñ 2 ùë¢ 2 ùë¢ algorithms are shown in Figure 3(c) and (d). The similarity calculation algorithms and the similarity services are crucial to the performance of similarity-based retrievals, and a key finding here is that the similarity calculation algorithms in user-side similarity-based retrievals can be directly applied to the Xiaoshuang Chen et al. WWWCompanion '25, April 28-May 2, 2025, Sydney, NSW, Australia Figure 3: Similarity-based retrievals: (a) ùë¢ 2 ùë¢ 2 ùëñ ; (b) ùë¢ 2 ùëñ 2 ùëñ ; (c) ùëñ 2 ùëñ 2 ùë¢ ; (d) ùëñ 2 ùë¢ 2 ùë¢ . User u ‚Ç¨ U User u ‚Ç¨ U Similar Users Historical Interacted Items SU (u) HU Historical Interacted Items Similar Items s'(i) User Similarity Item Similarity Service Service Item Item Similar Items Historical Intcracted Uscrs S' (i) Historical Interacted Users Similar Users H'(i') S\" (u) i2uZu HU(u') Uves creator-side similarity-based retrievals. Specifically, by comparing the creator-side similarity-based retrieval in Eq. (5) with the userside similarity-based retrieval in Eq. (3)(4), we find that the user similarity service ùëÜ ùëà in ùëñ 2 ùë¢ 2 ùë¢ is the same as the similarity service used in ùë¢ 2 ùë¢ 2 ùëñ , and the similarity service ùëÜ ùêº in the ùëñ 2 ùëñ 2 ùë¢ is the same as that used in ùë¢ 2 ùëñ 2 ùëñ . Therefore, there is no need to train extra models for creator-side similarity-based retrievals. 3.2.2 Model-Based Retrievals. Here we discuss the most popular model-based retrieval, i.e., the two-tower model retrieval. The twotower model retrieval contains a user tower, which outputs the user embedding ùíÜ ùë¢ , and an item tower, which outputs the item embedding ùíÜ ùëñ , and regards the inner product of the user and item embeddings as the logit. Formally we have  where ùëì ùëà and ùëì ùêº are the user tower and the item tower, respectively. ùíô ùë¢ and ùíô ùëñ are the user features and the item features, respectively. In the training process, the ùëôùëúùëîùëñùë°ùë† are supervised by the users' feedback on the items, as shown in Figure 4(a). In the inference process of the user-side two-tower model retrieval, an offline index builder traverses all items ùëñ ‚àà C , computing the item embedding ùíÜ ùëñ , and then builds an approximated nearest neighbor (ANN) service [19]. When a user ùë¢ sends a request, the user embedding ùíÜ ùë¢ is calculated online, and the ùíÜ ùë¢ is used to search the most relevant items from the ANN server, as shown in Figure 4(b):  The ANN service makes it possible to retrieve C ùë°ùë§ùëú -ùë°ùëúùë§ùëíùëü ùë¢ from a very large candidate set C in a low latency, which is necessary for the two-tower model retrieval. The creator-side two-tower retrieval is also the mirrored version of the user-side two-tower retrieval. According to Eq. (6), the users and the items are symmetric in the two-tower model, which means the training process of the creator-side two-tower model can be Figure 4: Two-tower model retrieval Items Online: User u User Request Offline: Item Build Index Set ‚Ç¨ ANN Index Concat Concat User-Side Inference Top users Online: Item User u Item Item Request Training Offline: User User Build Index Set U ANN Index Creator-Side Infcrence Top Item the same as the user-side two-tower model in Figure 4(a). However, the inference processes of user-side and creator-side two-tower retrievals are different. We must build an ANN index according to the embeddings ùíÜ ùë¢ of all the users. Then, when an item request comes, the retrieval algorithm returns the most relevant users from the ANN server, as shown in Figure 4(c):  Therefore, by replacing the item ANN index with the user ANN index, we derive the creator-side two-tower retrieval algorithm.",
  "3.3 Ranking": "The ranking module receives the candidate set from the retrieval module and then determines the final output of the recommendation process. The ranking module contains two components, i.e., the prediction module and the decision module. The prediction module uses deep models to predict the user's multiple feedback, e.g., the watch time, likes, shares, etc. on the items. Then, the decision module uses these predictions to determine the final outputs. Formally, assume there are ùëÄ types of feedback to be considered, and denote the ùëö -th prediction score of User ùë¢ and Item ùëñ as ùë† ùëö ùë¢ùëñ . Then, the prediction module generates the predictions ùë† ùëö ùë¢ùëñ , and the decision module calculates the integrated score as:  where ùõº ùëö is the coefficient of the prediction of the ùëö -th feedback. Then the user-side ranking module returns the topùêæ items according to the integrated score ùëì ùë¢ùëñ . The creator-side ranking module has the same structure as the user-side ranking module except for two detailed settings. First, the model structures of the prediction models are different because DualRec focuses more on the model performance on each item, especially the long-tail items lacking training samples. Second, the ranking coefficient of each prediction usually differs between the creator-side and user-side recommender systems. 3.3.1 Prediction Models. Typical prediction models are subject to popularity bias. They fail to provide accurate predictions on long-tail items which making up a significant proportion of the WWWCompanion '25, April 28-May 2, 2025, Sydney, NSW, Australia Creator-Side Recommender System: Challenges, Designs, and Applications Figure 5: The structure of the prediction model. Loss Augmented Loss Label Top Augmented Top Embedding Embedding Share Model Model Historical Similar Other Drop Item Id Items Interacted Features Item Id Users creator-side recommender system. To address this, we make the following changes to the prediction model, as shown in Figure 5: (1) We augment the training sample by dropping the item ID feature, and train the model with both the original sample and the augmented sample to force the model to extract information from side features other than the item IDs. (2) We add more item-side features, such as the users who have recently interacted with the item and the information on similar items according to video understanding models. We will discuss the impact of these changes in the experiments. 3.3.2 Score Integration. We use the following formula:  There are two differences between Eq. (9) and Eq. (2). First, there is a bias term ùúÉ ùë¢ , which means different users have different values in DualRec. This is because we find that different users' feedback usually leads to different future exposures, and then leads to different creator satisfaction. Second, the coefficients of the users' explicit interactions on items, e.g., likes and comments, are more important in DualRec than in user-side recommendations because the items' creators can receive these interactions and interact with the users. In contrast, the coefficients of the watch time are less important because the creators cannot sense the watch time of users.",
  "4 Tackling the User Availability Issue": "We have discussed the retrieval and ranking algorithms of DualRec. However, a key difference between the creator-side recommendation and the user-side recommendation is the user availability issue as discussed in Section 2. We discuss the solution to this issue, and provide the complete DualRec framework, as shown in Figure 2(c).",
  "4.1 The Complete DualRec Framework": "The key motivation is to maintain an available user set e U as a subset of the total user set U . We define the available users as those who will visit the platform in an acceptable period (one day in our platform) and have not been dispatched with too many items. Then, the DualRec system finds target users in the available user set for each item and then updates the available user set to prepare for the next item request. With the available user set, the recommendation results of DualRec can get rid of the user availability problem. Formally, we define some notations: ¬∑ The user activity state ùëé ùë¢ ‚àà { 0 , 1 } : ùëé ùë¢ = 1 means the user will visit the platform within an acceptable period, and vice versa. ¬∑ The user matching set D ùë¢ : the set of items which have been matched to the user ùë¢ . Formally we have:  Then, the available user set e U can be defined as:  where ùëÑ is the maximum number of items the user can consume. Although different users can consume different numbers of items, we set ùëÑ as a constant number for simplicity. Based on these notations, we provide the complete DualRec framework, as depicted in Figure 2(c). The complete DualRec contains a UAC module, a basic DualRec module discussed in Section 3, a result cache, and a combined recommendation module. The UAC module consists of a user activity prediction module, which predicts the user's future activity ùëé ùë¢ , and an available user store, which maintains the available user set e U according to Eq. (12). Based on the available user set, the basic DualRec continuously recommends users to each item, and the results U ùëñ is used to update the result cache and the available user store. Users with enough matched items in D ùë¢ will be eliminated from the available user set e U . Finally, the combined recommendation module combines the items in the match set D ùë¢ and the user-side recommendation results when User ùë¢ visits the platform. The detailed algorithm is provided in Algorithm 1.",
  "Algorithm 1 The Algorithm of Complete DualRec": "1: Input: the user set U , the item set C . 2: Output: the target user set U ùëñ for each item ùëñ ‚àà C . 3:",
  "4: Initialize": "5: for each user ùë¢ in U do 6: The user activity prediction module predicts the user's future activity ùëé ùë¢ . 7: end for 8: The UAC the available user set e U as e U = { ùë¢ ‚àà U : ùëé ùë¢ = 1 } . 9:",
  "10: Creator-side recommendation": "11: for each item ùëñ ‚àà C do 12: Abasic DualRec algorithm runs the recommendation process in the available user set e U : U ùëñ = R ùêº GLYPH<16> ùëñ, e ùëà,ùêø GLYPH<17> 13: Update the user matching set for ùë¢ ‚àà U ùëñ : D ùë¢ ‚ÜêD ùë¢ ‚à™ { ùëñ } , and then store the updated D ùë¢ in the result cache. 14: We update the available user set e ùëà according to the updated D ùë¢ and Eq. (12). 15: end for The proposed framework can effectively solve the user availability issue. Firstly, the user activity prediction module chooses the users who are more likely to visit the platform. Secondly, the rule of WWWCompanion '25, April 28-May 2, 2025, Sydney, NSW, Australia Xiaoshuang Chen et al. the available user set e U in Eq. (12) eliminates the users who have been dispatched with enough items. In the next subsection, we will discuss the detailed implementation of these modules.",
  "4.2 Detailed Implementation": "4.2.1 User Activity Prediction. We train an XGBoost model[2] to estimate each user's daily activity according to the user's previous activity. The input features include the user's previous activity in the last 30 days, the day of the week, the user's accumulated interaction with the platform, and the output score is the probability that the user will visit the platform on the next day. We run the user activity prediction module daily, which traverses all the users ùë¢ ‚àà U , and predicts the users' activity ùëé ùë¢ in the next day. 4.2.2 Updating the available user set e ùëà . We use an available user store to maintain the available user set e U . When an item ùëñ is uploaded by its creator, the DualRec system returns the user set U ùëñ for the item ùëñ . Then, we update the user matching sets of the users in U ùëñ by adding the item ùëñ , i.e.,  Then, if |D ùë¢ | ‚â• ùëÑ , which means the user ùë¢ has been matched with enough items, we eliminate User ùë¢ from the available user set e U . 4.2.3 Combined Recommendation. DualRec is crucial to improve the creators' experience, but it usually cannot replace the user-side recommendation because the users' experience is also very important. We use a combined recommendation module to integrate the creator-side and user-side recommendations. Specifically, the output of the creator-side recommender system is first put into a result cache, which stores the user matching set D ùë¢ defined in Eq. (11). Then, when User ùë¢ visits the platform, a user-side recommendation process will be performed, of which the cached user matching set D ùë¢ is one of the retrieval algorithms. Therefore, D ùë¢ and items from other retrievals are compared in the user-side ranking module. To ensure the exposures of items in D ùë¢ , we add an extra value of these candidate items on their integrated scores ùëì ùë¢ùëñ according to the item-side integrated score ùëî ùë¢ùëñ , i.e.  where ùúÜ is the boosting coefficient. Such a setting increases the probability of the item-side recommendation results being returned to User ùë¢ , which ensures the performance of DualRec.",
  "5 Live Experiments": "We implement DualRec in Kwai, a short video platform with over 100 million users and over 10 million creators. Creators upload over 4 million videos daily. We aim to answer the following questions: ¬∑ Q1 : How to design an experimental framework to measure the impact of different strategies on creator satisfaction? ¬∑ Q2 : Does DualRec improve the creator satisfaction? ¬∑ Q3 : How does the proposed UAC module in Section 4 solve the user availability issue? ¬∑ Q4 : What are the influences of different components in Sections 3 on the performance of DualRec? Figure 6: User diverted vs. User-Creator co-diverted User diverted experiment User-Creator co-diverted experiment User base User exp User base User exp trcatment Creator pool-1 Creator pool-2 Creator base Creator exp",
  "5.1 Experiment Design (Q1)": "5.1.1 User-Creator Co-Diverted A/B Testing. In traditional A/B testing, we typically use a user-diverted setup, as shown in Figure 6(a), where users are randomly assigned to either the control or experimental groups and receive corresponding recommendations from the entire creator pool. This allows for comparing user metrics, such as click-through rate (CTR) and dwell time, between the two groups, measuring the treatment effect from the user's perspective. However, since both groups share the same creators, the user-diverted setup cannot effectively assess any treatment effects on the creators due to treatment leakage. For example, an item exposed in the experiment may also appear in the control group. To address this issue, we adopt a user-creator co-diverted A/B testing setup (as shown in Figure 6(b)), similar to the approach in [18]. In this setup, we first assign a proportion of creators to the control group and a separate, non-overlapping set of creators to the treatment group. Users are then proportionally assigned to the different groups, ensuring that users in the control group receive items only from the control creators, while users in the treatment group receive items only from the treatment creators. The user-creator co-diverted A/B Testing enables us to measure the treatment effect from the creator's perspective. 5.1.2 Implementation Details. The DualRec system is requested when a new item is uploaded by a certain creator and returns 200 users for each item. We allocate 2% of the exposures for DualRec outputs while maintaining the others from the user-side recommendation to balance user and creator satisfaction. We iteratively implement all the methods discussed in Sections 3 and 4: ¬∑ DualRec-v1 : A Complete DualRec system with necessary parts, i.e., a two-tower retrieval, a ranking module without the modifications discusses in 3.3.1, a UAC module, and a combined recommendation module, as shown in Figure 2(c). In the two-tower-model-based retrieval, the positive samples are the users who have positive feedback, e.g. likes and comments, to the items, while the negative samples are randomly sampled from the user set ùë¢ ‚àà e U . In the ranking module, we also adopt the two-tower model as a backbone. We predict the users' likes, comments, follows, shares, profile visits, and effective views on the items, and the integrated score is a weighted summation of these prediction scores. We set ùëÑ = 10 for the UAC in Figure 2(c). ¬∑ DualRec-v2 : Applying the modifications in Section 3.3.1 to the ranking models. Creator-Side Recommender System: Challenges, Designs, and Applications WWWCompanion '25, April 28-May 2, 2025, Sydney, NSW, Australia ¬∑ DualRec-v3 : Adding a content-based similarity ùëñ 2 ùëñ 2 ùë¢ retrieval to the DualRec system. Specifically, a content understanding algorithm outputs an embedding with dimension 128 to calculate the similarity between two items. ¬∑ DualRec-v4 : Adding a ùëñ 2 ùë¢ 2 ùë¢ retrieval based on a pre-trained user similarity model to the DualRec system. ¬∑ DualRec-v5 : Modifying the score integration in the ranking module of DualRec with skills in Section 3.3.2. Introduce a user bias ùúÉ ùë¢ , which is the user's average interaction rate. 5.1.3 Baseline. The baseline before launching DualRec-v1 is a traditional user-side recommender system with extra strategies on new items with few exposures. The idea of these strategies is similar to FairRec[12], which gives priority to items with fewer exposures. Specifically, there are extra retrievals, which only return new items with few exposures to each user request. Moreover, there is a boosting process in the ranking module, i.e., the scores of new items will be larger than the scores of old items when all predictions are the same. We denote this baseline as Base . Then we iteratively launched DualRec-v1 to DualRec-v5 , and each algorithm takes the previous version as the baseline. 5.1.4 Metrics. According to the setting of user-creator co-diverted A/B testing, there are two kinds of metrics, i.e., the user-side metrics and the creator-side metrics. The user-side metrics measure user satisfaction, including daily active users and users' daily accumulated watch time. It is out of this paper's scope to enhance user satisfaction, and these user-side metrics are regarded as constraints of the DualRec system. All of the experiments in this section do not decrease the user satisfaction measured by these metrics, and we will not list the user-side metrics for simplicity. For the creator-side metrics, the core metric is the total Daily Active Creator (DAC), i.e. the number of creators who upload at least one item in one day. However, The increase in DAC is difficult to observe in a single experiment because it usually takes a considerable amount of time for the creators' activity levels to rise gradually. Therefore, we also consider a more sensitive metric positively related to the DAC, i.e. the number of the creators' new items reaching ùê∏ exposures, denoted by ExpoReachùê∏ , where ùê∏ is set to different values, namely 1K/5K/10K, where the 'K' means 'kilo'. Note that DualRec only dispatches 200 users to each item, which is much smaller than ùê∏ ; therefore, an increase of ExpoReachùê∏ means that the user-side recommender system also discovers these items better than the baselines because of the initial exposure provided by DualRec. In other words, ExpoReach can measure the exploration effect. An improvement in the ExpoReach metric means that the creators' new items receive more exposure and feedback, which improves the creator's satisfaction. We measure the improvement of ExpoReach in each single experiment and measure the improvement of DAC in a long-term integrated experiment.",
  "5.2 Performance of DualRec (Q2)": "We conduct each experiment for 7 days. Table 2 displays the performance gain of each experiment compared to the previous baseline, with a confidence level greater than 0.95, indicating an improvement in each version. Additionally, we carry out a 21-day experiment to demonstrate the performance gain of the final DualRec algorithm Table 2: Performance of DualRec on ExpoReach. 3.00% 2.00% 1.00% ; 0.00% 10 15 20 Date Figure 7: Performance gain of DAC over the baseline. over the baseline, as measured by DAC, as shown in Figure 7. The DAC gradually improves, reaching a 2.9% increase by the end of the experimental period. It is shown that every 1% increase in ExpoReach corresponds to a 0.13% increase in DAC, indicating that ExpoReach serves as a good proxy metric. We also compare the coverage of new items in user-side and creator-side recommendations in Figure 8, where the coverage is defined as the ratio of the number of retrieved items to the total number of new items. This comparison includes i) user-side retrieval with the candidate set restricted to low-exposure new items, ii) the creator-side two-tower model without UAC, and iii) the creator-side two-tower model with UAC. The results show that user-side retrievals exhibit low coverage of new items, even when the candidate set is restricted to these new items. This is due to the tendency of user-side retrievals to select a small proportion of items to enhance user satisfaction. In contrast, creator-side retrievals demonstrate high coverage. Moreover, all of these experiments enhance the ExpoReach metric. It is important to note that DualRec only matches 200 users for each item, indicating that the increase in future exposure of these items is due to user-side recommendations. This phenomenon is particularly interesting, as DualRec increases the likelihood of these items being discovered by user-side recommender systems.",
  "5.3 Impacts of UAC Module (Q3)": "The UAC module has been implemented in all versions of DualRec because online improvements cannot be achieved without it. We first discuss the impact of the user activity prediction module, as reflected by the hit rate of matched users returned by the DualRec system. We compare the hit rates with and without the user activity prediction module. When the user activity prediction module is eliminated, DualRec finds users for each item from the entire user set U rather than from the predicted active user set ùë¢ ‚àà U : ùëé ùë¢ = 1. The hit rate is defined as the ratio of matched users who actually WWWCompanion '25, April 28-May 2, 2025, Sydney, NSW, Australia Xiaoshuang Chen et al. Figure 8: New item coverage of Different Retrievals. 100% 82.3% 80% 60% 41.7% 409 209 13.6% Side UAC Tower Tower Two- Two- Tower Side User - Creator- Side Creator- Figure 9: Distribution of user matching set size with and without user availability store. le7 2.5 without user availability store with user availability store 2.0 1.5 1.0 0.5 1-50 250 Size of User Matching Set come in the following day. The hit rate without the user activity prediction module is only 49%, while the inclusion of the user activity prediction module raises the hit rate to 82%, significantly enhancing the effectiveness of the returned user set U ùëñ . Then, we discuss the impact of the user availability store. Figure 9 shows the distribution of the user matching set size |D ùë¢ | with and without the user availability store. Without the user availability store, a small number of users are matched with over 50 items (actually, some receive over 10000 items), exceeding their capacity to watch them, while many users are matched with no items at all. Under this situation, most items cannot be distributed to the users assigned to them, which would prevent DualRec from effectively enhancing creator satisfaction. In contrast, the user availability store ensures that the majority of users are matched with an acceptable number of items, significantly improving matching efficiency.",
  "5.4 Impacts of Creator-Side Algorithms (Q4)": "We also test the effectiveness of each part in the DualRec system, as shown in the different versions of DualRec in Table 2. 5.4.1 Retrieval Algorithms. The initial DualRec-v1/v2 includes only the two-tower retrieval, whereas DualRec-v3 and DualRec-v4 introduce the ùëñ 2 ùëñ 2 ùë¢ and ùëñ 2 ùë¢ 2 ùë¢ retrievals, respectively. The ùëñ 2 ùëñ 2 ùë¢ retrieval improves the ExpoReach-10K by 4.8%, while the ùëñ 2 ùë¢ 2 ùë¢ retrieval only increases it by 0.78%. This difference is due to the ùëñ 2 ùëñ 2 ùë¢ retrieval capturing video understanding information through the Table 3: Exposure ratio of different retrievals Table 4: Offline Results of the Model Changes, where SA denotes sample augmentation, and EF denotes extra features. item-similarity calculation module, which is crucial for items with few exposures. In contrast, ùëñ 2 ùë¢ 2 ùë¢ incorporates user similarity,but user similarities are generally less accurate than item similarities, leading to a lower exposure ratio. Table 3 presents the exposure ratios for these retrieval methods in the final DualRec system. It shows that the exposure ratios for the two-tower retrieval and the ùëñ 2 ùëñ 2 ùë¢ retrieval are significantly higher than that of the ùëñ 2 ùë¢ 2 ùë¢ retrieval, consistent with the gains of these retrieval methods. 5.4.2 Ranking Algorithms. We evaluate the impact of the changes discussed in Section 3.3.1 on the prediction model, specifically the sample augmentation (denoted by SA) and the additional features (denoted by EF). Table 4 presents the area under the ROC curve (AUC) for different methods, with 'with SA, with EF' representing the model used in our online experiment. The results indicate that both SA and EF enhance the model's performance. Furthermore, Table 2 shows that DualRec-v2, which incorporates SA and EF in the prediction model, performs significantly better than DualRecv1, which lacks these modifications. The experimental results also demonstrate the effectiveness of the proposed techniques. 5.4.3 Score Integration. DualRec-v5 incorporates modifications to the score integration process discussed in Section 3.3.2. Specifically, wedefine ùúÉ ùë¢ as the average interaction rate of user ùë¢ , which appears in the denominator of the integration formula. As a result, the new integration score applies a penalty to users with a high bias. This modification aims to identify users who are genuinely interested in the item, allowing the recommender system to better understand the target users for this item in the future, leading to more accurate recommendations. This adjustment increases the liking rate of items in the experimental groups by 0.78% and the following rate by 1.472% while also significantly enhancing the ExpoReach.",
  "6 Conclusion": "This paper introduces a novel creator-side recommender system called DualRec to find the most appropriate users for each item to improve creator satisfaction. We show that the algorithms in traditional user-side recommender systems, including the retrieval algorithms and the ranking algorithms, can be easily translated into the creator-side version with a few changes. Moreover, we discuss the user availability issue in DualRec and introduce UAC to tackle this challenge. We implement DualRec in Kwai, a short video platform with over 100 million users and over 10 million creators, significantly improving creator satisfaction. Creator-Side Recommender System: Challenges, Designs, and Applications WWWCompanion '25, April 28-May 2, 2025, Sydney, NSW, Australia",
  "References": "[1] Jianxin Chang, Chen Gao, Yu Zheng, Yiqun Hui, Yanan Niu, Yang Song, Depeng Jin, and Yong Li. 2021. Sequential recommendation with graph neural networks. In Proceedings of the 44th international ACM SIGIR conference on research and development in information retrieval . 378-387. [2] Tianqi Chen and Carlos Guestrin. 2016. Xgboost: A scalable tree boosting system. In Proceedings of the 22nd acm sigkdd international conference on knowledge discovery and data mining . 785-794. [3] Marco De Nadai, Francesco Fabbri, Paul Gigioli, Alice Wang, Ang Li, Fabrizio Silvestri, Laura Kim, Shawn Lin, Vladan Radosavljevic, Sandeep Ghael, David Nyhan, Hugues Bouchard, Mounia Lalmas, and Andreas Damianou. 2024. Personalized Audiobook Recommendations at Spotify Through Graph Neural Networks. In Companion Proceedings of the ACM Web Conference 2024 (Singapore, Singapore) (WWW'24) . Association for Computing Machinery, New York, NY, USA, 403-412. https://doi.org/10.1145/3589335.3648339 [4] Chantat Eksombatchai, Pranav Jindal, Jerry Zitao Liu, Yuchen Liu, Rahul Sharma, Charles Sugnet, Mark Ulrich, and Jure Leskovec. 2018. Pixie: A System for Recommending 3+ Billion Items to 200+ Million Users in Real-Time. In Proceedings of the 2018 World Wide Web Conference (Lyon, France) (WWW '18) . International World Wide Web Conferences Steering Committee, Republic and Canton of Geneva, CHE, 1775-1784. https://doi.org/10.1145/3178876.3186183 [5] Yulong Gu, Zhuoye Ding, Shuaiqiang Wang, and Dawei Yin. 2020. Hierarchical user profiling for e-commerce recommender systems. In Proceedings of the 13th International Conference on Web Search and Data Mining . 223-231. [6] Xiangnan He, Lizi Liao, Hanwang Zhang, Liqiang Nie, Xia Hu, and Tat-Seng Chua. 2017. Neural collaborative filtering. In Proceedings of the 26th international conference on world wide web . 173-182. [7] Hengchang Hu, Wei Guo, Xu Liu, Yong Liu, Ruiming Tang, Rui Zhang, and Min-Yen Kan. 2024. User Behavior Enriched Temporal Knowledge Graphs for Sequential Recommendation. In Proceedings of the 17th ACM International Conference on Web Search and Data Mining (Merida, Mexico) (WSDM '24) . Association for Computing Machinery, New York, NY, USA, 266-275. https: //doi.org/10.1145/3616855.3635762 [8] Jui-Ting Huang, Ashish Sharma, Shuying Sun, Li Xia, David Zhang, Philip Pronin, Janani Padmanabhan, Giuseppe Ottaviano, and Linjun Yang. 2020. Embeddingbased retrieval in facebook search. In Proceedings of the 26th ACM SIGKDD International Conference on Knowledge Discovery & Data Mining . 2553-2561. [9] Po-Sen Huang, Xiaodong He, Jianfeng Gao, Li Deng, Alex Acero, and Larry Heck. 2013. Learning deep structured semantic models for web search using clickthrough data. In Proceedings of the 22nd ACM international conference on Information & Knowledge Management . 2333-2338. [10] Hyeyoung Ko, Suyeon Lee, Yoonseo Park, and Anna Choi. 2022. A Survey of Recommendation Systems: Recommendation Models, Techniques, and Application Fields. Electronics 11, 1 (2022). https://doi.org/10.3390/electronics11010141 [11] Greg Linden, Brent Smith, and Jeremy York. 200 3. Amazon. com recommendations: Item-to-item collaborative filtering. IEEE Internet computing 7, 1 (200 3), 76-80. [12] Gourab K Patro, Arpita Biswas, Niloy Ganguly, Krishna P Gummadi, and Abhijnan Chakraborty. 2020. Fairrec: Two-sided fairness for personalized recommendations in two-sided platforms. In Proceedings of the web conference 2020 . 1194-1204. [13] Badrul Sarwar, George Karypis, Joseph Konstan, and John Riedl. 2001. Itembased collaborative filtering recommendation algorithms. In Proceedings of the 10th International Conference on World Wide Web (Hong Kong, Hong Kong) (WWW'01) . Association for Computing Machinery, New York, NY, USA, 285-295. https://doi.org/10.1145/371920.372071 [14] Teng Shi, Zihua Si, Jun Xu, Xiao Zhang, Xiaoxue Zang, Kai Zheng, Dewei Leng, Yanan Niu, and Yang Song. 2024. UniSAR: Modeling User Transition Behaviors between Search and Recommendation. In Proceedings of the 47th International ACM SIGIR Conference on Research and Development in Information Retrieval (Washington DC, USA) (SIGIR '24) . Association for Computing Machinery, New York, NY, USA, 1029-1039. https://doi.org/10.1145/3626772.3657811 [15] Zihua Si, Zhongxiang Sun, Xiao Zhang, Jun Xu, Xiaoxue Zang, Yang Song, Kun Gai, and Ji-Rong Wen. 2023. When Search Meets Recommendation: Learning Disentangled Search Representation for Recommendation. In Proceedings of the 46th International ACM SIGIR Conference on Research and Development in Information Retrieval (Taipei, Taiwan) (SIGIR '23) . Association for Computing Machinery, New York, NY, USA, 1313-1323. https://doi.org/10.1145/3539618.3591786 [16] Linpeng Tang, Qi Huang, Amit Puntambekar, Ymir Vigfusson, Wyatt Lloyd, and Kai Li. 2017. Popularity prediction of facebook videos for higher quality streaming. In 2017 USENIX Annual Technical Conference (USENIX ATC 17) . 111-123. [17] Jizhe Wang, Pipei Huang, Huan Zhao, Zhibo Zhang, Binqiang Zhao, and Dik Lun Lee. 2018. Billion-scale commodity embedding for e-commerce recommendation in alibaba. In Proceedings of the 24th ACM SIGKDD international conference on knowledge discovery & data mining . 839-848. [18] Jianling Wang, Haokai Lu, Sai Zhang, Bart Locanthi, Haoting Wang, Dylan Greaves, Benjamin Lipshitz, Sriraj Badam, Ed H. Chi, Cristos J. Goodrow, Su-Lin Wu, Lexi Baugher, and Minmin Chen. 2023. Fresh Content Needs More Attention: Multi-funnel Fresh Content Recommendation. In Proceedings of the 29th ACM SIGKDD Conference on Knowledge Discovery and Data Mining (Long Beach, CA, USA) (KDD '23) . 5082-5091. [19] Patrick Wieschollek, Oliver Wang, Alexander Sorkine-Hornung, and Hendrik Lensch. 2016. Efficient large-scale approximate nearest neighbor search on the gpu. In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition . 2027-2035. [20] Siqi Wu, Marian-Andrei Rizoiu, and Lexing Xie. 2018. Beyond views: Measuring and predicting engagement in online videos. In Proceedings of the International AAAI Conference on Web and Social Media , Vol. 12. [21] Zhibo Xiao, Luwei Yang, Tao Zhang, Wen Jiang, Wei Ning, and Yujiu Yang. 2024. Deep Evolutional Instant Interest Network for CTR Prediction in Trigger-Induced Recommendation. In Proceedings of the 17th ACM International Conference on Web Search and Data Mining (Merida, Mexico) (WSDM '24) . Association for Computing Machinery, New York, NY, USA, 846-854. https://doi.org/10.1145/ 3616855.3635829 [22] Zheng Yuan, Fajie Yuan, Yu Song, Youhua Li, Junchen Fu, Fei Yang, Yunzhu Pan, and Yongxin Ni. 2023. Where to go next for recommender systems? idvs. modality-based recommender models revisited. In Proceedings of the 46th International ACM SIGIR Conference on Research and Development in Information Retrieval . 2639-2649. [23] Yin Zhang, Derek Zhiyuan Cheng, Tiansheng Yao, Xinyang Yi, Lichan Hong, and Ed H Chi. 2021. A model of two tales: Dual transfer learning framework for improved long-tail item recommendation. In Proceedings of the web conference 2021 . 2220-2231. [24] Yin Zhang, Ruoxi Wang, Derek Zhiyuan Cheng, Tiansheng Yao, Xinyang Yi, Lichan Hong, James Caverlee, and Ed H Chi. 2023. Empowering Long-tail Item Recommendation through Cross Decoupling Network (CDN). In Proceedings of the 29th ACM SIGKDD Conference on Knowledge Discovery and Data Mining . 5608-5617. [25] Guorui Zhou, Xiaoqiang Zhu, Chenru Song, Ying Fan, Han Zhu, Xiao Ma, Yanghui Yan, Junqi Jin, Han Li, and Kun Gai. 2018. Deep interest network for click-through rate prediction. In Proceedings of the 24th ACM SIGKDD international conference on knowledge discovery & data mining . 1059-1068. [26] Ziwei Zhu, Jingu Kim, Trung Nguyen, Aish Fenton, and James Caverlee. 2021. Fairness among new items in cold start recommender systems. In Proceedings of the 44th international ACM SIGIR conference on research and development in information retrieval . 767-776.",
  "keywords_parsed": [
    "Users and creators are two crucial components of recommender systems. Typical recommender systems focus on the user side",
    " providing the most suitable items based on each user's request. In such scenarios",
    " a few items receive a majority of exposures",
    " while many items receive very few. This imbalance leads to poorer experiences and decreased activity among the creators receiving less feedback",
    " harming the recommender system in the long term. To this end",
    " we develop a creator-side recommender system",
    " called DualRec ",
    " to answer the following question: How to find the most suitable users for each item to enhance the creators' experience? We show that typical user-side recommendation algorithms",
    " such as retrieval and ranking algorithms",
    " can be adapted into the creator-side versions with just a few modifications. This greatly simplifies algorithm design in DualRec. Moreover",
    " we discuss a unique challenge in DualRec: the user availability issue",
    " which is not present in userside recommender systems. To tackle this issue",
    " we incorporate a user availability calculation (UAC) module to effectively enhance DualRec's performance. DualRec has already been implemented in Kwai",
    " a short video recommendation system with over 100 million users and over 10 million creators",
    " significantly improving the experience for creators."
  ]
}
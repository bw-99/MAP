{
  "WannaLaugh: A Configurable Ransomware Emulator": "Learning to Mimic Malicious Storage Traces DIONYSIOS DIAMANTOPOULOS, IBM Research Europe, Switzerland ROMAN PLETKA, IBM Research Europe, Switzerland SLAVISA SARAFIJANOVIC, IBM Research Europe, Switzerland A.L. NARASIMHA REDDY, Department of Electrical and Computer Engineering, Texas A&M University, College Station, USA HARIS POZIDIS, IBM Research Europe, Switzerland Ransomware, a fearsome and rapidly evolving cybersecurity threat, continues to inflict severe consequences on individuals and organizations worldwide. Traditional detection methods, reliant on static signatures and application behavioral patterns, are challenged by the dynamic nature of these threats. This paper introduces three primary contributions to address this challenge. First, we introduce a ransomware emulator. This tool is designed to safely mimic ransomware attacks without causing actual harm or spreading malware, making it a unique solution for studying ransomware behavior. Second, we demonstrate how we use this emulator to create storage I/O traces. These traces are then utilized to train machine-learning models. Our results show that these models are effective in detecting ransomware, highlighting the practical application of our emulator in developing responsible cybersecurity tools. Third, we show how our emulator can be used to mimic the I/O behavior of existing ransomware thereby enabling safe trace collection. Both the emulator and its application represent significant steps forward in ransomware detection in the era of machine-learning-driven cybersecurity. CCS Concepts: · Security and privacy → Malware and its mitigation ; Software security engineering ; · Computing methodologies → Simulation tools ; · Applied computing → Data recovery ; · Social and professional topics → Malware / spyware crime. Additional Key Words and Phrases: Ransomware, simulator, storage",
  "ACMReference Format:": "Dionysios Diamantopoulos, Roman Pletka, Slavisa Sarafijanovic, A.L. Narasimha Reddy, and Haris Pozidis. 2024. WannaLaugh: A Configurable Ransomware Emulator: Learning to Mimic Malicious Storage Traces. 1, 1 (June 2024), 22 pages. https://doi.org/XXXXXXX.XXXXXXX",
  "1 INTRODUCTION": "In today's cybersecurity landscape, ransomware stands as one of the most potent threats, capable of disrupting businesses and holding sensitive data hostage [1]. Traditional detection methods, based on static signatures and known patterns, struggle to adapt to the rapidly evolving tactics of cybercriminals. While monitoring file accesses, operating system activities or network traffic helps to reduce risks from cyberattacks [2], these measures may not be enough as hackers gain internal access through social engineering techniques. As new strains of ransomware continue to emerge, Authors' addresses: Dionysios Diamantopoulos, did@zurich.ibm.com, IBM Research Europe, Säumerstrasse 4, Rüschlikon, Zurich, Switzerland, 8803; Roman Pletka, rap@zurich.ibm.com, IBM Research Europe, Säumerstrasse 4, Rüschlikon, Zurich, Switzerland, 8803; Slavisa Sarafijanovic, sla@zurich.ibm.com, IBM Research Europe, Säumerstrasse 4, Rüschlikon, Zurich, Switzerland, 8803; A.L. Narasimha Reddy, reddy@ece.tamu.edu, Department of Electrical and Computer Engineering, Texas A&M University, College Station, Texas, USA, TX 77843; Haris Pozidis, hap@zurich.ibm.com, IBM Research Europe, Säumerstrasse 4, Rüschlikon, Zurich, Switzerland, 8803. 2024. XXXX-XXXX/2024/6-ART $15.00 https://doi.org/XXXXXXX.XXXXXXX , Vol. 1, No. 1, Article . Publication date: June 2024. 2 Fig. 1. Life-cycle of Ransomware and positioning of WannaLaugh emulator as a use-case enabler. User Encryption Software Decryption Software Negotiate Ransom Software Feature extraction from storage IO traces to train ML model Ransomware Benign Social engineering to infect user's PC WannaLaugh Emulator Use-case Configurable en/de-cryption design space it is crucial to devise innovative solutions to combat these threats. More advanced device-level behavioral fingerprinting using kernel events to detect anomalous patterns [3, 4] can be leveraged, a combination of various strategies combining OS, file-system, network, and storage information holistically is typically the most successful to efficiently address the risks. Ransomware operates by encrypting files on a storage medium, e.g., Solid State Drive (SSD), often undetected until a ransom demand is delivered. Despite the fact that ransomware attacks stored data, their detection within storage systems has barely been studied. Nevertheless, the process leaves a unique footprint in the form of Input/Output (IO) operations - the \"ransomware workload\". Rudimentary work has shown that the IO operations reveal a distinct pattern that diverges significantly from non-malicious IO traces when observed [5]. This distinctiveness arises due to the characteristic of aggressive file encryption, which leads to extensive modifications to storage data, as well as the specific access patterns that are not typical in benign workloads. We believe that computational storage devices (CSD) can be leveraged to extract feature information at line speed without impact on the host IO performance [6]. Extending ransomware detection to storage systems has many advantages: (1) data extraction can be performed in parallel using a large number of CSDs, (2) the feature extraction and inference can be executed directly in the storage system stack, and (3) all these tasks can be executed without impacting the host IO traffic. At the same time, periodic snapshots in storage systems can be leveraged to mitigate an ongoing attack at low overhead. Specifically, our paper's primary focus and contribution is to utilize these unique behavioral differences to create IO traces for training machine learning (ML) models capable of detecting ransomware attacks. Our contributions are: · We introduce a state-of-the-art, highly configurable ransomware emulator designed to mimic the activity of real ransomware, without causing harm or spreading contagiously. · The ransomware emulator can be tailored by a wide range of configurations, allowing users to adjust its behavior to closely resemble popular ransomware strains or create entirely new traces that represent potential future threats. · We provide an efficient algorithm to mimic existing ransomware behavior or foresee and emulate potential future malicious behaviors with our emulator and evaluate its performance to facilitate the development of appropriate countermeasures. , Vol. 1, No. 1, Article . Publication date: June 2024. WannaLaugh: A Configurable Ransomware Emulator 3 Our novel ransomware emulator provides numerous advantages over traditional research methods. Generating realistic, synthetic ransomware traces in a non-destructive manner, enables the collection of valuable data without exposing systems to genuine threats. Its flexibility empowers security researchers to develop ML models that are better equipped to tackle both, known and emerging ransomware variants. The emulator can also be deployed in real-world scenarios for online ML training, as it is non-malicious and allows for the decryption of encrypted data. Furthermore, the emulator's ethical and non-harmful nature ensures its responsible use in both research and real-world environments. The WannaLaugh emulator, unlike a simulator, meticulously replicates ransomware behavior in realistic setups while maintaining non-malicious characteristics. This distinction enables the emulator to provide a comprehensive and accurate representation of ransomware activity, ensuring a secure research environment. WannaLaugh is designed with ethical considerations in mind and cannot be used for malicious purposes. It lacks the ability to exploit vulnerabilities or deliver dropping code, which prevents it from being contagious or spreading additional malware. Instead, WannaLaugh focuses solely on emulating encryption behavior, ensuring that it remains a safe tool for security research with no risk to systems or users. In this article, we explore the inner workings of this ransomware emulator, examine its wide-ranging applications, and discuss the implications for ransomware detection in the future.",
  "2 RELATED WORK": "",
  "2.1 Background and Motivation": "Understanding ransomware and benign workloads: Our work relies on a foundational understanding of what constitutes ransomware and benign workloads. A ransomware workload refers to the specific pattern of activity exhibited by ransomware as it seeks to encrypt files on a system undetected. This behavior results in a distinctive IO trace that differs significantly from normal or 'benign' workloads. A 'benign' workload, in our context, is the inverse of a ransomware workload. It includes a broad spectrum of typical user and application activities and system operations. Ransomware detection techniques: To gain the benefits of a safe ransomware emulator for generating IO traces, it is essential to understand state-of-the-art ransomware detection techniques. Researchers have proposed various detection techniques, including signature-based, behavior-based, and ML-based approaches [2, 7-13]. While signature-based methods can detect known strains, they fail against new variants. Behavior-based detection offers adaptability but can suffer from false positives and may not effectively counter advanced obfuscation [14, 15]. The rise of ML/AI in ransomware detection: Consequently, researchers have turned to ML and artificial intelligence (AI) [16-20] and started exploring the opportunity to design ML models from storage traces [5, 21]. Analyzing disk IO traces offers several advantages, such as capturing highly indicative features correlated with ransomware activity and maintaining robustness against code obfuscation. The importance of ransomware emulation: Developing storage-based ML ransomware detection techniques requires realistic data that closely resembles benign workloads and actual ransomware behavior. Standard IO techniques, such as synthetic workload generators or replaying captured IO traces, could potentially serve this purpose. However, they inherently lack the flexibility and dynamism needed to simulate the rapidly evolving ransomware threats. Synthetic workload generators, for example, often rely on a limited set of predefined patterns and may not fully capture the intricacy and randomness of real-world ransomware behavior. Similarly, replaying captured IO traces could , Vol. 1, No. 1, Article . Publication date: June 2024. 4 limit the model's exposure to a fixed set of ransomware techniques, potentially making it ill-prepared for new and emerging ransomware strains. Hence, in the face of these limitations, a ransomware emulator becomes a valuable tool. It can generate IO traces that realistically mimic real ransomware, doing so in a secure environment that allays ethical, compliance, and practical concerns associated with using actual ransomware. WannaLaugh, our safe and highly configurable ransomware emulator, aims to address these challenges. By allowing researchers to delve into various ransomware encryption techniques, it offers the potential to develop and validate ML models, evaluate their performance and robustness against advanced evasion, and explore novel features and indicators to enhance detection accuracy. By emulating a wide spectrum of ransomware behaviors, including potential future threats, WannaLaugh can significantly accelerate research in ML-based ransomware detection, leading to more effective defense strategies against this pervasive threat.",
  "2.2 The landscape of ransomware simulation tools": "The evolving landscape of ransomware in recent years has spurred the development of various simulation tools, reflecting the growing complexity and diversity of ransomware attacks. These tools, both open-source and commercial, shown in Table 1, offer unique insights into ransomware behavior, yet vary significantly in their depth and applicability. Table 1. Comparison of various ransomware simulator/emulator tools In the realm of commercial ransomware simulators, such as KnowBe4's RanSim [30], carbonsec [28], and spin.ai [29], the primary concern lies in their 'black box' nature. These tools, while potentially useful for practical applications, are often opaque in their operation. This lack of transparency not only poses challenges for academic research, where understanding the underlying mechanisms is crucial but also raises questions for enterprises about the exact functionalities being executed within their systems. For instance, KnowBe4's RanSim [30] uses 23 fixed penetration testing scenarios (21 ransomware and 2 benign) but includes potentially dangerous practices, such as injecting code into legitimate processes. In addition, it provides only a very small set of test files. The proprietary nature of these types of tools limits the scope for customization and detailed analysis, making them ineligible for research and a nuanced understanding of ransomware tactics. In the open-source ecosystem, existing simulators come with notable variations in capabilities. Tools like GonnaCry [25] and Lawndoc/RanSim [26] have made valuable contributions, offering basic encryption functionalities and implementation-specific features. GonnaCry, for instance, addresses Linux-based ransomware simulation only. However, its limitations (e.g., deprecated PyCrypto library, compatibility issues with recent Python versions, and support for text files , Vol. 1, No. 1, Article . Publication date: June 2024. WannaLaugh: A Configurable Ransomware Emulator 5 only) and no controllable options, would have required a complete rewrite of the code. Tools like Lawndoc/RanSim [26], QuickBuck [22], leomatias [22], PSRansom [24] provide a simple approach to file encryption and decryption and, while effective in their implementation of AES-CBC-256 encryption, are limited in their encryption algorithm diversity. They predominantly focus on a single encryption method and are tailored to the Windows OS. This lack of variety in encryption strategies restricts their utility in simulating the wide array of ransomware attacks seen in the real world. As such, these tools lack the comprehensive features necessary for simulating the full spectrum of ransomware behavior. In contrast, WannaLaugh represents a significant advancement in ransomware simulation. Its support for a wide array of AES encryption key lengths (128, 192, 256) and eleven AES modes, along with streaming ciphers like SALSA20 and CHACHA20, places it at the forefront of ransomware research tools. The encryption capabilities are further augmented with specialized capabilities such as configurable intermittent encryption, a frequently used technique in some ransomware that utilizes partial encryption to improve efficiency and better evade detection. Additionally, the broad multi-operating system support of WannaLaugh, encompassing Windows, Linux, and MacOS, along with its distribution under the Apache v2 license, further solidifies its standing as an ideal tool for research. The Apache v2 license not only ensures transparency but also encourages community engagement, allowing researchers, developers, and cybersecurity professionals to study, understand, and extend the tool's capabilities. This feature set, together with Wannalaugh's configurability over the entire encryption process, which is discussed in the following section, starkly contrasts with the more limited functionalities of existing open-source tools.",
  "3 RANSOMWARE EMULATOR DESIGN": "The effectiveness of a ransomware emulator hinges on its ability to accurately replicate the complete ransomware lifecycle. Following this concept, WannaLaugh consists of three fundamental components: the encryptor, the decryptor, and the server, which manages ransom negotiations. Many ransomware variants employ unique encryption patterns, making it imperative that our emulator not only encrypts data but also demonstrates the capability to decrypt it accurately. This ensures that we have a valid and comprehensive emulation of the encryption-decryption process as it occurs in real-world scenarios. Without this, the emulator would fall short in providing a reliable platform for researchers to study the full spectrum of ransomware behavior, including potential recovery methods post-encryption. Regarding the inclusion of the server component, it's important to consider the broader implications for cybersecurity research. The server's role extends beyond simple ransom negotiation; it offers the capability to simulate various response strategies and negotiation handshakes. This feature is particularly valuable for generating network traces, which can be used by researchers focusing on network anomaly detection as a means to identify ransomware attacks. Although this aspect of the server is not the primary focus of our current research, we recognize its significance and potential applications. Therefore, we included this component to allow the community to further explore and develop tools for network-based ransomware detection. Furthermore, another crucial reason for incorporating the server component in our tool is to potentially emulate Command and Control (C2) setups for emerging ransomware variants that include data exfiltration techniques. This emerging trend in ransomware attacks involves not only encrypting the victim's data but also exfiltrating sensitive information to a server controlled by attackers. Before initiating the encryption process, these advanced ransomware strains may send valuable data to a server. By including a server that accepts these exfiltrated files, our tool can simulate this sophisticated attack architecture, providing a comprehensive emulation of modern ransomware tactics. While , Vol. 1, No. 1, Article . Publication date: June 2024. 6 data exfiltration is not the primary focus of this paper, its inclusion in the server component significantly enhances the tool's capability to emulate these advanced ransomware strategies. This addition allows researchers and cybersecurity professionals to test and develop defensive techniques against ransomware that not only encrypts but also steals data, representing a more severe threat to organizations.",
  "3.1 Configurable design space": "When developing WannaLaugh, we have carefully analyzed the file IO patterns exhibited by six real ransomware strains, namely Sodinokibi [31], BlackBasta [32], Lockbit [33], Lockfile [34], WannaCry [35], and Conti [36]. This comprehensive study of actual ransomware behavior has driven the design of the configurable options in the emulator. By incorporating feedback from observed file IO patterns, WannaLaugh aims at replicating the characteristics of real ransomware, allowing researchers to generate realistic disk IO traces that closely resemble those from genuine ransomware. How accurately WannaLaugh manages to do that, is shown later in our analysis at Subsection 5.3.1. This data-driven approach enables WannaLaugh to provide the flexibility needed for exploring not only existing ransomware variants but also future threats. By altering the parameters of our emulator, we can further generate entirely new IO traces that represent hypothetical ransomware variants. These new traces are valuable for \"stress-testing\" existing ransomware detection techniques and encouraging the development of more robust, generalizable techniques capable of detecting unseen ransomware types. By doing so, we ensure that our approach is not limited to generating features about existing ransomware but can also contribute to the defense preparation against future, unknown threats. Below we provide an explanation of the configurable options and their significance in the design and implementation of WannaLaugh. 3.1.1 Workload type. WannaLaugh offers a comprehensive suite of workload types, categorized into three main areas: \"Ransomware\", \"Benign\", and \"Mixed\". These categories are designed to cover a broad spectrum of IO patterns, thereby enabling WannaLaugh to generate a diverse range of traces for in-depth ransomware research and simulation. Ransomware Workloads: Detailed later in this subsection, the ransomware workload category in WannaLaugh is equipped with extensive design options. This category is meticulously crafted to emulate various ransomware behaviors, allowing researchers to study a wide array of ransomware attack patterns. Benign Workloads: In benign mode, WannaLaugh emulates a rich array of non-malicious workload types, categorized into three distinct groups: file conversions, Filebench workloads [37], and compression workloads . File Conversions: This category encompasses a range of everyday file operations and format conversions, vital for establishing a \"benign\" baseline. Included conversions cover a wide spectrum, such as pdf-to-doc, ps-to-pdf, doc-to-pdf, xlsx-to-csv, json-to-csv, txt-to-docx, html-to-pdf, png-tojpeg, jpg-to-png, gif-to-bmp, and gz-to-zip. These activities mirror typical user behavior, generating IO traces that reflect a foundation of common, non-malicious operations. Filebench Workloads: The integration of Filebench, a versatile file system benchmark tool, into WannaLaugh adds a new dimension to the benign mode. It is integrated as an external tool due to its C-based codebase. WannaLaugh provides parameters to control the number of files, their sizes, and the number of threads for different Filebench workloads (called personas in Filebench terminology), such as OLTP (Online Transaction Processing), web server, file server, video server, web proxy, and mail server. Recognizing that default Filebench data (random or zero-populated) , Vol. 1, No. 1, Article . Publication date: June 2024. WannaLaugh: A Configurable Ransomware Emulator 7 may not accurately represent realistic IO patterns - especially when entropy-related information is extracted, we have modified Filebench to utilize user-provided data. This allows, for example, the video server persona to serve specific files from a video corpus, thereby generating more authentic IO traces. Compression Workloads: For compression tasks, WannaLaugh supports several algorithms and archive programs, all of which are integrated directly into the Python codebase, eliminating the need for external tools. This category includes ZIP, LZMA, BZ2, GZ, 7z, Zstd, and LZ4. Unique to this workload is the ability to control the number of threads, the compression level (when supported by the algorithm), and the number of files per archive output. This feature offers significant flexibility and precision in simulating various compression scenarios. Mixed Workloads: The mixed mode in WannaLaugh allows for a combination of ransomware and benign activities, based on a user-defined mixing rate. This mode is particularly valuable as it provides a more realistic representation of typical use cases, wherein the user's workload is running in parallel with an active ransomware infection. By incorporating the mixed mode, researchers can gain deeper insights into the complex interplay between malicious and non-malicious activities, ultimately enhancing the robustness of their detection models. 3.1.2 Directory Selection and File Ordering. The emulator allows choosing one or more target directories, enabling to focus on particular sets of files. Further, it provides various file ordering options (i.e., by name, modification time, creation time, file size, or, randomly). This flexibility allows users to simulate ransomware that employs different strategies for selecting and encrypting target files. WannaLaugh also supports filtering files by extensions or wildcards, to customize which files will be encrypted and which ones will be skipped. This feature helps to simulate ransomware that targets specific file types or employs more complex selection patterns (e.g., skipping OS-specific files like .𝑠𝑜, .𝑑𝑙𝑙, .𝑒𝑥𝑒, .𝑚𝑠𝑖 , etc.). 3.1.3 Encryption Algorithms and Methods. Ransomware can use different encryption methods, such as symmetric, client asymmetric, server asymmetric, or a hybrid approach. Symmetric encryption is a fast encryption method, but it is vulnerable to decryption by researchers because the keys used for encryption and decryption are stored on disk in an unencrypted form. Client asymmetric encryption is a slow process that requires an internet connection for the ransomware to communicate with the server. The ransomware generates a pair of RSA keys, encrypts the files with the public key, and sends the private key to the server. Server asymmetric encryption is a scheme where the server generates a key pair, and the public key is hardcoded on the ransomware. Each file is encrypted with the server's public key, and only the server's private key can recover the files. However, the server would need to send the private key to the client for decryption, which is impractical and insecure. To address this, the most widely used technique by ransomware is implemented in WannaLaugh and uses a combination of symmetric and asymmetric encryption. First, it generates an asymmetric key pair, encrypting its private key with the server's public key, and then it encrypts the files using a symmetric encryption algorithm such as AES. All symmetric keys are encrypted with the generated public key. This approach is fast and requires no Internet connection for the targeted system. The encryption capabilities of WannaLaugh are expanded to cover most of the commonly used algorithms. Building upon this, WannaLaugh supports AES with different key lengths: 128, 192, and 256 bits. Complementary it uniquely offers eleven modes of AES encryption, each providing varied operational characteristics. These modes are 1) CBC (Cipher Block Chaining), 2) ECB (Electronic Codebook), 3) GCM (Galois/Counter Mode), 4) CTR (Counter), 5) CFB (Cipher Feedback), 6) OFB (Output Feedback), 7) CCM (Counter with CBC-MAC), 8) EAX (Authenticated Encryption with , Vol. 1, No. 1, Article . Publication date: June 2024. 8 Associated Data), 9) OCB (Offset Codebook), 10) CTS (Cipher Text Stealing), and 11) XTS (XEXbased Tweaked CodeBook with CipherText Stealing). This selection of modes, encompassing a broad spectrum of cryptographic functionalities, allows for varied configurations of tags and nonces, significantly influencing the I/O traces generated during encryption. This almost exhaustive selection of modes offers a distinct advantage over other tools that predominantly rely on a single mode, such as AES-CBC-256. Furthermore, WannaLaugh also supports advanced streaming ciphers such as SALSA20 and CHACHA20, which are increasingly utilized in modern ransomware encryption scenarios. These streaming ciphers are especially efficient for partial encryption strategies, as they result in an encrypted output size identical to the original, without the need for additional elements like nonce or tags. Also, WannaLaugh supports a custom SHUFFLE algorithm that randomly swaps segments, instead of encrypting the file. 3.1.4 Encryption Content Methods. The emulator allows one to choose among a diverse range of encryption methods. First, it can encrypt the entire content of a file, mirroring the common approach employed in many real-world ransomware attacks. In addition, the emulator caters to more targeted encryption strategies including highly configurable intermittent encryption methods. It allows for encrypting only the first or last bytes of a file, aligning with ransomware that partially encrypts files to speed up the process while still rendering the files unusable. Furthermore, WannaLaugh offers a unique segment-based encryption method. This mode provides the flexibility to encrypt specific segments of a file, determined by user-defined parameters for the size of the segments to encrypt and the size of the segments to skip. Such methods are employed by recent ransomware to evade detection or to reduce encryption time. 3.1.5 Encryption Write Methods. The emulator provides three distinct methods for writing encrypted files: (1) overwriting the original file, (2) shredding the original and then copying the encrypted data to a new file, or (3) copying the encrypted data to a new file and then shredding the original. These options allow the exploration of the impact of different ransomware writing methods correlated to different block-level IO patterns on detection and response strategies. 3.1.6 Delay Modes and Timeouts. To simulate different encryption speeds and time intervals, WannaLaugh supports three delay modes: no delay, static delay, and random delay. Users can also define a range of dynamic delays between file encryption, the number of files to encrypt continuously before a delay, or a timeout that allows users to specify a time limit for the encryption process. Upon a timeout, the current file is skipped, simulating the ransomware behavior of evading detection by limiting its activity within a certain time range. 3.1.7 Custom File Extensions. WannaLaugh enables users to define a custom file extension for encrypted files, allowing them to resemble the behavior of specific ransomware strains, or create new variants that use unique file extensions. 3.1.8 Multi-threaded File Encryption using Ray. A significant performance optimization we introduced to the WannaLaugh ransomware emulator is multi-threaded encryption. This was motivated by the observation that many real-world servers possess a substantial amount of hardware-level parallelism, which could be exploited by ransomware to significantly accelerate their encryption process. We achieved this enhancement by integrating Ray [38], a high-performance distributed execution framework, into our ransomware emulator. Ray was specifically selected due to its data layout for zero-copy serialization (Apache Arrow), in-memory object store (Plasma), and its proficiency at bypassing the Global Interpreter Lock (GIL) problem prevalent in Python. These characteristics facilitate efficient file encryption with , Vol. 1, No. 1, Article . Publication date: June 2024. WannaLaugh: A Configurable Ransomware Emulator 9 zero-copy operations, significantly reducing the I/O overhead during the encryption process. We have implemented user-configurable thread settings for the encryption process. Users can specify the desired number of threads to utilize, allowing them to simulate different levels of system resource exploitation by ransomware. For more dynamic emulation, WannaLaugh also offers an automatic core adjustment feature. With this, the emulator can continually monitor and adjust the number of cores it utilizes during runtime, aiming to keep the system load under a user-specified percentage. This capability is particularly valuable for emulating sophisticated ransomware that deliberately moderates its resource usage to evade detection by users or security software.",
  "3.2 Implementation Aspects": "3.2.1 Code-base. WannaLaugh is developed in Python3, ensuring cross-platform compatibility and ease of use. For encryption/decryption, it relies on the Cryptodome package [39]. All three components, the encryptor, the decryptor, and the ransom negotiation server, support loggers to track detailed run-time or debug information. It also provides users with two convenient usage modes. For those preferring a direct approach, the emulator can be seamlessly operated through Python when installed. This method is ideal for users who wish to engage with the emulator in a more hands-on, script-based environment. This mode can also be used by developers who wish to directly use the API of WannaLaugh into their source code. Alternatively, users can leverage the PyInstaller package to generate standalone binaries. This approach simplifies deployment across various platforms, eliminating the need for installing multiple libraries or managing several files. With just a single executable file, WannaLaugh can be effectively utilized on Windows, Linux, and macOS systems, significantly enhancing its accessibility and ease of use. 3.2.2 Graphical User Interface (GUI). Furthermore, the inclusion of a user-friendly GUI is a deliberate design choice to enhance the accessibility and usability of WannaLaugh. A GUI allows researchers and users to interact with the emulator more intuitively, avoiding the complexities and limitations of command-line interfaces. This interactivity is vital for facilitating a broader range of experiments and for allowing users with varying levels of technical expertise to engage effectively with the emulator. In the context of ransomware detection and analysis, the GUI provides a practical and efficient way to configure, control, and observe the emulator's behavior, thus contributing signifi- Fig. 2. WannaLaugh's interactive GUI. WannaLaugh Ransomware Emulator cantly to the tool's educational and research utility. The GUI of WannaLaugh is developed using QML (Qt Modeling Language) [40], a choice driven by the need for cross-platform compatibility, which is often a challenging aspect for GUIs. By leveraging QML, we ensure that WannaLaugh's user interface is operable and consistent across different operating systems, including Windows, Linux, and macOS. Furthermore, the architecture of WannaLaugh's GUI is meticulously designed to optimize performance. One key aspect of this architecture is the separation of the rendering thread from the emulator's core processing. This separation means that the emulator's operations are not hindered by the GUI; it can run , Vol. 1, No. 1, Article . Publication date: June 2024. 10 independently at its normal performance level. This design decision is crucial for ensuring that the emulator maintains high efficiency and reliability. Additionally, by isolating the GUI in this manner, we mitigate the risk of GUI-related issues impacting the emulator's functionality. In scenarios where the GUI may encounter problems or slowdowns, the emulator itself remains unaffected and continues to operate smoothly.",
  "4 APPLICATION OF WANNALAUGH IN RANSOMWARE DETECTION FROM STORAGE": "Building on the detailed description of the WannaLaugh emulator provided in the previous section, this new section transitions into a practical application of WannaLaugh. Specifically, we demonstrate how such a tool can be useful in advancing ransomware detection methods through machine learning (ML) models. Fig. 3. LBA scatter plot for WannaCry Ransomware. lell 'Benign_and_Wannacry_Sl' LBA scatter plot Unpartitioned Unpartitioned BENIGN Data Reads Writes Recovery Data OS Boot MBR 488 lelo Recovery lel0 OS 1e6 Boot MBR 10 20 30 40 50 Time (min) In this study, we adopt a feature extraction approach based on information derived solely from IO operations inspired by Hirano et al. [5]. They trained three different ML models, with their best-performing model achieving an accuracy of 98%. Their methodology involved collecting I/O traces from storage systems running seven ransomware and five benign workloads using WaybackVisor, a hypervisor situated between the hardware and the operating system. They monitored the traces for several minutes, starting immediately after the workload was initiated. From these traces, they calculated five features over different window sizes (T_window) ranging from one to 25 seconds, with a one-second shift between windows until the end of the trace time was reached. These features included the average normalized Shannon entropy of writes (H_write(t)) and the variance of the logical block address (LBA). The windowed features were then employed to train and evaluate Random Forest, KNN, and SVM models, with the best performance achieved by the Random Forest model using a T_window of 15 seconds [5]. To elucidate the concept of using one of the storage-related metrics, e.g. LBA variance, as a feature for machine learning models in ransomware detection, we present a specific plot in our study. This visualization aims to provide a simplified example of how ransomware activities can be distinguished from benign operations based on IO trace patterns, particularly focusing on the , Vol. 1, No. 1, Article . Publication date: June 2024. WannaLaugh: A Configurable Ransomware Emulator 11 LBA variance. Specifically, Fig. 3 displays a scatter graph with the timeline in minutes of an actual Windows operating system session on the x-axis, while the y-axis represents the LBA. The data points in the plot are color-coded, with blue indicating read operations and orange signifying write operations. This visualization is derived from running a specific ransomware, 'Blackbasta,' on a Windows OS environment. Note that the pattern shown is very specific to this ransomware and the underlying NTFS file system. We have studied many other ransomware samples as well and can confirm the existence of distinguishing typical patterns in other ransomware and file system types. Notably, the LBA space on the y-axis is categorized into several segments: the Master Boot Record (MBR) of the disk, the Boot partition, the OS partition, the Windows Recovery partition, and the Data partition. This categorization helps in understanding the distribution and intensity of read and write operations across different sections of the disk. A key observation from this plot is the distinctive pattern of read and write operations in the Data partition when ransomware is active. There is a discernible trend of intense read and write activities, starting from lower LBAs and extending towards higher LBAs in a nearly linear fashion. This pattern suggests that the ransomware sequentially accesses and encrypts files, which is a crucial insight. In contrast, the OS partition does not exhibit such intense or structured activity. For comparative analysis, a smaller inset picture within the main plot shows a similar graph, but for a benign workload. This includes normal OS activities and browsing activities with 20 tabs of Firefox. The comparison clearly highlights the difference in read-write patterns in the Data partition under benign conditions, where the operations appear more spatially distributed and lack the structure, and sequential pattern observed in the ransomware scenario. Observing the effectiveness of features like LBA variance, as demonstrated in the previous analysis, we recognize the potential of similarly insightful trends in other characteristics such as entropy, read rate, and write rate. These features, effectively employed by Hirano et al. in their machine-learning models, have shown substantial accuracy in ransomware detection. Fig. 4. Overview of our ML flow and data lifetime. Raw I/O data Features ML model Workloads Real Ransomware Real Benign WannaLaugh Ransomware WannaLaugh Benign Collect I/O traces from storage system Extract features Train ML model Heuristic algorithmic loop searching for the WannaLaugh parameters that result in workloads, that their I/O traces mimic the I/O traces from authentic workloads Building on this foundational work, we have extended their approach by not only incorporating similar features but also introducing new tools and techniques tailored to our unique research context. Specifically, we generate traces from six real ransomware samples, one benign workload alongside those from the WannaLaugh emulator, all of them running in a sandboxed virtual machine (VM). Our approach differs from Hirano et al. [5] in that, while they focused on analyzing traces from actual ransomware and benign applications, our research also includes traces generated by the WannaLaugh emulator. This inclusion serves a dual purpose: firstly, it allows us to validate the emulator's efficacy in producing realistic ransomware-like IO patterns; secondly, it aids in developing a comprehensive methodology to ensure these emulator-generated traces align closely with authentic ransomware features. Figure 4 highlights the overview of our ML flow, where , Vol. 1, No. 1, Article . Publication date: June 2024. 12 with blue color we annotate the the differences of this work from [5]. The dashed line shows the exploration mechanism we introduce to find the WannaLaugh parameters that result in workloads, their I/O traces mimic the I/O traces from authentic workloads. This path is further detailed in subsection 4.1. Fig. 5. Test Environment for Feature Extraction. - Log analysis - Feature extraction - ML model training dm-entropy (device mapper kernel module) SSD (collect traces) SSD (store  traces) HDD (OS, RAID1) HDD (OS, RAID1) Host Filesystem systemtap logs Non-Malicious Ransomware WannaLaugh Hypervisor Malicious Ransomware Guest Filesystem Sandbox VM Execution in VM or host (isolated for testing unsafe ransomware strains) (safe execution, avoiding VM overhead) Filesystem (ext4, xfs, ntfs...) The test environment, as depicted in Fig. 5, is based on RHEL 9.1 using the KVM hypervisor. This setup provides the necessary isolation when running potentially malicious code and ensures the integrity of our research. The guest VMs, populated with a subset of the Govdoc1 dataset used as decoy [41], are each assigned a dedicated NVMe SSD. Utilizing the device mapper kernel module dm-entropy we developed, we extract entropy information on writes and implement a SystemTap [42] hook to meticulously track all IO operations on these block devices. The binary logarithm that is needed to calculate the entropy is approximated by using the built-in CPU instruction CLZ which counts the leading zeros, hence resulting in extremely low overhead. From the collected IO traces which include a timestamp and the Shannon entropy of writes, the same features are extracted offline over a given time window as in [5], namely the mean Shannon entropy, the read and write throughput, and the variance of the logical block address (LBA) reads and writes. For simplicity, we used a window size of 2 s with no overlap of windows. The collected traces are then used to train supervised ML models (e.g., Random Forest, XG Boost, and DNN) which we evaluated using 5-fold cross-validation. Fig. 6 shows violin plots that provide a visual representation of the distribution of Shannon entropy and variance of LBA writes of the real ransomware strains and a benign workload performing file conversions. Each violin plot illustrates the probability density of the data at different values, with the width of the plot indicating the density of the data. The plots reveal significant variations among the features within and across individual ransomware strains. WannaLaugh's ability to generate diverse feature shapes on-demand is essential, as it supplies the variation required for ML models to effectively learn distinct ransomware behaviors. , Vol. 1, No. 1, Article . Publication date: June 2024. WannaLaugh: A Configurable Ransomware Emulator 13 Fig. 6. Variation of features for ransomware strains. 0.5 1.0 Average Entropy Writes 1e3 0 1 Variance of LBA Writes 1e16 0 5 Read Throughput (B/s) 1e3 Sodinokibi Blackbasta Lockbit Wannacry Conti Lockfile Benign 0 1 2 Write Throughput (B/s) 1e5",
  "4.1 WannaLaugh Parameter Selection": "The goal of the emulator is to facilitate the development and evaluation of ransomware detection techniques by providing a realistic, yet safe environment for researchers to study file access patterns and encryption behaviors. As already discussed, the WannaLaugh emulator is highly configurable, allowing security researchers to explore a wide range of ransomware behaviors. However, selecting the appropriate configuration options to guide the generation of traces to match specific ransomware is a challenging task, considering the extensive design space. We present an algorithm for selecting WannaLaugh parameters that result in traces either resembling or differing from known ransomware samples to address this issue. The algorithm searches through the design space to guide the selection of configuration options, ultimately generating IO traces that closely resemble or diverge from the target ransomware or workload as desired. We initially employed a random walk (RW) algorithm as a fundamental search strategy to explore the design space by iteratively selecting random configuration options and evaluating their fitness based on the closeness of the generated trace to the target ransomware. Despite its simplicity, the RW algorithm did not converge as rapidly as desired. Consequently, we explored alternative optimization techniques, such as greedy genetic algorithms (GGA) [43], simulated annealing (SA) [44], and the Non-dominated Sorting Genetic Algorithm II (NSGA-II) [45], to guide the search more efficiently. The parameters for these algorithms are shown in Table 2. Upon comparing the performance of these optimization techniques, NSGA-II demonstrated the best convergence, such that the generated traces either resemble known ransomware traces or do not match any of the studied ransomware traces. This dual-purpose approach enables the evaluation of ransomware detection tools by stressing them with new, unknown ransomware samples. NSGA-II in conjunction with an ML classification model effectively optimizes the WannaLaugh parameter configurations. The decision to showcase only the NSGA-II in this study, which is presented in Algorithm 1, stems from its superior convergence characteristics. The algorithm commences by initializing a population of random WannaLaugh parameters, which are then evaluated by generating traces and classifying them using the pre-trained ML model's classification function. The cost function is determined based on the optimization goal, resemblance , Vol. 1, No. 1, Article . Publication date: June 2024. 14 Table 2. Parameters of the selected algorithms or non-resemblance of ransomware traces, and uses the F1 score from classification. The inclusion of the ML classification model within the optimization process ensures the effectiveness of the algorithm in identifying traces that either closely resemble or diverge from known samples. During the iterative process, offspring populations are generated using crossover and mutation operations. These offspring populations are evaluated, combined with the parent populations, and undergo non-dominated sorting and crowding distance calculations. The best solutions, based on rank and crowding distance, are selected for the next iteration. The algorithm continues until the termination condition is met, yielding optimized WannaLaugh parameters that achieve the desired optimization goal.",
  "5 CASE STUDIES AND EXPERIMENTS": "In this section, we present the evaluation results of the multi-threaded encryption feature of WannaLaugh, along with the convergence performance of the four optimization algorithms and the ability of WannaLaugh to mimic traces. , Vol. 1, No. 1, Article . Publication date: June 2024. WannaLaugh: A Configurable Ransomware Emulator 15",
  "5.1 Evaluation of Multi-threaded Encryption": "Given that modern NVMe SSDs offer substantial bandwidth that single-threaded operations cannot fully utilize, it is critical to understand the potential impact of ransomware that leverages hardwarelevel parallelism for file encryption. This could significantly expedite an attack by enabling the ransomware to approach the SSD's bandwidth limits, hence encrypting files orders of magnitude faster. Consequently, we have conducted an evaluation of WannaLaugh's multi-threaded encryption feature to highlight its potential implications. To evaluate the performance of multi-threaded encryption, an experiment was conducted where WannaLaugh was tasked to encrypt the first 60 folders from the Govdoc1 dataset [41] on a Linux server equipped with 40 physical cores (each with 2 threads-per-core). The folders comprised 59,272 files (44.7GB), with 58,213 being eligible for encryption (e.g. log files are omitted). As shown in Fig. 7, the Y-axis on the left presents the total time required by WannaLaugh to encrypt all files and write all corresponding AES keys to a file. The Y-axis on the right displays the number of encryptions per second, excluding the time taken to write the AES keys to a file. The baseline encryption process, mirroring a traditional ransomware's sequential file encryption, was completed in 201.5 seconds. When employing multi-threading with eight or more threads, this duration dropped significantly to 84 seconds. However, the performance gain plateaus beyond this point, primarily due to the time required to write the AES keys to a file becoming the dominant factor. No Ray 1-thread 2-threads 4-threads 8-threads 16-threads 32-threads 64-threads 80-threads 128-threads 0 50 100 150 200 250 Total WannaLaugh Time (seconds) 201.5 267.7 160.2 105.2 84.0 83.0 85.1 86.5 87.4 87.7 0 1000 2000 3000 4000 5000 6000 7000 File encryptions per second 342 286 612 1564 3592 4136 4657 6944 6451 6827 Remarkably, when assessing the number of encryptions per second, the performance boost is even more pronounced. Multithreading achieves a staggering Fig. 7. WannaLaugh Performance with Ray on Linux (80cores, XFS-INTEL_SSDPE2KX010T8, 60 Govdoc1 folders, 59,272 files, 44.7 GB). 20x increase in throughput compared to the baseline. Notably, the encryption of all 58,213 files was completed in just 15 seconds when we excluded the time to write the final AES keys and initialize the Ray cluster.",
  "5.2 Convergence Performance of Optimization Algorithms": "Starting from an initial random state, we allowed each algorithm to proceed for 1000 iterations. For every iteration, we performed an inference on a pre-trained model to get the F1 score. We then computed the minimum, maximum, and average values of the fitness cost across parallel solutions at each iteration, which also correspond to different parameter names, such as population for Genetic Algorithms or parallel executions for Random Walk. In the context of our work, \"fitness\" or \"fitness cost\" refers to a metric that quantifies the quality of the generated trace, relative to a target trace. Table 3 shows the ransomware strains used for collecting target traces in this work, with their associated encryption schemes. For each of the four algorithms used, we adopt a common fitness measure to ensure comparability and interpretability , Vol. 1, No. 1, Article . Publication date: June 2024. 16 across the methods. The fitness cost is calculated as a distance metric between the trace produced by the algorithm at each epoch and the actual ransomware trace. The nature of this distance calculation depends on the characteristics of the IO traces, taking into account the F1-score of the inference of the generated trace. Table 3. Selected Ransomware and SHA256 Thus, a lower fitness cost indicates a higher resemblance between the generated trace and the actual ransomware trace, signifying a better \"fit.\" Our approach to fitness thus allows a direct comparison between the different search algorithms, despite their distinct internal mechanics, by providing a unified measure of how well they generate ransomware-like or benign-like traces. Fig. 8. Optimizing imitating malicious strains with different heuristics. 25 50 75 100 125 150 175 Epochs (optimization time steps) 20 30 40 50 60 70 80 90 100 110 Fitness (lower is better) Random Walk Genetic Algorithm Simulated Annealing NSGA-II Elitism 10% NSGA-II Elitism 30% 1000 In Fig. 8, we plot the fitness cost as a function of the number of epochs (generations/iterations/steps) with lower values being more desirable. The dark line corresponds to the mean fitness cost for the parallel solutions (e.g., population) of each algorithm, while the light area indicates other solutions that were better or worse than the mean for a specific epoch. While this figure presents the algorithm's iterative refinement process, it's important to understand the implications in the context of generating IO traces. Indeed, a trace can technically be generated using parameters identified by the search algorithms at any epoch, even at epoch 0. However, the overall accuracy and resemblance of the generated trace to the real one improve as the epochs progress, given the optimization nature of these algorithms. Therefore, the number of epochs can be seen as an indirect measure of the quality of the generated trace. It's not a direct , Vol. 1, No. 1, Article . Publication date: June 2024. WannaLaugh: A Configurable Ransomware Emulator 17 indicator of real-time performance or end-to-end latency for generating a trace, but it provides valuable insight into the iterative refinement and optimization process of our approach. For solutions with a fitness cost below the mean, we use a Pareto-style approach: if a solution at epoch 𝑖 has a lower fitness cost than its predecessor, it is considered for the next epoch. Otherwise, the solution from epoch 𝑖 -1 is plotted as it represents a better outcome. This approach results in a Pareto-like representation of the graph for the solutions below their mean. NGSA-II outperforms RW, while GGA and SA exhibit intermediate convergence rates. After epoch 200, all algorithms except NSGA-II show negligible convergence with poor F1 scores below 0.5. In contrast, NSGA-II achieves a more promising F1 score of 0.71 and a faster convergence rate, highlighting its potential as a better optimization algorithm. In addition, we conducted two experiments with NSGA-II, employing different levels of elitism: 10% and 30% [46]. Our analysis reveals that 30% elitism initially demonstrated a faster convergence rate up to epoch 141. This can be attributed to the retention of a larger proportion of high-quality candidates within the solution pool. However, beyond epoch 141, using 10% elitism outperforms the 30% case, as it facilitated broader exploration of the design space. By utilizing 90% of the solution pool for more diverse, random solutions at every iteration, the algorithm with 10% elitism managed to avoid local optima, without limiting its search capability.",
  "5.3 Ability of WannaLaugh to Mimic Traces": "5.3.1 Examining two versions of WannaLaugh. Wecontinue our evaluation by using two versions of WannaLaugh using the optimal parameters from the previous analysis, namely, (1) WannaLaugh-W, which is designed to resemble a known ransomware strain, such as WannaCry, and (2) WannaLaughN, which is designed not to resemble any strain from the dataset, but to form a new potential strain and compare each of them with all six ransomware strains and one benign workload in the confusion matrices shown in Fig. 9. Each cell in the confusion matrix represents the intersection of the predicted class (column) and the true class (row) for a given instance. The diagonal cells (top left to bottom right), represent correct predictions. The off-diagonal cells signify misclassifications, where the model incorrectly predicted the class. In the case of the WannaLaugh-W and WannaLaugh-N, the high values in specific off-diagonal cells indicate the intended behavior of the respective ransomware versions, either resembling a known ransomware strain (red boxes of Fig. 9(a)) or being classified as a benign workload (red boxes of Fig. 9(b)). The confusion matrices confirm our expectations. For WannaLaugh-W, we observe high values at the intersection of WannaLaugh-W and the WannaCry ransomware which indicates successful generation of traces that closely resemble known ransomware strains. For WannaLaugh-N, we observe high values in the cells corresponding to the intersection of WannaLaugh-N and benign workloads. This outcome demonstrates that we effectively created traces that can be classified as benign workloads, potentially evading detection by ransomware identification tools. 5.3.2 Overall analysis of all WannaLaugh versions. Building upon the time series data analysis presented above, Table 4 offers a comprehensive summary of these results in the form of average match percentages for all collected traces. Every trace has a length of 2700s and the number of samples from each class is balanced. This representation provides an overarching view of Wannalaugh's ability to mimic a variety of different workloads under various configurations. Each row in the table displays the average percentage to which Wannalaugh, when configured to emulate a specific workload, matches each of the six ransomware strains and one benign workload. The values are derived from a comprehensive analysis of the IO trace time series data for each configuration. For example, when Wannalaugh is set to replicate the 'WannaCry' ransomware, , Vol. 1, No. 1, Article . Publication date: June 2024. 18 (a) WannaLaugh-W (configured to resemble WannaCry). Sodinokibi BlackBasta Lockbit WannaCry Conti Lockfile WannaLaugh Benign Sodinokibi BlackBasta Lockbit WannaCry Conti Lockfile WannaLaugh Benign 54 10 2 31 2 17 26 13 13 85 0 1 4 23 1 7 5 2 52 3 4 1 2 1 37 2 3 108 5 2 57 2 4 3 4 2 99 13 3 16 27 21 1 3 10 52 8 13 22 2 2 63 2 5 93 6 2 1 1 2 3 3 7 110 0 25 50 75 100 (b) WannaLaugh-N (configured to not resemble any ransomware). Sodinokibi BlackBasta Lockbit WannaCry Conti Lockfile WannaLaugh Benign Sodinokibi BlackBasta Lockbit WannaCry Conti Lockfile WannaLaugh Benign 58 9 3 9 3 16 23 11 12 86 1 0 5 22 2 6 6 1 53 2 3 1 1 1 11 3 4 110 4 3 14 1 3 4 3 1 100 12 4 15 25 20 2 2 11 55 7 11 2 3 1 15 1 4 96 69 1 0 0 1 2 2 46 116 0 25 50 75 100 Fig. 9. Confusion matrix of six ransomware, one benign workload and WannaLaugh. Table 4. Evaluation of WannaLaugh mimicking capability (%) it corresponds to the IO trace of the actual 'WannaCry' ransomware with an average of 57.2% accuracy. It is worth noting that these percentages significantly drop when the comparison involves different workloads, thereby demonstrating Wannalaugh's ability to differentiate between various ransomware strains. The bold figures along the diagonal of the table denote instances where Wannalaugh is configured to match the same workload that it is compared with. In reviewing these findings we note an encouraging trend. The diagonal percentages, reaching up to 65.1%, reflect Wannalaugh's promising , Vol. 1, No. 1, Article . Publication date: June 2024. WannaLaugh: A Configurable Ransomware Emulator 19 ability to mimic various workloads with a degree of accuracy. This demonstration of performance points to the effectiveness of the current configurations. However, these percentages are far from perfect, indicating that there is room for enhancement and fine-tuning of Wannalaugh's configuration parameters. It is important to underline that we do not strive for 100% emulation accuracy. Given the inherent non-deterministic nature of IO traces and the influence of factors such as operating system noise, achieving a perfect match is not only unrealistic but also unnecessary. Moreover, an accuracy of 100% could potentially signal a risk of overfitting, as it might indicate the model is too specifically tailored to the training data. Still, the difference between the current maximum of approximately 65.1% and a perfect match does signal a wide margin for further refinement of Wannalaugh's parameters. This study's results serve as a promising baseline upon which future work can build, driving the continual improvement of Wannalaugh's emulation capabilities.",
  "6 FUTURE WORK": "We are currently investigating the following extensions for the WannaLaugh ransomware emulator: (1) the integration of more advanced search strategies, such as reinforcement learning to guide the selection of configuration options more efficiently [47]. This would allow for faster convergence to optimal or near-optimal settings. (2) The support for classification against a broader range of popular ransomware types, enabling the development of more general ML-based detection models which would improve the emulator's ability to cover a wider variety of ransomware behaviors and encryption patterns. (3) The effectiveness in detecting ransomware when different disk setups, RAID systems, or filesystems are involved. Exploring this aspect would ensure the emulator remains versatile and adaptable to various system configurations, further broadening its applicability and practicality in real-world scenarios. (4) We further investigate the integration of trace generators, such as SDGen [48], Tracie [49] or Sysbench [50], to support more benign types of workloads. Another intriguing possibility for ransomware trace generation is the utilization of AI-driven generative models such as Generative Adversarial Networks (GANs) [51]. However, the lack of constrained interpretability nature, the need for extensive training data, and the excessive computational demands can pose significant hurdles. Before exploring these complex methods, it's beneficial to establish the viability of the approach using simpler machine learning models. Hence, we've chosen a more supervised and less resource-intensive approach, while also ensuring control over the generation process. The exploration of AI and generative models for this task remains a promising avenue for future research. Since WannaLaugh is open-sourced 1 , the cybersecurity community can actively contribute to these extensions and improvements. Involving the community can ensure that the emulator evolves alongside emerging threats, helping researchers develop more robust and effective solutions against ransomware and other cyber threats. These continuous enhancements will solidify WannaLaugh as a valuable tool. Last but not least we would like to mention that WannaLaugh significantly helped us to train ML models for an enterprise storage system using CSD capabilities in SSDs to detect ransomware in real-time. While it would be very interesting to depict such an architecture and its constraints and demonstrate the accuracy, generalizability, and limitations of such ML models we looked into, this topic is clearly out of the scope of this paper and will be addressed in the near future. 1 WannaLaugh is going to be open-sourced on Github and PyPi soon. , Vol. 1, No. 1, Article . Publication date: June 2024. 20",
  "7 CONCLUSION": "This paper introduces WannaLaugh, a configurable open-source ransomware emulator designed to generate IO traces in a safe and controlled environment. By leveraging heuristic algorithms to explore the emulator's extensive design space, WannaLaugh can produce realistic IO traces that either resemble known ransomware behaviors or not. This novel tool enables researchers to develop, evaluate, and refine ML-based ransomware detection techniques, addressing the everevolving threat landscape. The highly customizable and extensible nature of WannaLaugh ensures its continued relevance and applicability in the rapidly changing field of cybersecurity, paving the way for more robust and efficient ransomware detection and prevention strategies.",
  "REFERENCES": "[1] IBM-Security. X-Force threat intelligence index, 2023. URL https://www.ibm.com/reports/threat-intelligence. Accessed: 18.03.2023. [2] Timothy McIntosh, ASM Kayes, Yi-Ping Phoebe Chen, Alex Ng, and Paul Watters. Ransomware mitigation in the modern era: A comprehensive review, research challenges, and future directions. ACM Computing Surveys (CSUR) , 54 (9):1-36, 2021. doi: 10.1145/3479393. URL https://doi.org/10.1145/3479393. [3] Pedro Miguel Sánchez Sánchez, Jose Maria Jorquera Valero, Alberto Huertas Celdrán, Gérôme Bovet, Manuel Gil Pérez, and Gregorio Martínez Pérez. A survey on device behavior fingerprinting: Data sources, techniques, application scenarios, and datasets. IEEE Communications Surveys and Tutorials , 23:1048-1077, 2021. [4] Alberto Huertas Celdrán, Pedro Miguel Sánchez, Miguel Azorín Castillo, Gérôme Bovet, Gregorio Martínez Pérez, and Burkhard Stiller. Intelligent and behavioral-based detection of malware in IoT spectrum sensors. International Journal of Information Security , 23:541-561, 2023. doi: 10.1007/s10207-022-00602-w. [5] Manabu Hirano and Ryotaro Kobayashi. Machine learning based ransomware detection using storage access patterns obtained from live-forensic hypervisor. In 2019 Sixth International Conference on Internet of Things: Systems, Management and Security (IOTSMS) , pages 1-6, 2019. doi: 10.1109/IOTSMS48152.2019.8939214. URL https://doi.org/10.1109/ IOTSMS48152.2019.8939214. [6] Ali HeydariGorji, Siavash Rezaei, Mahdi Torabzadehkashi, Hossein Bobarshad, Vladimir Alves, and Pai H. Chou. Leveraging computational storage for power-efficient distributed data analytics. ACM Trans. Embed. Comput. Syst. , 21 (6), oct 2022. doi: 10.1145/3528577. URL https://doi.org/10.1145/3528577. [7] Apoorve Mohan, Shripad Nadgowda, Bhautik Pipaliya, Sona Varma, Sahil Suneja, Canturk Isci, Gene Cooperman, Peter Desnoyers, Orran Krieger, and Ata Turk. Towards non-intrusive software introspection and beyond. In 2020 IEEE International Conference on Cloud Engineering (IC2E) , pages 173-184, 2020. doi: 10.1109/IC2E48712.2020.00025. URL https://doi.org/10.1109/IC2E48712.2020.00025. [8] M. Zubair Rafique and Juan Caballero. FIRMA: Malware clustering and network signature generation with mixed network behaviors. In Research in Attacks, Intrusions, and Defenses , pages 144-163, 2013. ISBN 978-3-642-41284-4. doi: 10.1007/978-3-642-41284-4_8. URL https://doi.org/10.1007/978-3-642-41284-4_8. [9] Daniele Sgandurra, Luis Muñoz-González, Rabih Mohsen, and Emil C. Lupu. Automated dynamic analysis of ransomware: Benefits, limitations and use for detection. ArXiv.org , September 2016. doi: 10.48550/arXiv.1609.03020. URL https://doi.org/10.48550/arXiv.1609.03020. [10] Umara Urooj, Bander Ali Saleh Al-rimy, Anazida Zainal, Fuad A. Ghaleb, and Murad A. Rassam. Ransomware detection using the dynamic analysis and machine learning: A survey and research directions. Applied Sciences , 12(1), 2022. ISSN 2076-3417. doi: 10.3390/app12010172. URL https://www.mdpi.com/2076-3417/12/1/172. [11] Andrea Saracino, Daniele Sgandurra, Gianluca Dini, and Fabio Martinelli. MADAM: Effective and efficient behaviorbased android malware detection and prevention. IEEE Transactions on Dependable and Secure Computing , 15(1):83-97, 2018. doi: 10.1109/TDSC.2016.2536605. URL https://doi.org/10.1109/TDSC.2016.2536605. [12] Umme Zahoora, Asifullah Khan, Muttukrishnan Rajarajan, Saddam Hussain Khan, Muhammad Asam, and Tauseef Jamal. Ransomware detection using deep learning based unsupervised feature extraction and a cost sensitive pareto ensemble classifier. Scientific reports , 12(1):15647, September 2022. ISSN 2045-2322. doi: 10.1038/s41598-022-19443-7. URL https://europepmc.org/articles/PMC9485118. [13] Zhi-Guo Chen, Ho-Seok Kang, Shang-Nan Yin, and Sung-Ryul Kim. Automatic ransomware detection and analysis based on dynamic API calls flow graph. In Proceedings of the International Conference on Research in Adaptive and Convergent Systems , pages 196--201, 2017. ISBN 9781450350273. doi: 10.1145/3129676.3129704. URL https: //doi.org/10.1145/3129676.3129704. [14] Yoshiro Fukushima, Akihiro Sakai, Yoshiaki Hori, and Kouichi Sakurai. A behavior based malware detection scheme for avoiding false positive. In 2010 6th IEEE Workshop on Secure Network Protocols , pages 79-84, 2010. doi: 10.1109/ , Vol. 1, No. 1, Article . Publication date: June 2024. WannaLaugh: A Configurable Ransomware Emulator 21 NPSEC.2010.5634444. URL https://doi.org/10.1109/NPSEC.2010.5634444. [15] Jaehyun Han, Zhiqiang Lin, and Donald E. Porter. On the effectiveness of behavior-based ransomware detection. In Security and Privacy in Communication Networks (SecureComm) , pages 120-140, 2020. doi: 10.1007/978-3-030-63095-9_7. URL https://doi.org/10.1007/978-3-030-63095-9_7. [16] G. Usha, P. Madhavan, Meenalosini Vimal Cruz, N A S Vinoth, Veena, and Maria Nancy. Enhanced ransomware detection techniques using machine learning algorithms. In 2021 4th International Conference on Computing and Communications Technologies (ICCCT) , pages 52-58, 2021. doi: 10.1109/ICCCT53315.2021.9711906. URL https://doi.org/ 10.1109/ICCCT53315.2021.9711906. [17] Christine Bukola Asaju, David Otoo-Arthur, Richard Ojochegbe Orah, and Felix Sekyi-Dadson. Development of a machine learning model for detecting and classifying ransomware. In 2021 1st International Conference on Multidisciplinary Engineering and Applied Science (ICMEAS) , pages 1-5, 2021. doi: 10.1109/ICMEAS52683.2021.9692402. URL https://doi.org/10.1109/ICMEAS52683.2021.9692402. [18] Mohammad Masum, Md Jobair Hossain Faruk, Hossain Shahriar, Kai Qian, Dan Lo, and Muhaiminul Islam Adnan. Ransomware classification and detection with machine learning algorithms. In 2022 IEEE 12th Annual Computing and Communication Workshop and Conference (CCWC) , pages 0316-0322, 2022. doi: 10.1109/CCWC54503.2022.9720869. URL https://doi.org/10.1109/CCWC54503.2022.9720869. [19] Abdullah Alqahtani and Frederick T. Sheldon. A survey of crypto ransomware attack detection methodologies: An evolving outlook. Sensors , 22(5), 2022. ISSN 1424-8220. doi: 10.3390/s22051837. URL https://www.mdpi.com/14248220/22/5/1837. [20] Gopinath M. and Sibi Chakkaravarthy Sethuraman. A comprehensive survey on deep learning based malware detection techniques. Computer Science Review , 47:100529, 2023. ISSN 1574-0137. doi: 10.1016/j.cosrev.2022.100529. URL https://doi.org/10.1016/j.cosrev.2022.100529. [21] Manabu Hirano, Ryo Hodota, and Ryotaro Kobayashi. RanSAP: An open dataset of ransomware storage access patterns for training machine learning models. Forensic Science International: Digital Investigation , 40:301314, 2022. ISSN 2666-2817. doi: 10.1016/j.fsidi.2021.301314. URL https://doi.org/10.1016/j.fsidi.2021.301314. [22] Nextronsystems quickbuck. URL https://github.com/NextronSystems/ransomware-simulator. Accessed: 29.01.2024. [23] leomatias ransomware-simulator. URL https://github.com/leomatias/Ransomware-Simulator. Accessed: 29.01.2024. [24] Joelgmsec psransom. URL https://github.com/JoelGMSec/PSRansom. Accessed: 29.01.2024. [25] Tarcísio Marinho. Python gonnacry. URL https://github.com/tarcisio-marinho/GonnaCry. Accessed: 25.03.2023. [26] lawndoc. Ransim. URL https://github.com/lawndoc/RanSim. Accessed: 25.03.2023. [27] Shinolocker. URL https://shinolocker.com. Accessed: 29.01.2024. [28] Carbonsec ransomware readiness. URL https://www.carbonsec.com/services/ransomware-readiness. Accessed: 29.01.2024. [29] spin.ai ransomware-simulator. URL https://spin.ai/ransomware-simulator. Accessed: 29.01.2024. [30] KnowBe4 Inc. Knowbe4 ransim simulator. URL https://www.knowbe4.com/ransomware-simulator. Accessed: 29.01.2024. [31] Acronis. Taking a deep dive into Sodinokibi ransomware. URL https://www.acronis.com/en-us/cyber-protectioncenter/posts/sodinokibi-ransomware/. Accessed: 25.03.2023. [32] Trend Micro Research. Ransomware spotlight - Black Basta. URL https://www.trendmicro.com/vinfo/us/security/ news/ransomware-spotlight/ransomware-spotlight-blackbasta. Accessed: 15.03.2023. [33] Unit42. LockBit 2.0: How this RaaS operates and how to protect against it. URL https://unit42.paloaltonetworks.com/ lockbit-2-ransomware/. Accessed: 20.03.2023. [34] IBM Security. X-Force threat intelligence index malware analysis report LockFile malware profile. 2022. URL https://exchange.xforce.ibmcloud.com/malware-analysis/guid:674f5949970a487028354a309492ac0c. [35] Secureworks. WCry ransomware analysis. URL https://www.secureworks.com/research/wcry-ransomware-analysis. Accessed: 20.03.2023. [36] Packt SecurityPro. Decoding Conti. URL https://security.packt.com/conti/. Accessed: 15.03.2023. [37] Vasily Tarasov, Erez Zadok, and Spencer Shepler. Filebench: A flexible framework for file system benchmarking. login Usenix Mag. , 41(1), 2016. URL https://www.usenix.org/publications/login/spring2016/tarasov. [38] Philipp Moritz, Robert Nishihara, Stephanie Wang, Alexey Tumanov, Richard Liaw, Eric Liang, Melih Elibol, Zongheng Yang, William Paul, Michael I. Jordan, and Ion Stoica. Ray: A distributed framework for emerging AI applications. In 13th USENIX Symposium on Operating Systems Design and Implementation (OSDI 18) , pages 561-577, Carlsbad, CA, October 2018. USENIX Association. ISBN 978-1-939133-08-3. URL https://www.usenix.org/conference/osdi18/ presentation/moritz. [39] PyCryptodome, 2023. URL https://pycryptodome.readthedocs.io/en/latest/index.html. Accessed: 30.03.2023. [40] Qml (qt modeling language). URL https://doc.qt.io/qt-6/qtqml-index.html. Accessed: 15.01.2024. , Vol. 1, No. 1, Article . Publication date: June 2024. 22 [41] Simson Garfinkel, Paul Farrell, Vassil Roussev, and George Dinolt. Bringing science to digital forensics with standardized forensic corpora. Digit. Investig. , 6:S2--S11, sep 2009. ISSN 1742-2876. doi: 10.1016/j.diin.2009.06.016. URL https: //doi.org/10.1016/j.diin.2009.06.016. [42] Vara Prasad, William Cohen, Frank Ch. Eigler, Martin Hunt, and Brad Chen Jim Keniston. Locating system problems using dynamic instrumentation. In Proceedings of Ottawa Linux Symposium (OLS , 2005. URL https://sourceware.org/ systemtap/systemtap-ols.pdf. [43] Sourabh Katoch, Sumit Singh Chauhan, and Vijay Kumar. A review on genetic algorithm: past, present, and future. Multimedia Tools and Applications , 80:8091-8126, 2021. doi: 10.1007/s11042-020-10139-6. URL https://doi.org/10.1007/ s11042-020-10139-6. [44] Daniel Delahaye, Supatcha Chaimatanan, and Marcel Mongeau. Simulated annealing: From basics to applications. Handbook of metaheuristics , pages 1-35, 2019. doi: 10.1007/978-3-319-91086-4_1. URL https://doi.org/10.1007/978-3319-91086-4_1. [45] K. Deb, A. Pratap, S. Agarwal, and T. Meyarivan. A fast and elitist multiobjective genetic algorithm: NSGA-II. IEEE Transactions on Evolutionary Computation , 6(2):182-197, 2002. doi: 10.1109/4235.996017. URL https://doi.org/10.1109/ 4235.996017. [46] Mithilesh Kumar and Chandan Guria. The elitist non-dominated sorting genetic algorithm with inheritance (i-NSGA-II) and its jumping gene adaptations for multi-objective optimization. Information Sciences , 382-383:15-37, 2017. ISSN 0020-0255. doi: 10.1016/j.ins.2016.12.003. URL https://doi.org/10.1016/j.ins.2016.12.003. [47] Xueqin Zhang, Jiyuan Wang, and Shinan Zhu. Dual generative adversarial networks based unknown encryption ransomware attack detection. IEEE Access , 10:900-913, 2021. doi: 10.1109/ACCESS.2021.3128024. URL https://doi.org/ 10.1109/ACCESS.2021.3128024. [48] Raúl Gracia-Tinedo, Danny Harnik, Dalit Naor, Dmitry Sotnikov, Sivan Toledo, and Aviad Zuck. SDGen: Mimicking datasets for content generation in storage benchmarks. In 13th USENIX Conference on File and Storage Technologies (FAST 15) , pages 317-330, February 2015. ISBN 978-1-931971-201. URL https://www.usenix.org/conference/fast15/technicalsessions/presentation/gracia-tinedo. [49] Yannis Sfakianakis, Eleni Kanellou, Manolis Marazakis, and Angelos Bilas. Trace-based workload generation and execution. In Euro-Par 2021: Parallel Processing: 27th International Conference on Parallel and Distributed Computing, Lisbon, Portugal, September 1-3, 2021, Proceedings , pages 37--54, 2021. ISBN 978-3-030-85664-9. doi: 10.1007/978-3030-85665-6_3. URL https://doi.org/10.1007/978-3-030-85665-6_3. [50] Sysbench: a scriptable multi-threaded benchmark tool. URL https://github.com/akopytov/sysbench. Accessed: 30.01.2024. [51] Li Chen, Chih-Yuan Yang, Anindya Paul, and Ravi Sahita. Towards resilient machine learning for ransomware detection. arXiv preprint arXiv:1812.09400 , 2018. , Vol. 1, No. 1, Article . Publication date: June 2024.",
  "keywords_parsed": [
    "None"
  ]
}
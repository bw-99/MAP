<h1>title</h1> <p>ITRACE: AN IMPLICIT TRUST INFERENCE METHOD FOR TRUST-AWARE COLLABORATIVE FILTERING </p><h1>authors</h1> <p>Xu He; Bin Liu; Ke-Jia Chen </p><h1>pub_date</h1> <p>2017-08-15 </p><h1>abstract</h1> <p>The growth of Internet commerce has stimulated the use of collaborative filtering (CF) algorithms as recommender systems. A CF algorithm recommends items of interest to the target user by leveraging the votes given by other similar users. In a standard CF framework, it is assumed that the credibility of every voting user is exactly the same with respect to the target user. This assumption is not satisfied and may lead to misleading recommendations in practice. A natural countermeasure is to design a trust-aware CF algorithm, which can take account of the difference in the credibilities of the voting users when performing CF. To this end, this paper presents a trust inference approach, which can predict the implicit trust of the target user on every voting user from a sparse explicit trust matrix. Then an improved CF algorithm termed iTrace is proposed, which employs both the explicit and the predicted implicit trust to provide recommendations. An empirical evaluation on a public dataset demonstrates that the proposed algorithm provides a significant improvement in recommendation quality in terms of mean absolute error. </p><h1>sections</h1><h2>heading</h2> <p>INTRODUCTION </p><h2>text</h2> <p>With the massive growth of the internet and the emergence of electronic commerce over the last decades, recommender system (RecSys) has become an indispensable technique to mitigate the problem of information overload for users. The aim of RecSys is to provide target users with high quality, personalized recommendations, and to help them find items ⋆ Correspondence author: Bin Liu (Email: bins@ieee.org). This work was partly supported by the National Natural Science Foundation (NSF) of China under grant No. 61571238, China Postdoctoral Science Foundation under grant Nos. 2015M580455 and 2016T90483, the Six Talents Peak Foundation of Jiangsu Province under grant No. XYDXXJS-CXTD-006 and the Scientific and Technological Support Project (Society) of Jiangsu Province under grant No. BE2016776.
(e.g., books, movies, news, music, etc.) of interest from a plethora of available choices [1].
Collaborative filtering (CF) seems to be one of the most well-known and commonly used techniques to build a Rec-Sys [2][3][4]. The underlying idea of CF is that users with similar preferences in the past are likely to favor the same items (e.g., books, movies, news, music, etc.) in the future. The CF method is easy to implement. A typical CF method predicts the rating value user u gives to item i as follows [2]:
r u,i = ru + v∈U w(u, v)(r v,i -rv ) v∈U |w(u, v)| ,(1)
where U denotes a set of K neighbors of u who rated item i (also called u ′ s voting users in what follows), ru the average rating of user u for all the items rated by u, and w(u, v) the weight assigned to user v ′ s vote when she recommends items to u. In a standard CF framework, the weight w(u, v) is set as a similarity measure between users u and v, denoted by sim(u, v), and the neighbors of u are those most similar to u who co-rated item i with u. In order to compute the similarity between users, a variety of similarity measures have been proposed, such as Pearson correlation, cosine vector similarity, Spearman correlation, entropy-based uncertainty, and meansquare difference. It is reported that Pearson correlation performs better than the others [5,6]. The Pearson correlation coefficient is used here, defined as follows [3,7] sim
(u, v) = i∈I (r u,i -ru )(r v,i -rv ) i∈I (r u,i -ru ) 2 i∈I (r v,i -rv ) 2 , (2
) where I denotes the set of items that users u and v have corated.
In practical applications, users in general only rate a small portion of items, but accurate recommendations are expected for the cold users who rate only a few items. This raises two inherent obstacles to obtain satisfactory recommending quality, namely data sparsity and cold start [8][9][10][11]. In principle, this is caused by the lack of sufficient and reliable elements in U and/or I to calculate Eqns.( 1) and (2). A possible solution to get around this is to incorporate trust relationships into the CF framework, resulting in the trust based or trust-aware CF (TaCF) [8][9][10][12][13][14]. The underlying intuition supporting the working of trust-aware recommender systems (TaRS) is that users often accept advice from trustworthy friends in real life on topics they are not expert in. So it is reasonable to expect that considering trust relationship among users may bring in benefits in generating recommendations. Furthermore, trust can be propagated over a network of users, hence TaRS can overcome the data sparsity and cold start problems, from which traditional CF methods suffer, at least in concept.
A practical issue to be considered when designing a TaCF algorithm is that the explicit trust information is usually much more sparse than the users' ratings. A trust propagation model along with an effective implicit trust inference method is desirable to overcome the above limitation. To this end, this paper presents an applicable implicit trust inference method, based on which an improved CF algorithm termed iTrace (i.e., Implicit TRust-Aware Collaborative filtEring) is proposed. </p><h2>publication_ref</h2> <p>['b0', 'b1', 'b2', 'b3', 'b1', 'b4', 'b5', 'b2', 'b6', 'b7', 'b8', 'b9', 'b10', 'b1', 'b7', 'b8', 'b9', 'b11', 'b12', 'b13'] </p><h2>figure_ref</h2> <p>[] </p><h2>table_ref</h2> <p>[] </p><h2>heading</h2> <p>THE PROPOSED ITRACE ALGORITHM </p><h2>text</h2> <p>In this section, we present the iTrace algorithm followed by an analysis of its connections to existent related work. </p><h2>publication_ref</h2> <p>[] </p><h2>figure_ref</h2> <p>[] </p><h2>table_ref</h2> <p>[] </p><h2>heading</h2> <p>Algorithm Design </p><h2>text</h2> <p>An architecture of the iTrace algorithm is shown in Fig. 1. The inputs include an N × N explicit trust matrix and an N × M rating matrix, denoted in what follows by T e and R, respectively. N and M denote the numbers of the users and of the items, respectively. In contrast with a standard CF algorithm, iTrace leverages much more information except user similarity for prediction of user rating. Such additional information is represented by a trust matrix, denoted by T in what follows, which is estimated by an implicit trust inference module that takes T e as input. The details on the implicit trust inference module are presented in Sec.2.2. A working flow of the iTrace algorithm for predicting user u's rating value on item i is summarized as follows.
1. Calculate the similarity metrics between u and the other users who rated i using Eqn.(2).
2. Select the top K users who are most similar to u as u's voting users.
3. Estimate the trust of u on every voting user, using the implicit trust inference method presented in Sec. 2.2.
4. Predict user u's rating value on item i as follows
r u,i = ru + v∈U f (sim(u, v), t(u, v))(r v,i -rv ) v∈U |f (sim(u, v), t(u, v))| ,(3)
where t(u, v) is the estimated trust of u on v, obtained from Step 3. The function f plays a role of integrating user similarity and trust in rating prediction.
We consider two different forms of the function f in our algorithm. The first one, termed incremental weighting (IW) here, is specified as follows
f (sim(u, v), t(u, v)) = sim(u, v) t(u, v) j∈U sim(u, j) t(u, j) .(4)
The standard CF framework corresponds to a special case in which t(u, i) = t(u, j) for ∀i, j ∈ U . The other form of f under consideration, termed linear weighting (LW) here, is
f (sim(u, v), t(u, v)) = αsim(u, v) j∈U sim(u, j) + (1 -α) t(u, v) j∈U t(u, j) ,(5)
where 0 ≤ α ≤ 1 denotes the linear weighting coefficient. The standard CF algorithm then corresponds to the case in which α = 1. Through the analysis on Eqns.( 4) and ( 5), we see that the standard CF framework totally neglects the impact of the user trust. We show that in this paper, by taking into account of user trust, the iTrace algorithm can provide more accurate recommendations compared with the standard CF method. Through evaluation on a public dataset, we also demonstrate that Eqn.( 4) is preferable to Eqn. (5) in Sec.3.
The design of the implicit trust inference procedure, which is involved at Step 3 as shown above, creates a difference between the proposed iTrace algorithm and the other existing TaCF methods. The connections to related work in the literature are presented in Sec.2.3. We describe in detail the implicit trust inference procedure in the next subsection. </p><h2>publication_ref</h2> <p>['b4'] </p><h2>figure_ref</h2> <p>['fig_0'] </p><h2>table_ref</h2> <p>[] </p><h2>heading</h2> <p>Implicit Trust Inference </p><h2>text</h2> <p>This module takes as input an N × N sparse explicit trust matrix T e , and exploits trust propagation in order to predict, Fig. 2: 4 typical example cases under consideration for predicting user u's trust on user v. A solid line with an arrow pointing from i to j is associated with the event that t e (i, j) takes value 1. A dotted line with an arrow pointing from i to j indicates a missing value of t e (i, j) and that there exists an implicit trust of i on j, which can be inferred from T e . The lightning symbol in the 4th sub-figure indicates a cut-off of the trust information flow.
for every user, how much she could trust every other user. In this way, it outputs an estimated trust matrix T , the (i, j)th cell t(i, j) (if present) of which represents how much the ith user trusts the jth user. The input matrix T e has a very limited number of cells that take value 1 and all the other cells are empty with missing values. If the (i, j)th cell of T e , denoted by t e (i, j), takes value 1, it means that user i has expressed a trust statement that she trusts user j. It is worth noting that, in practical applications, the available trust data, represented as matrix T e here, would always be very sparse. This is so because no user can reasonably interact with every other user and then issue a trust statement about them. </p><h2>publication_ref</h2> <p>[] </p><h2>figure_ref</h2> <p>[] </p><h2>table_ref</h2> <p>[] </p><h2>heading</h2> <p>Four categories of trust information flow patterns </p><h2>text</h2> <p>We categorize the patterns of the trust information flow from user u to v into 4 complementary classes. For each class, we show a typical example in Fig. 2. The 1st sub-figure corresponds to the case in which t e (u, v) = 1. If t e (i, j) = 1, then j is called an explicit trustee of i. The 2nd sub-figure exemplifies the case in which v is not an explicit trustee of u but u and v have common explicit trustee(s). The 3rd sub-figure exemplifies the case in which v is not an explicit trustee of u, u and v have no common explicit trustee but there is at least one trust propagation path from u to v. A trust propagation path from i to j is defined by a series of user pairs {p m , p m+1 }, m = 1, . . . , M -1, M ∈ N, which satisfies p 1 = i, p M = j, and t(p m , p m+1 ) > 0, ∀m ∈ {1, . . . , M -1}. This model indicates that, if user i trusts another user k to some extent and user k trusts user j to some extent, then there will be a trust propagation path from i to j. Note that this model conforms to the transitivity property of the concept of trust [9,15,16]. The 4th sub-figure is associated with the case that there is no trust propagation path from u to v. </p><h2>publication_ref</h2> <p>['b8', 'b14', 'b15'] </p><h2>figure_ref</h2> <p>[] </p><h2>table_ref</h2> <p>[] </p><h2>heading</h2> <p>Trust inference procedures </p><h2>text</h2> <p>First we initialize T to be a zero matrix. Given a pair of users, u and v, we first determine which one of the 4 categories presented above the pattern of the trust information flow from u to v belongs to. If it belongs to the 1st category, set t(u, v) = 1. If it belongs to the 2nd category, we estimate t(u, v) as follows
t(u, v) = |S(u) S(v)| |S(u) S(v)| ,(6)
where S(i) denotes the set of i's explicit trustees. For the case shown in the 2nd sub-figure of Fig. 2, we then have t(u, v) = 2/3. Now we focus on the case in which the pattern of the trust information flow from u to v belongs to the 3rd category. We consider every user pair {i, j} that belongs to any one of the aforementioned two categories and estimate t(i, j) correspondingly. Then we exploit trust propagation over the trust network defined by T to estimate t for user pairs associated with the 3rd category. We treat the trust matrix T as a weighted directed graph G, in which the nodes denote the users and the weight of an edge denotes the trust of the starting vertex on the end vertex. For a pair of users, say u and v, there may be multiple paths originating from u and ending at v, as exemplified in the 3rd sub-figure of Fig. 2. To compute t(u, v), we first build up a reciprocal trust matrix Tr , whose (i, j)th cell tr (i, j) = 1/ t(i, j) if t(i, j) > 0; otherwise, set tr (i, j) = ∞. We treat the reciprocal trust matrix as a weighted directed graph G r . An exemplary show of the transformation from G to G r is presented in Fig. 3. Then we consider a shortest path problem [17], which aims to find the shortest path from u to v, denoted by SP r (u, v), in G r . The Dijkstra's algorithm [18] is employed here to find SP r (u, v).
Then we set t(u, v) as follows
t(u, v) = 1 M × L(SP r (u, v)) ,(7)
where L(•) and M denote the length of a path and the number of nodes except the starting node included in the shortest path, respectively. For the sake of clarity, consider the case shown in the right graph of Fig. 3, for which the shortest path from u
to v, SP r (u, v), is u → k → v, L(SP r (u, v)) = tr (u, k) + tr (k, v) = 4, M = 2 and thus t(u, v) = 1/8.
If the pattern of the trust information flow from u to v does not belong to any of the above mentioned categories, it then must belong to the 4th category, for which we set t(u, v) = 0. It is worth noting that, given T , the computation of t(u, v) for all cases included in the 1st, 3rd and 4th categories can be unified by a single formula as follows
t(u, v) = 1 M × M-1 m=1 1 t(pm,pm+1) , (8
)
where  8), we can infer that, provided all the other conditions are the same, the bigger the value of M is or the smaller the value of t(p m , p m+1 ) is, the smaller the value of t(u, v) will be, and vice versa. The above effect is consistent with our intuitive understanding of the property of transitivity in the trust type relationships between a pair of users.
p 1 = u, p M = v and p 1 → p 2 → . . . → p M is the shortest path in G r from u to v. </p><h2>publication_ref</h2> <p>['b16', 'b17'] </p><h2>figure_ref</h2> <p>['fig_1', 'fig_1'] </p><h2>table_ref</h2> <p>[] </p><h2>heading</h2> <p>Connections to related work </p><h2>text</h2> <p>The iTrace algorithm proposed here finds connections to several existent TaCF methods in the literature. The algorithm architecture of iTrace falls within a generic TaCF framework presented in [9], while the implicit inference procedure of iTrace presented here is unique. In a variety of existent TaCF methods [16,[19][20][21][22], the trust score is derived from the user rating data. To this regard, trust inference and the computation of user similarity are performed based on exactly the same information source. In contrast with the aforementioned work, the iTrace algorithm employs not only the user rating data but also data other than user rating, namely the explicit user trust data. Since the explicit trust data and the rating data are processed independently, the iTrace has the advantage of making full use of two complementary views in rating prediction. Furthermore, since the trust inference procedure can be performed offline prior to calculation of user similarity, the computation time of the iTrace for online rating predictions is similar to traditional CF methods. The iTrace algorithm also finds connections to our previous work on trust modeling in the context of wireless sensor networks [23][24][25]. Although the same term trust is used, its physical meaning is different. In iTrace, the term trust represents a classical social relationship among users, while in [23][24][25], it is an artificially designed concept related to abnormal sensory behaviors caused by sensor faults.
To our knowledge, the most similar work to our algorithm is a trust based CF method presented in [26], which has come to our attention only recently. In contrast with [26], we provide a new and more efficient way for readers to understand the shortest path based formulation of the trust inference problem by identifying four categories of trust information flow patterns and unifying three of them by a single formula, namely Eqn. (8). In addition, we consider two different ways, namely IW and LW as specified by Eqns.( 4) and ( 5), respectively, for fusion of trust and similarity; while in [26], only one way, i.e., LW, is considered. Further, the iTrace algorithm leverages the property of trust value attenuation in the trust propagation process by adding a penalization item M to the denominator of Eqn.( 7), while the method in [26] does not take into account of such attenuation effect. Finally, through a public open dataset, we demonstrate that our iTrace algorithm outperforms the method proposed in [26]. </p><h2>publication_ref</h2> <p>['b8', 'b15', 'b18', 'b19', 'b20', 'b21', 'b22', 'b23', 'b24', 'b22', 'b23', 'b24', 'b25', 'b25', 'b7', 'b25', 'b25', 'b25'] </p><h2>figure_ref</h2> <p>[] </p><h2>table_ref</h2> <p>[] </p><h2>heading</h2> <p>PERFORMANCE EVALUATION </p><h2>text</h2> <p>In this section, we present experimental results, which show that the proposed iTrace algorithm outperforms existing competitor methods. We conducted empirical performance evaluations on the public dataset Filmtrust [27]. </p><h2>publication_ref</h2> <p>['b26'] </p><h2>figure_ref</h2> <p>[] </p><h2>table_ref</h2> <p>[] </p><h2>heading</h2> <p>About the dataset </p><h2>text</h2> <p>The Filmtrust dataset consists of a N ×M rating matrix R and an N × N explicit trust matrix T e , associated with N = 1508 users and M = 2071 movie items. The (i, j)th cell of R is filled with user i's rating on item j if it exists; otherwise it is empty. A total number of 35416 ratings are included in R, whose values are between 0.5 and 4; and the empty cells of R are missing values to be predicted. The matrix T e is sparse in that only 1642 cells of it are filled with value 1 associated with a set of trust statements and the other cells are empty, corresponding to missing values to be predicted. </p><h2>publication_ref</h2> <p>[] </p><h2>figure_ref</h2> <p>[] </p><h2>table_ref</h2> <p>[] </p><h2>heading</h2> <p>Experiment setting </p><h2>text</h2> <p>The comparison methods include the traditional CF algorithm, which uses the Pearson correlation as the similarity measure, an explicit trust based TaCF (called E-TaCF for short in what follows) and a Dijkstra's algorithm based TaCF (termed D-TaCF for short in what follows) proposed in [26]. The traditional CF is included here as a baseline for performance comparison. The E-TaCF algorithm can be regarded as a simplified version of iTrace that discards the whole implicit trust inference procedure, namely, it sets T straightforward to be T e prior to the calculation of Eqn. (3). We consider two types of E-TaCF, E-TaCF-I and E-TaCF-II, corresponding to the usage of Eqn.(4) and of Eqn. (5), respectively, for fusion of similarity and trust. The missing values in T e are filled with 0 when performing E-TaCF. This E-TaCF algorithm is included here in order to demonstrate the value of the proposed implicit trust procedure. The D-TaCF is involved here as it is the most similar method in the literature to our iTrace algorithm. For iTrace and E-TaCF, we consider the IW and LW weighting mechanisms both, corresponding to Eqns.( 4) and ( 5), respectively, and the aim is to investigate which one is better for use. Apart from Eqn. (7), we also considered another way to calculate t(u, v) by
t(u, v) = 1/L(SP r (u, v)). (9
)
The purpose is to demonstrate that taking account of the attenuation feature of trust via Eqn.( 7) is beneficial for improving accuracy in recommendations. To summarize, we considered in total 4 types of iTrace as shown in Table 1.  </p><h2>publication_ref</h2> <p>['b25', 'b2', 'b4', 'b6'] </p><h2>figure_ref</h2> <p>[] </p><h2>table_ref</h2> <p>['tab_1'] </p><h2>heading</h2> <p>Experiment results </p><h2>text</h2> <p>In our experiment, the number of voting users K takes values in {5, 10, 15, 20, 25, 30, 35, 40, 45}, and for every K value, a cross validation type test for every comparison method is performed. We partition the sample of rating data into two complementary subsets, perform the user similarity analysis on one subset, which occupies 80% of the whole dataset, hiding the other 20% ratings and trying to predict them. The predicted rating is then compared with the real rating and the difference (in absolute value) is the prediction error. The mean absolute error (MAE) is adopted as the performance measure.
To reduce variability, we perform 5 rounds of the above operations using different partitions for each algorithm, and the prediction results are averaged over the rounds. For the sake of fairness in comparison, we try different α values and then select the optimal value 0.3 for use for iTrace-III and iTrace-IV.
The comparison result, in terms of averaged MAE per rating prediction, is presented in Fig. 4. It is shown that trust based methods outperform the traditional CF significantly and that the iTrace-I algorithm beats all the other competitors. It also indicates that Eqn.( 4) is preferable to Eqn. (5) and Eqn.( 7) is preferable to Eqn. (9) for use in implementing iTrace. Note that, since the implicit trust inference procedure is performed offline, the computation time of iTrace for online rating prediction is similar to the traditional CF method.  </p><h2>publication_ref</h2> <p>['b4', 'b8'] </p><h2>figure_ref</h2> <p>['fig_2'] </p><h2>table_ref</h2> <p>[] </p><h2>heading</h2> <p>CONCLUSIONS </p><h2>text</h2> <p>In this paper, we proposed an improved CF algorithm termed iTrace, which is featured by an embedded powerful implicit trust inference method. This method can estimate the implicit trust relationship between a pair of users based on available but very limited explicit trust information among users. The result from an extensive experiment on a public dataset demonstrates the superiority of our algorithm to existent competitors. Future work lies in using the proposed technique to analyze more datasets. How to model and employ more social interactions among users and the temporal dynamics in the users' rating behaviors to improve CF is also a promising topic for future investigation. </p><h2>publication_ref</h2> <p>[] </p><h2>figure_ref</h2> <p>[] </p><h2>table_ref</h2> <p>[] </p><h1>references</h1><h2>ref_id</h2> <p>b0 </p><h2>title</h2> <p>Recommender systems </p><h2>journal</h2> <p>Communications of the ACM </p><h2>year</h2> <p>1997 </p><h2>authors</h2> <p>P Resnick; H R Varian </p><h2>ref_id</h2> <p>b1 </p><h2>title</h2> <p>Item-based collaborative filtering recommendation algorithms </p><h2>journal</h2> <p> </p><h2>year</h2> <p>2001 </p><h2>authors</h2> <p>B Sarwar; G Karypis; J Konstan; J Riedl </p><h2>ref_id</h2> <p>b2 </p><h2>title</h2> <p>Evaluating collaborative filtering recommender systems </p><h2>journal</h2> <p>ACM Transactions on Information Systems </p><h2>year</h2> <p>2004 </p><h2>authors</h2> <p>J L Herlocker; J A Konstan; L G Terveen; J T Riedl </p><h2>ref_id</h2> <p>b3 </p><h2>title</h2> <p>Advances in collaborative filtering </p><h2>journal</h2> <p>Springer </p><h2>year</h2> <p>2015 </p><h2>authors</h2> <p>Y Koren; R Bell </p><h2>ref_id</h2> <p>b4 </p><h2>title</h2> <p>An algorithmic framework for performing collaborative filtering </p><h2>journal</h2> <p>ACM </p><h2>year</h2> <p>1999 </p><h2>authors</h2> <p>J L Herlocker; J A Konstan; A Borchers; J Riedl </p><h2>ref_id</h2> <p>b5 </p><h2>title</h2> <p>Empirical analysis of predictive algorithms for collaborative filtering </p><h2>journal</h2> <p>Morgan Kaufmann Publishers Inc </p><h2>year</h2> <p>1998 </p><h2>authors</h2> <p>J S Breese; D Heckerman; C Kadie </p><h2>ref_id</h2> <p>b6 </p><h2>title</h2> <p>Unifying user-based and item-based collaborative filtering approaches by similarity fusion </p><h2>journal</h2> <p>ACM </p><h2>year</h2> <p>2006 </p><h2>authors</h2> <p>J Wang; A P De; M J Vries;  Reinders </p><h2>ref_id</h2> <p>b7 </p><h2>title</h2> <p>Merging trust in collaborative filtering to alleviate data sparsity and cold start </p><h2>journal</h2> <p>Knowledge-Based Systems </p><h2>year</h2> <p>2014 </p><h2>authors</h2> <p>G Guo; J Zhang; D Thalmann </p><h2>ref_id</h2> <p>b8 </p><h2>title</h2> <p>Trust-aware collaborative filtering for recommender systems </p><h2>journal</h2> <p>Springer </p><h2>year</h2> <p>2008 </p><h2>authors</h2> <p>P Massa; P Avesani </p><h2>ref_id</h2> <p>b9 </p><h2>title</h2> <p>Trust-aware recommender systems </p><h2>journal</h2> <p>ACM </p><h2>year</h2> <p>2007 </p><h2>authors</h2> <p> </p><h2>ref_id</h2> <p>b10 </p><h2>title</h2> <p>Recommender systems handbook </p><h2>journal</h2> <p>Springer </p><h2>year</h2> <p>2015 </p><h2>authors</h2> <p>F Ricci; L Rokach; B Shapira; P B Kantor </p><h2>ref_id</h2> <p>b11 </p><h2>title</h2> <p>Trust in recommender systems </p><h2>journal</h2> <p>ACM </p><h2>year</h2> <p>2005 </p><h2>authors</h2> <p>J O'donovan; B Smyth </p><h2>ref_id</h2> <p>b12 </p><h2>title</h2> <p>Improving recommendation accuracy by clustering social networks with trust </p><h2>journal</h2> <p>Recommender Systems & the Social Web </p><h2>year</h2> <p>2009 </p><h2>authors</h2> <p>T Dubois; J Golbeck; J Kleint; A Srinivasan </p><h2>ref_id</h2> <p>b13 </p><h2>title</h2> <p>Improving recommendation accuracy by combining trust communities and collaborative filtering </p><h2>journal</h2> <p>ACM </p><h2>year</h2> <p>2014 </p><h2>authors</h2> <p>X Ma; H Lu; Z Gan </p><h2>ref_id</h2> <p>b14 </p><h2>title</h2> <p>Trust and transitivity: how trust-transfer works </p><h2>journal</h2> <p> </p><h2>year</h2> <p>2012 </p><h2>authors</h2> <p>R Falcone; C Castelfranchi </p><h2>ref_id</h2> <p>b15 </p><h2>title</h2> <p>Alleviating the sparsity problem of collaborative filtering using trust inferences </p><h2>journal</h2> <p>Trust Management </p><h2>year</h2> <p>2005 </p><h2>authors</h2> <p>M Papagelis; D Plexousakis; T Kutsuras </p><h2>ref_id</h2> <p>b16 </p><h2>title</h2> <p>Faster algorithms for the shortest path problem </p><h2>journal</h2> <p>Journal of the ACM </p><h2>year</h2> <p>1990 </p><h2>authors</h2> <p>R K Ahuja; K Mehlhorn; J Orlin; R E Tarjan </p><h2>ref_id</h2> <p>b17 </p><h2>title</h2> <p>Dijkstras shortest path algorithm </p><h2>journal</h2> <p>Journal of Formalized Mathematics </p><h2>year</h2> <p>2003 </p><h2>authors</h2> <p>J.-C Chen </p><h2>ref_id</h2> <p>b18 </p><h2>title</h2> <p>Supporting trust in virtual communities </p><h2>journal</h2> <p>IEEE </p><h2>year</h2> <p>2000 </p><h2>authors</h2> <p>A Abdul-Rahman; S Hailes </p><h2>ref_id</h2> <p>b19 </p><h2>title</h2> <p>Trust-based collaborative filtering </p><h2>journal</h2> <p>Springer </p><h2>year</h2> <p>2008 </p><h2>authors</h2> <p>N Lathia; S Hailes; L Capra </p><h2>ref_id</h2> <p>b20 </p><h2>title</h2> <p>Using trust in collaborative filtering recommendation </p><h2>journal</h2> <p>Springer </p><h2>year</h2> <p>2007 </p><h2>authors</h2> <p>C.-S Hwang; Y.-P Chen </p><h2>ref_id</h2> <p>b21 </p><h2>title</h2> <p>A model of trust derivation from evidence for use in recommendation systems </p><h2>journal</h2> <p> </p><h2>year</h2> <p>2004 </p><h2>authors</h2> <p>G Pitsilis; L F Marshall </p><h2>ref_id</h2> <p>b22 </p><h2>title</h2> <p>Toward reliable data analysis for internet of things by bayesian dynamic modeling and computation </p><h2>journal</h2> <p>IEEE </p><h2>year</h2> <p>2015 </p><h2>authors</h2> <p>B Liu; Z Xu; J Chen; G Yang </p><h2>ref_id</h2> <p>b23 </p><h2>title</h2> <p>Online fault-tolerant dynamic event region detection in sensor networks via trust model </p><h2>journal</h2> <p>IEEE </p><h2>year</h2> <p>2017 </p><h2>authors</h2> <p>J Wang; B Liu </p><h2>ref_id</h2> <p>b24 </p><h2>title</h2> <p>State space model based trust evaluation over wireless sensor networks: An iterative particle filter approach </p><h2>journal</h2> <p>The Journal of Engineering </p><h2>year</h2> <p>2017 </p><h2>authors</h2> <p>B Liu; S Cheng </p><h2>ref_id</h2> <p>b25 </p><h2>title</h2> <p>Trust-based collaborative filtering algorithm in social network </p><h2>journal</h2> <p>IEEE </p><h2>year</h2> <p>2016 </p><h2>authors</h2> <p>X Chen; Y Guo; Y Yang; Z Mi </p><h2>ref_id</h2> <p>b26 </p><h2>title</h2> <p>Filmtrust: Movie recommendations using trust in web-based social networks </p><h2>journal</h2> <p> </p><h2>year</h2> <p>2006 </p><h2>authors</h2> <p>J Golbeck; J Hendler </p><h1>figures</h1><h2>figure_label</h2> <p>1 </p><h2>figure_type</h2> <p>figure </p><h2>figure_id</h2> <p>fig_0 </p><h2>figure_caption</h2> <p>Fig. 1 :1Fig. 1: Architecture of the iTrace algorithm. The inputs of the algorithm include an N × N explicit trust matrix and an N × M rating matrix. N and M denote the number of the users and of the items, respectively. </p><h2>figure_data</h2> <p> </p><h2>figure_label</h2> <p>3 </p><h2>figure_type</h2> <p>figure </p><h2>figure_id</h2> <p>fig_1 </p><h2>figure_caption</h2> <p>Fig. 3 :3Fig. 3: An example show of the transformation from a weighted directed graph (the left panel) to its reciprocal counterpart graph (the right panel). The edge weight in the right graph is the reciprocal of the weight in the left graph. </p><h2>figure_data</h2> <p> </p><h2>figure_label</h2> <p>4 </p><h2>figure_type</h2> <p>figure </p><h2>figure_id</h2> <p>fig_2 </p><h2>figure_caption</h2> <p>Fig. 4 :4Fig. 4: Averaged MAE per rating prediction. </p><h2>figure_data</h2> <p> </p><h2>figure_label</h2> <p>1 </p><h2>figure_type</h2> <p>table </p><h2>figure_id</h2> <p>tab_1 </p><h2>figure_caption</h2> <p>4 types of the iTrace algorithm under consideration </p><h2>figure_data</h2> <p>iTrace-I iTrace-II iTrace-III iTrace-IVchoice for fEqn.(4)Eqn.(4)Eqn.(5)Eqn.(5)choice for t(u, v)Eqn.(7)Eqn.(9)Eqn.(7)Eqn.(9) </p><h1>formulas</h1><h2>formula_id</h2> <p>formula_0 </p><h2>formula_text</h2> <p>r u,i = ru + v∈U w(u, v)(r v,i -rv ) v∈U |w(u, v)| ,(1) </p><h2>formula_coordinates</h2> <p>[1.0, 358.2, 364.29, 200.84, 26.05] </p><h2>formula_id</h2> <p>formula_1 </p><h2>formula_text</h2> <p>(u, v) = i∈I (r u,i -ru )(r v,i -rv ) i∈I (r u,i -ru ) 2 i∈I (r v,i -rv ) 2 , (2 </p><h2>formula_coordinates</h2> <p>[1.0, 334.98, 571.65, 220.15, 27.01] </p><h2>formula_id</h2> <p>formula_2 </p><h2>formula_text</h2> <p>r u,i = ru + v∈U f (sim(u, v), t(u, v))(r v,i -rv ) v∈U |f (sim(u, v), t(u, v))| ,(3) </p><h2>formula_coordinates</h2> <p>[2.0, 344.76, 242.73, 214.28, 37.96] </p><h2>formula_id</h2> <p>formula_3 </p><h2>formula_text</h2> <p>f (sim(u, v), t(u, v)) = sim(u, v) t(u, v) j∈U sim(u, j) t(u, j) .(4) </p><h2>formula_coordinates</h2> <p>[2.0, 341.28, 368.85, 217.76, 28.09] </p><h2>formula_id</h2> <p>formula_4 </p><h2>formula_text</h2> <p>f (sim(u, v), t(u, v)) = αsim(u, v) j∈U sim(u, j) + (1 -α) t(u, v) j∈U t(u, j) ,(5) </p><h2>formula_coordinates</h2> <p>[2.0, 318.0, 449.01, 241.04, 37.96] </p><h2>formula_id</h2> <p>formula_5 </p><h2>formula_text</h2> <p>t(u, v) = |S(u) S(v)| |S(u) S(v)| ,(6) </p><h2>formula_coordinates</h2> <p>[3.0, 386.28, 278.97, 172.76, 23.64] </p><h2>formula_id</h2> <p>formula_6 </p><h2>formula_text</h2> <p>t(u, v) = 1 M × L(SP r (u, v)) ,(7) </p><h2>formula_coordinates</h2> <p>[3.0, 375.72, 587.85, 183.32, 23.89] </p><h2>formula_id</h2> <p>formula_7 </p><h2>formula_text</h2> <p>to v, SP r (u, v), is u → k → v, L(SP r (u, v)) = tr (u, k) + tr (k, v) = 4, M = 2 and thus t(u, v) = 1/8. </p><h2>formula_coordinates</h2> <p>[3.0, 315.24, 664.05, 243.78, 23.76] </p><h2>formula_id</h2> <p>formula_8 </p><h2>formula_text</h2> <p>t(u, v) = 1 M × M-1 m=1 1 t(pm,pm+1) , (8 </p><h2>formula_coordinates</h2> <p>[4.0, 104.88, 282.21, 189.49, 27.57] </p><h2>formula_id</h2> <p>formula_9 </p><h2>formula_text</h2> <p>) </p><h2>formula_coordinates</h2> <p>[4.0, 294.37, 289.67, 3.91, 8.91] </p><h2>formula_id</h2> <p>formula_10 </p><h2>formula_text</h2> <p>p 1 = u, p M = v and p 1 → p 2 → . . . → p M is the shortest path in G r from u to v. </p><h2>formula_coordinates</h2> <p>[4.0, 54.48, 321.45, 243.75, 22.33] </p><h2>formula_id</h2> <p>formula_11 </p><h2>formula_text</h2> <p>t(u, v) = 1/L(SP r (u, v)). (9 </p><h2>formula_coordinates</h2> <p>[5.0, 122.52, 236.13, 171.85, 12.25] </p><h2>formula_id</h2> <p>formula_12 </p><h2>formula_text</h2> <p>) </p><h2>formula_coordinates</h2> <p>[5.0, 294.37, 238.78, 3.91, 8.91] </p><h1>doi</h1> <p> </p>

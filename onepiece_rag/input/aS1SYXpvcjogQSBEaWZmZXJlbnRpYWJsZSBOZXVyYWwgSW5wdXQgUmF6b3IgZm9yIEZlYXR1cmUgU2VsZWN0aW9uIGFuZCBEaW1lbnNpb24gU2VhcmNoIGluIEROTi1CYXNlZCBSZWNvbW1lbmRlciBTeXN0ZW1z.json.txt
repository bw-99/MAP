<h1>abstract</h1> <p>Input features play a crucial role in DNN-based recommender systems with thousands of categorical and continuous fields from users, items, contexts, and interactions. Noisy features and inappropriate embedding dimension assignments can deteriorate the performance of recommender systems and introduce unnecessary complexity in model training and online serving. Optimizing the input configuration of DNN models, including feature selection and embedding dimension assignment, has become one of the essential topics in feature engineering. However, in existing industrial practices, feature selection and dimension search are optimized sequentially, i.e., feature selection is performed first, followed by dimension search to determine the optimal dimension size for each selected feature. Such a sequential optimization mechanism increases training costs and risks generating suboptimal input configurations. To address this problem, we propose a differentiable neural input razor (i-Razor) that enables joint optimization of feature selection and dimension search. Concretely, we introduce an end-to-end differentiable model to learn the relative importance of different embedding regions of each feature. Furthermore, a flexible pruning algorithm is proposed to achieve feature filtering and dimension derivation simultaneously. Extensive experiments on two large-scale public datasets in the Click-Through-Rate (CTR) prediction task demonstrate the efficacy and superiority of i-Razor in balancing model complexity and performance. </p><h1>sections</h1><h2>heading</h2> <p>INTRODUCTION </p><h2>text</h2> <p>I N this era of information overload, recommender systems powered by information technology and deep learning have become an effective way to retrieve potentially useful information for users from a huge range of options [1], [2], [3]. Deep learning recommender systems enhance recommendation performance by capturing complex correlations between features [4]. Experts resort to feature engineering, generating categorical, numerical, statistical, and cross features, to better understand the user's interests. However, due to the universal approximation property [5] of deep neural networks (DNN), feeding noisy features into a DNN model can adversely affect predictive performance [4], [6]. Meanwhile, because the embedding lookup table dominates both the size and inductive bias of DNN-based recommendation models [7], the embedding dimensions of input features are crucial to the performance and complexity of recommender systems. Therefore, it is highly desired to efficiently identify effective features from the original feature set and specify appropriate embedding dimensions. As illustrated in Figure 1, conventional industrial practices typically optimize feature selection and embedding dimension allocation separately. In contrast, this work explores jointly optimizing both in an end-to-end fashion. Feature selection is a crucial task in recommender systems and has been the subject of extensive research. Previous studies have categorized feature selection methods into three main categories: Filter, Wrapper, and Embedded methods [8], [9], [10]. Filter methods measure the discriminant attributes of features through criteria such as information gain [11] and feature consistency [12], so as to extract high-ranked features. Wrapper methods optimize feature subsets by using performance assessments such as the K-nearest neighbor (KNN) algorithm and linear discriminant analysis (LDA) instead of solely relying on evaluation criteria [13]. Compared with Filter and Wrapper, Embedded methods, such as the least absolute shrinkage and selection operator (LASSO) [14] and the gradient-boosting decision tree (GBDT) [15], [16], incorporate feature selection as part of the training process. Despite compensating for the drawbacks of low efficiency in Filter and high computational cost in Wrapper, the effectiveness of Embedded methods is substantially dependent on conductive parameters and strict model assumptions [9]. Although the aforementioned feature selection methods have proven effective in several scenarios, there could be a mismatch between the subset of features selected to optimize the feature selection model and the subset that would ideally serve the target DNN model. Recognizing that DNN models can capture more complex feature interactions, it would be logical to use the target DNN model to guide feature selection directly. In light of this, we propose a model-consistent feature selection approach that integrates the target DNN model into the feature selection process. Our approach belongs to the Embedded methods in a broad sense, but there is a notable difference between our study and previous work: we evaluate the importance of features from the point of view of each feature's optimal embedding dimension size under the target DNN model.
In recent years, there has been an increasing interest in studying embedding dimensions, as the embedding layer impacts on both the scale and the inductive bias of DNNbased recommendation models [7]. Specifying an adaptive embedding dimension for each feature is a problem of exponential complexity. A common practice is to set a unified value for all features by hyperparameter tuning experiments or relying on expert knowledge. However, such practice does not distinguish between different features and can be memory inefficient. Inspired by recent progress in neural architecture search (NAS) [17], methods based on reinforcement learning [18], differentiable search [19], [20], pruning [21], and so forth, have been proposed to perform dimension search at either field level or feature level 1 . Despite the ability of these methods to reduce model parameters without compromising model performance given a carefully selected feature subset, their effectiveness without feature selection remains unexplored. The dependency on feature selection effectively equates to assuming all input features are beneficial during the dimension search process. We believe that there is a necessity to conduct dimension search under the assumption that not all features in the original feature set are helpful, as the updating of features can be very frequent in industrial practice. With this objective, we propose a differentiable framework that identifies redundantly assigned embedding dimensions for pruning. Specifically, a feature with its embedding dimension pruned to 0 is considered unimportant. It is worth noting that features are typically grouped into fields for practical reasons in industrial recommender systems, and these fields can 1. Field-level methods assign the same dimension to all features within the same field while feature-level ones can assign diverse dimensions to different features within the same field.
have significantly varying cardinalities. For example, the field Gender generally contains two features "Female" and "Male", while the field Browsed Goods may have millions of features. While individual dimension assignment for each feature (i.e., feature-level methods) might boost performance, field selection and field-level dimension search are often prioritized in large-scale recommender systems to reduce complexity and enhance implementation ease. This paper emphasizes assigning different dimension sizes to fields based on their importance, and discarding less important fields during the retraining stage. Unless otherwise specified, the term "feature selection" hereafter refers to the selection of fields.
To guide the input configuration towards better optima, we propose a differentiable neural input razor (i-Razor) that is capable of simultaneously pruning unnecessary fields and assigning adaptive embedding dimensions. The training of i-Razor consists of two stages. i) In the pretraining stage, we refine the dimension search space to learn the importance of different fields and different embedding regions. Meanwhile, to control the number of model parameters and avoid overfitting, we introduce a novel regularization term to regularize the model complexity. ii) In the retraining stage, a proposed pruning algorithm is executed to remove redundant fields and preserve the desired embedding dimensions for the remaining fields according to the relative weights of each embedding region. We then reconstruct the DNN model and retrain it with the training dataset based on the derived input configuration. We conduct extensive experiments on two large-scale public datasets for the CTR prediction task. The experimental results show that i-Razor achieves higher prediction accuracy while saving fields than several state-ofthe-art methods.
The main contributions of this paper are threefold. • Traditionally, feature selection and embedding dimension search were treated as separate processes. Our research presents a pioneering approach that explores their joint optimization. This innovative leap not only bridges the gap between feature selection and dimension search but also hints at a higher level of alignment between the two, which has the potential to discover input configurations that more closely approach optimal solutions. The remainder of this paper is organized as follows: Section 2 discusses the related literature on feature selection and embedding dimension search. We formulate the input configuration optimization problem and present the framework of i-Razor in Section 3. In Section 4, we elaborate on our experimental setup and empirical results. Finally, we conclude our work and discuss its potential future extensions in Section 5. </p><h2>publication_ref</h2> <p>['b0', 'b1', 'b2', 'b3', 'b4', 'b3', 'b5', 'b6', 'b7', 'b8', 'b9', 'b10', 'b11', 'b12', 'b13', 'b14', 'b15', 'b8', 'b6', 'b16', 'b17', 'b18', 'b19', 'b20'] </p><h2>figure_ref</h2> <p>['fig_0'] </p><h2>table_ref</h2> <p>[] </p><h2>heading</h2> <p>RELATED WORK </p><h2>text</h2> <p>In this section, we briefly review the works related to our study, including two branches of the literature: feature selection approaches and dimension search techniques. </p><h2>publication_ref</h2> <p>[] </p><h2>figure_ref</h2> <p>[] </p><h2>table_ref</h2> <p>[] </p><h2>heading</h2> <p>Feature Selection Approaches </p><h2>text</h2> <p>Feature selection refers to the process of finding out a subset from the original feature set without losing useful information [22]. Existing feature selection methods include the following three categories: Filter, Wrapper, and Embedded methods [23]. Filter methods measure the association between the feature and the class label via some specific evaluation criteria [22], such as information gain [24], minimum redundant maximum relevance [25], and spatiotemporal preserving representations [26]. This stream of research also includes feature selection methods based on statistical tests, e.g., Chi-squared [27], Pearson correlation, and ANOVA F-value test [28]. Input features that demonstrate a significant statistical relationship with the output variable are retained and utilized for further analysis, while others are discarded. Filter methods are expected to have the highest computational efficiency and tend to keep more features from the total feature space [9], [10]. By contrast, Wrapper methods adopt specific learning techniques such as KNN [29], Naive Bayes [30], LDA [31], and adaptive semisupervised feature analysis [32] to assess the performance of feature combinations [13]. Though more efficient for feature selection than Filter methods, Wrapper methods require higher computational resources [33]. In these two types of feature selection methods, the feature selection process and the model training process are distinctly separate.
Unlike Filter and Wrapper methods, Embedded methods such as LASSO [14], GBDT [15], and semi-supervised recurrent convolutional attention models [34] integrate the feature selection process with the model training process, i.e., feature selection is performed automatically during the model training process [8]. Recently, the advancement of NAS has spawned a new research hotspot in Embedded methods, the automatic search for useful features with AutoML techniques [10], [35]. For instance, AutoFIS [36] proposes a gating mechanism to identify and mask the intersection of useless features in factorization models. AutoField [37] assigns two operators to each field, one for selecting and the other for ignoring that field. By comparing the relative importance of these two operators, it determines whether to select that field or not. Operators of each field of AutoField [37] and AutoFIS [36] are independent of each other, while AdaFS [38] assigns associated operators to each field through softmax operation, and measures the relative importance of fields corresponding to each operator by comparing the weight of each operator, so as to screen features. Meanwhile, there has been a growing interest in automatic feature selection in deep learning-based sequential recommendation systems. For instance, NASR [35] made significant strides in designing a hybrid sequential recommendation model with the aim to ensemble the capacity of both self-attention and convolutional architectures. The proposed method can automatically select the architecture operation on each layer.
Inspired by these advancements, our approach, i-Razor, also belongs to the Embedded category, but with a unique perspective. i-Razor facilitates model-consistent feature selection by evaluating the importance of each feature concerning its optimal embedding dimension in the target DNN model. Building upon the foundation laid by AutoField, we propose a 0-dimension absorbing operator, which signifies the action of deselecting a specific feature. In addition, we enhance the existing design of the dimension search space, which commonly segments the embedding dimensions, by introducing the concept of the 0-dimension operator into this process. The weight associated with each operator measures the relative importance of these divisions, with 0 dimension indicating that all regions should be masked. By considering combinations of these operators, we derive the final input configuration. This method allows us to perform dimension search and feature selection concurrently, offering a more efficient manner to ensure that the chosen features and embedding dimensions contribute to the target model's performance. </p><h2>publication_ref</h2> <p>['b21', 'b22', 'b21', 'b23', 'b24', 'b25', 'b26', 'b27', 'b8', 'b9', 'b28', 'b29', 'b30', 'b31', 'b12', 'b32', 'b13', 'b14', 'b33', 'b7', 'b9', 'b34', 'b35', 'b36', 'b36', 'b35', 'b37', 'b34'] </p><h2>figure_ref</h2> <p>[] </p><h2>table_ref</h2> <p>[] </p><h2>heading</h2> <p>Dimension Search Techniques </p><h2>text</h2> <p>Since assigning unified embedding dimensions to all features is incompatible with their heterogeneity, the new paradigm of mixed dimensions has gained more and more attention [7], [18], [20], [39]. To be specific, in a mixed dimension scheme, different features can have different embedding dimensions. There are two types of dimension search methods: featurelevel and field-level. Feature-level methods aim to assign different embedding dimensions to different features within the same field. For example, NIS [18] applies reinforcement learning to generate decision sequences on the selection of dimensions for different features. Other heuristic approaches, such as MDE [39], DPG [40], and MGQE [41], attempt to assign higher dimensions to features with higher frequencies. However, these methods suffer from numerous unique values in each field, while the feature frequencies are highly dynamic and not pre-known in real-life situations. Although the frequency of different features can be estimated by sampling, the fine-grained dimension search at feature level introduces a sizeable computational overhead and additional complexity. In this work, we focus on the second group for its efficiency, which aims to allocate different dimensions to different fields, while different features in the same field share a common dimension size. Based on advances in NAS [42], the second type of dimension search method normally adopts an AutoML style to search for the desired embedding dimension from a set of predefined candidate embedding dimensions. Inspired by DARTS [17], [43], AutoDim [19] proposes a differentiable search method to analyze the suitability of different candidate embedding dimensions by calculating the attention coefficients of the corresponding operators. After the search, AutoDim assigns to each field the candidate dimension size whose corresponding operator has maximum attention. DNIS [7] eliminates the dependency on predefined candidate dimensions by directly pruning non-informative embedding blocks whose values are less than a given threshold. Although existing dimension search methods work well in the case of a well-selected subset of fields, their effectiveness in the presence of the original set of fields without feature selection remains understudied.
Similar to AutoDim, our objective is to automatically search for the optimal embedding dimension configuration on a given set of embedding dimension candidates. We differ from AutoDim: i) We consider dimension search on the original field set and avoid dimension assignment to useless fields by introducing a novel candidate dimension, i.e., dimension 0. After the search is completed, the redundant dimensions and the fields dominated by dimension 0 will be discarded, which means that dimension search and feature selection can be achieved simultaneously. ii) There is overlap between different candidate dimensions in AutoDim, i.e., the larger embedding dimensions cover the smaller ones, whereas the candidate dimensions in i-Razor do not overlap with each other. iii) Unlike AutoDim, which uses the argmax operator for dimension pruning, we propose a flexible pruning algorithm that allows more fine-grained dimension assignment. </p><h2>publication_ref</h2> <p>['b6', 'b17', 'b19', 'b38', 'b17', 'b38', 'b39', 'b40', 'b41', 'b16', 'b42', 'b18', 'b6'] </p><h2>figure_ref</h2> <p>[] </p><h2>table_ref</h2> <p>[] </p><h2>heading</h2> <p>METHODOLOGY </p><h2>text</h2> <p>In this section, we first formulate the feature selection and embedding dimension search problem. Then, we describe the proposed i-Razor, a two-stage end-to-end framework to automatically select important fields and assign adaptive dimensions to the selected fields. </p><h2>publication_ref</h2> <p>[] </p><h2>figure_ref</h2> <p>[] </p><h2>table_ref</h2> <p>[] </p><h2>heading</h2> <p>Problem Formulation </p><h2>text</h2> <p>We assume that the original field set F consists of N fields, whether useful or not. Meanwhile, taking online resources into consideration, we can roughly give the search space of dimension search:
D = d 1 , • • • , d K , where K represents the number of candidate dimensions and d 1 < • • • < d K .
A solution A to the input configuration optimization problem involves not only filtering a field subset F ⊆ F in favor of the target DNN model, but also specifying the corresponding embedding dimension size for these selected fields. Denoting the configuration of A by C A = (f i , d fi ) | f i ∈ F, we can formulate the problem of finding the configuration that maximizes the performance of the target DNN model as follows:
min A L (C A , W (A)) ,(1)
where L is a task-specific loss function, W(A) denotes the optimal parameters of the DNN model under configuration A, and d fi specifies the unified dimension size assigned to all features in field f i .
Finding the optimal solution to the input configuration optimization problem is an NP-Hard problem, with an incredibly huge space (typical size of 2 N K ) to search for. For the purpose of automatically selecting essential features from a noisy feature set while learning proper dimensions simultaneously without loss of generality and model performance, we propose an end-to-end differentiable framework, i-Razor. The overall framework is illustrated in Figure 2, which is made up of two stages: the pretraining stage and the retraining stage. We design the search space and the differentiable architecture for dimension search in the pretraining stage. To be specific, after an embedding layer, we adopt the target DNN structure to get model-consistent field importance evaluation by learning the relative weights of different operators. After that, in the retraining stage, a pruning algorithm is proposed to abandon unnecessary fields and determine the dimensions of the selected fields so that the target model can be retrained with the ultimate configuration. </p><h2>publication_ref</h2> <p>[] </p><h2>figure_ref</h2> <p>['fig_1'] </p><h2>table_ref</h2> <p>[] </p><h2>heading</h2> <p>Pretraining Stage </p><h2>text</h2> <p>The input search problem is actually consistent with hyperparameter optimization [44] in a broad sense, since the decision of the field subset F and the corresponding dimension configuration C A can be regarded as model hyperparameters to be determined before retraining the target model. However, the main difference is that the search space of C A in our problem is much larger than that of conventional hyperparameter optimization problems. </p><h2>publication_ref</h2> <p>['b43'] </p><h2>figure_ref</h2> <p>[] </p><h2>table_ref</h2> <p>[] </p><h2>heading</h2> <p>Search Space </p><h2>text</h2> <p>Before performing the input search, a suitable search space should be given in advance for dimension search. Generally, previous work [7], [19] defined the dimension candidate set D as a set of positive integers, which implicitly assumes that every field is indispensable to the performance of the model. The assumption holds well under fine-grained feature engineering. However, in industrial recommender systems, features are iterated rapidly to continuously improve the user experience, but not all newly generated features/fields are beneficial. When only given the original field set F rather than a well-chosen subset F ⊆ F, allocating dimensions to noisy fields would introduce superfluous memory consumption and lead to suboptimal performance. To avoid forcing dimension assignment to noisy fields, we propose a masking operator corresponding to dimension 0, which helps identify and filter out fields detrimental to the target DNN model. Despite the fact that neural networks can automatically adjust weights related to useless fields, the introduction of dimension 0 makes it easier to learn and observable for us to understand the importance of the field. We can easily obtain the ideal F for the retraining stage by removing the fields in F that are dominated by dimension 0. </p><h2>publication_ref</h2> <p>['b6', 'b18'] </p><h2>figure_ref</h2> <p>[] </p><h2>table_ref</h2> <p>[] </p><h2>heading</h2> <p>Embedding Division </p><h2>text</h2> <p>In this paper, we assign the same search space to all fields for simplicity, and it is straightforward to introduce varying candidate sets. Instead of directly concatenating the K candidate embedding dimensions together, a sharing embedding architecture is introduced in order to reduce storage space and increase training efficiency. As shown in Figure 3, we allocate a d K -dimensional embedding to each field f i , denoted by e i , which is divided into K independent regions. Specifically, the first region covers the front d 1 embedding blocks (corresponding to no dimensional blocks in the case of d 1 = 0) and the j-th (1 < j ≤ K) region ranges from the (d j-1 + 1)-th digit to the d j -th digit of e i . To automatically learn the relative importance of each embedding region to the performance of the target DNN model, we assign a corresponding operator O i j ∈ R d K to the j-th region. The elements in these operators are either 1 or 0, where 1 in a operator reflects control over the embedding block at the corresponding position, while 0 indicates the embedding block at that position is masked so that the operator is independent of that block. By determining whether to keep each region in the retraining stage individually, the dimension search problem can be reformulated as an operator selection problem.
In contrast to existing dimension search methods [19], [20], where different operators may share the front dimensions, the proposed decoupled structure is tailored for learning the relative importance of each independent embedding region, allowing for greater flexibility in selecting the appropriate combination of embedding regions based on the importance weights. Notice that by setting D subtly, such as
d j | d j = j×(j-1) 2 , j ∈ [1, K] or d j | d j = 2 j-1 , j ∈ [1, K]
, the actual dimension search space we can get is able to cover all the integers in the interval [d 1 , d K ] when we aim to select some of the embedding regions to determine the final dimension size after pruning unconsidered regions. For example, given D = 0, 1, 3, 6, we can get the dimension size of 5 by selecting the third region with 2 embedding blocks and the fourth region with 3 blocks. In contrast, previous methods can only select an embedding size that belongs to D because the regions controlled by different operators are overlapping, and the importance of these coupled operators is not independent of each other.
𝑒 ! " 𝑒 # " e $ " 𝑒 % " 𝑒 & " 𝑒 ' " 𝑒 ( " 𝑒 ) " 𝑒 ! Batch Norm 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 1 1 1 1 𝑒 ! ! 𝑂 ! " 𝑂 # " 𝑂 $ " 𝑂 % " 𝑂 & " Operators when 𝒟 = [0,1,2,4,8] Output Embedding 𝑒 ! " = (𝑎 " ! 𝑂 " ! + 𝑎 # ! 𝑂 # ! + 𝑎 $ ! 𝑂 $ ! + 𝑎 % ! 𝑂 % ! + 𝑎 & ! 𝑂 & ! ) * 𝑒 ! !
Fig. 3: Embedding transformation and division in i-Razor. </p><h2>publication_ref</h2> <p>['b18', 'b19'] </p><h2>figure_ref</h2> <p>[] </p><h2>table_ref</h2> <p>[] </p><h2>heading</h2> <p>Continuous Relaxation </p><h2>text</h2> <p>Inspired by DARTS [17], [43], we formulate the problem of joint optimization of feature selection and dimension search as an operator selection problem by incorporating continuous architecture parameters. Specifically, we introduce a soft layer that assigns varying weights
α i = α i 1 , • • • , α i K to learn the relative contribution of different embedding regions of field f i . Trainable variables w i = w i 1 , • • • , w i
K are introduced to calculate the value of each α i j :
α i j = exp(w i j /τ ) K j=1 exp(w i j /τ ) , for j = 1, 2, . . . , K,(2)
where τ > 0 is the temperature hyperparameter. Note that the magnitude of the values in e i can be different and easily coupled with other parameters in DNN, making it difficult for the architecture parameters α i to represent the relative importance of different embedding regions. Following [36],
[45], we adopt the batch normalization [46] technique before the embedding transformation to eliminate the scale issue. The normalized embedding e
i ′ = e i ′ 1 , • • • , e i ′ d K  is calculated as: e i ′ j = e i j -µ i j (B) [σ i j (B)] 2 + ϵ , for j = 1, 2, . . . , d K ,(3)
where µ i j (B) and σ i j (B) are the mean and standard deviation of e i j over a mini-batch B, and ϵ is a small positive constant to avoid numerical overflow. With this trick, we can force each value in e i ′ to approximately follow the Gaussian distribution N(0, 1), making them comparable with each other. As illustrated in Figure 3, the transformed embedding e i of field f i can be computed as:
e i = e i ′ ⊙ K j=1 α i j O i j ,(4)
where e i ′ is the output of the batch normalization layer and ⊙ is the element-wise product.
By applying Equation (4) to all fields and feeding all output embedding to the target DNN structure, we can obtain the relative importance of different embedding regions in the target model with a training set. Such an end-to-end importance evaluation mechanism allows the DNN model to softly select different embedding regions during model training, and an ideal subset of fields F ⊆ F and the corresponding discrete mixed dimension scheme C A can then be derived after training. </p><h2>publication_ref</h2> <p>['b16', 'b42', 'b35', 'b45'] </p><h2>figure_ref</h2> <p>[] </p><h2>table_ref</h2> <p>[] </p><h2>heading</h2> <p>Loss Function </p><h2>text</h2> <p>In recommendation tasks, it is common for the number of features in different fields to vary greatly. For example, the field Gender usually has two features, while the field Browsed Goods may have millions of features. Therefore, varying even one embedding dimension on fields like Browsed Goods can lead to a significant change in the embedding lookup table size. In order to balance model performance and memory consumption, inspired by [42], we propose a novel regularization term L p to regularize the number of model parameters:
L p = N i=1 |f i | N j=1 |f j | × K m=1 c m α i m ,(5)
c m = d 1 , m = 1; d m -d m-1 , otherwise,(6)
where |f i | indicates the number of features contained in field f i and c m represents the size of the embedding region that operator O i m controls. We intuitively expect the weighting scheme of L p to penalize those fields and regions with large cardinality, thus facilitating the compression of the model. In this paper, we focus on the CTR prediction task, where cross-entropy loss is commonly used. We combine it with L p to define the loss function of the pretraining stage as follows:
L(y, ŷ) = -y log ŷ -(1 -y) log(1 -ŷ) + λL p ,(7)
where y ∈ 0, 1 is the real label, ŷ ∈ [0, 1] is the predicted probability of y = 1, and the hyperparameter λ is a coefficient to control the degree of regularization. </p><h2>publication_ref</h2> <p>['b41'] </p><h2>figure_ref</h2> <p>[] </p><h2>table_ref</h2> <p>[] </p><h2>heading</h2> <p>Algorithm 1: </p><h2>text</h2> <p>The CPT-based Pruning Algorithm
Input: The value of α i after pretraining, the threshold cpt (0 ≤ cpt ≤ 1), and the search space
D = d 1 , • • • , d K .
Output: a pruned dimension size d fi assigned to field f i . 1 Sort the architecture weights α i in the descending order:
α i = [α i j1 , • • • , α i j K ], satisfying α i j1 ≥ α i j2 ≥ • • • ≥ α i j K ; 2 sum = 0 ;
// The cumulative weight 3 d fi = 0 ; // The cumulative dimension size 4 for t ∈ [1, 2, . . . , K] do 5
d fi = d fi + c jt ;
// c jt is the embedding size of α i jt calculated from Eq.( 6) 
6 sum = sum + α i jt ; // </p><h2>publication_ref</h2> <p>[] </p><h2>figure_ref</h2> <p>[] </p><h2>table_ref</h2> <p>[] </p><h2>heading</h2> <p>One-level Optimization </p><h2>text</h2> <p>In this work, we reparameterize the problem of feature selection and dimension search as a structural search problem and relax the selection of different operators to be continuous and differentiable. We slightly abuse the symbol
A = [ α 1 , • • • , α N ]
to denote all the continuous architecture parameters and W(A) to represent the downstream DNN parameters. Different from DARTS-style works [7], [17], [19] that use bi-level optimization to iteratively update A and W(A), we follow the setting of [36] and use one-level optimization to simultaneously train A and W(A) on the training set T . In addition to being time-consuming, [36] empirically demonstrated that bi-level optimization might downgrade the final performance due to the accumulation of errors from multiple approximations. On the other hand, we argue that there are many causes that can affect the performance and stability of bi-level optimization, such as the size of the validation set and the switch interval during iterative training. Hence, we adopt one-level optimization for practicality and efficiency by simultaneously updating A and W(A) via gradient descent as follows:
∂ A L (T ; A, W (A)) and ∂ W(A) L (T ; A, W (A)). (8) </p><h2>publication_ref</h2> <p>['b6', 'b16', 'b18', 'b35', 'b35'] </p><h2>figure_ref</h2> <p>[] </p><h2>table_ref</h2> <p>[] </p><h2>heading</h2> <p>Retraining Stage </p><h2>text</h2> <p>After the pretraining stage, we can obtain the relative importance of different operators. We then seek to derive the optimal subset F ⊆ F and the corresponding dimension configuration C A . Retraining the target DNN model with F and C A aims to eliminate suboptimal influence since the unpicked fields in F and the redundant embedding dimensions are also involved during the pretraining stage. </p><h2>publication_ref</h2> <p>[] </p><h2>figure_ref</h2> <p>[] </p><h2>table_ref</h2> <p>[] </p><h2>heading</h2> <p>Input Configuration Derivation </p><h2>text</h2> <p>Despite the hard selector argmax being widely used in previous DARTS-style work [17], [19], we argue that it can lead to an inconsistency between the pretraining model and the retraining model, resulting in inferior performance. For instance, assume there is a field that has three candidate dimensions with corresponding weights of 0.33, 0.33, 0.34. It is difficult to judge which operator is better since the gap is too small, and dropping all of the relatively smaller operators can lead to a dilemma that the total weight of the dropped operators is much higher than the selected one. Moreover, due to randomness during DNN model training, the derived optimal operators can also be unstable. To alleviate such issues, we set a cumulative probability threshold (CPT) to flexibly adjust the minimum amount of information kept in the retraining stage, supplemented with a pruning algorithm to derive the embedding dimension d fi for each field f i . The details are presented in Algorithm 1. The intuition behind this is that embedding regions with higher weights contain more effective information and should be retained in preference during pruning.
Recall that d fi = 0 means that the corresponding field f i is useless and thus can be removed in the retraining stage. By applying Algorithm 1 to each field separately, we simultaneously complete feature selection and dimension search to obtain the pruned neural architecture of the retraining model. Compared with those selection algorithms based on the argmax operator, the proposed CPT-based pruning algorithm can generate more fine-grained embedding dimension configurations. Meanwhile, our algorithm can cover some common embedding search methods by flexibly adjusting the threshold. For example, the argmax operator in DART-style work [17], [19] becomes a special case with cpt = 0, while cpt = 1 means retaining all regions. </p><h2>publication_ref</h2> <p>['b16', 'b18', 'b16', 'b18'] </p><h2>figure_ref</h2> <p>[] </p><h2>table_ref</h2> <p>[] </p><h2>heading</h2> <p>Model Retraining </p><h2>text</h2> <p>As shown in Figure 2, we discard useless fields and redundant dimensions to redefine the architecture of the retraining model. Specifically, we only allocate embedding dimensions to fields in F according to C A and concatenate all of these dimensions to feed into the subsequent DNN model. Note that as the dimension size of the embedding layer changes, the first layer of the DNN model needs to be adjusted accordingly. In addition, batch normalization is not used during retraining since there are no comparisons between different operators in each field. All parameters in the retraining model will be trained on the training set T by only minimizing the cross-entropy loss. </p><h2>publication_ref</h2> <p>[] </p><h2>figure_ref</h2> <p>['fig_1'] </p><h2>table_ref</h2> <p>[] </p><h2>heading</h2> <p>Complexity Analysis and Discussion </p><h2>text</h2> <p>Similar to FM-style approaches [47], [48], [49], the space complexity of i-Razor is near O(nd K ), where n is the total number of features contained in all N fields and d K is the largest candidate dimension in the search space. In terms of training speed, the continuous relaxation and embedding transformation in i-Razor has a complexity of O(N Kd K ), which slows down the training when setting up candidates of large embedding dimensions. Overall, the proposed i-Razor elegantly converts the joint optimization of feature selection and dimension search into an operator selection process, which improves the flexibility and interpretability of feature engineering, while goes beyond the convention of "feature selection before dimension search". Given a suitable search space, i-Razor is efficient and conforms to the demand of recommendation scenarios. </p><h2>publication_ref</h2> <p>['b46', 'b47', 'b48'] </p><h2>figure_ref</h2> <p>[] </p><h2>table_ref</h2> <p>[] </p><h2>heading</h2> <p>EXPERIMENTS </p><h2>text</h2> <p>Extensive experiments were conducted on two well-known public datasets to answer the following research questions:
• RQ1: How does i-Razor perform when compared to other input search methods? • RQ2: How do key components, i.e., the setting of d 1 = 0 and the CPT-based pruning algorithm, affect the performance? • RQ3: How do different hyperparameters affect i-Razor?
• RQ4: How does the search space setting affect i-Razor?
• RQ5: What is the interpretability of i-Razor?
• RQ6: What is the compatibility of i-Razor with various deep recommendation models, and can the learned configurations from one model serve as a valuable reference for others on the same dataset? </p><h2>publication_ref</h2> <p>[] </p><h2>figure_ref</h2> <p>[] </p><h2>table_ref</h2> <p>[] </p><h2>heading</h2> <p>Datasets </p><h2>text</h2> <p>Experiments were conducted on the following two public datasets:
• Criteo 2 : Criteo is a benchmark industry dataset, which contains one month of click logs. In our experiments, we use "data 6-12" as the training set while selecting "day 13" for evaluation. Due to the huge volume of data and the severe label imbalance (only 3% positive samples), negative down-sampling is applied to keep the positive ratio roughly at 50%. • Avazu 3 : Avazu dataset was provided for the CTR prediction challenge on Kaggle. 80% of randomly shuffled data is allotted for training and validation while the rest 20% for testing.
To make a fair comparison between different methods, we process the two datasets following the settings 4 in AutoFIS [36] and PIN [45]. Meanwhile, to demonstrate the capability of feature selection from noisy fields, we augment the number of fields in the two datasets by brute-forcing all cross fields, yielding 39 + C 2 39 = 780 fields in Criteo and 24 + C 2 24 = 300 fields in Avazu. We renamed the new datasets as Criteo-FG and Avazu-FG. Some key statistics of the aforementioned datasets are summarized in Table 1.  L1 and L2 control the weights of the L1-norm and L2-norm loss respectively; TopK represents the field search space, where each element means the retention of the topK fields; τ is the temperature; λ is the parameter that controls the weight of the regularization term L p ; cpt is the threshold in the retraining stage. </p><h2>publication_ref</h2> <p>['b35', 'b44'] </p><h2>figure_ref</h2> <p>[] </p><h2>table_ref</h2> <p>['tab_2'] </p><h2>heading</h2> <p>Experimental Setup </p><h2>text</h2> <p> </p><h2>publication_ref</h2> <p>[] </p><h2>figure_ref</h2> <p>[] </p><h2>table_ref</h2> <p>[] </p><h2>heading</h2> <p>Baselines </p><h2>text</h2> <p>To evaluate the effectiveness of i-Razor, we select the following state-of-the-art methods as baselines:
1) Feature selection methods. Fixed dimension embedding (FDE) specifies a uniform dimension size for all fields via traversal search and is paired with all feature selection methods to test the effectiveness of feature selection alone. FTRL [50] is a widely used feature selection algorithm that incorporates L1 and L2 regularization and has excellent sparsity and convergence properties. AutoField [37] is an AutoML framework that can adaptively evaluate the inclusion/exclusion probability for each feature. Following the experimental setup in the original paper, we evaluated model performance by keeping varying numbers of features and identified the configuration that achieved the best performance. AdaFS [38] employs a control network to score input data samples and adaptively select the most informative features. Mirroring AdaFS-hard [38] in the original study, we performed hard feature selection to retain different proportions of features in order of importance and discarded the remainder. AutoFIS [36] is a state-of-theart method to select important feature interactions in FMbased methods 5 . Notice that we tried different deletion ratios ranging from 0 to 1 with an interval of 0.1, and only presented the best results with the highest AUC metric. The feature selection performance of i-Razor is evaluated by just removing the fields dominated by dimension 0. 2) Dimension search methods. AutoDim [19] and DARTS [17] are two state-of-the-art methods that bear the closest resemblance to i-Razor and can automatically select appropriate dimensions for different fields. Both methods perform dimension search directly on all fields without feature selection to evaluate the validity of naive dimension optimization. Unlike AutoDim [19] and i-Razor, different dimension candidates in DARTS [17] do not share dimension blocks with each other. DARTS needs to allocate total K j=1 D j dimensions to each field in the pretraining model and relies on the argmax operator as Autodim for dimension selection.
3) Hybrid methods. In addition to our approach, we compare the training mechanism of feature selection followed by dimension search, and the corresponding baselines are designated as 'AutoFIS w/ AutoDim' and 'AutoFIS w/ i-Razor'. </p><h2>publication_ref</h2> <p>['b49', 'b36', 'b37', 'b37', 'b35', 'b18', 'b16', 'b18', 'b16'] </p><h2>figure_ref</h2> <p>[] </p><h2>table_ref</h2> <p>[] </p><h2>heading</h2> <p>Evaluation Metrics </p><h2>text</h2> <p>We evaluate the performance of our proposed method on the classical CTR prediction task. The evaluation metrics include Area Under the ROC Curve (AUC), the number of selected fields (Fields), the total embedding dimensions used in the retraining stage (Dims), and the parameter quantity of all embeddings (Params) 6 . A higher AUC indicates a better recommendation performance. It is noteworthy that a slightly higher AUC at 0.001-level is regarded as significant for the CTR prediction task [19], [51]. We naturally introduce Dims and Fields as straightforward metrics since all methods aim to reduce model parameters through feature selection or dimension search. </p><h2>publication_ref</h2> <p>['b18', 'b50'] </p><h2>figure_ref</h2> <p>[] </p><h2>table_ref</h2> <p>[] </p><h2>heading</h2> <p>Implementation </p><h2>text</h2> <p>We implement all algorithms in Tensorflow [52] and use the Adagrad [53] optimizer for gradient descent. For a fair comparison, for each baseline, we have reproduced it with reference to the original paper. Table 2 summarizes the key parameters used in our experiments. For AutoDim, we adopt the same annealing temperature τ = max(0.01, 1 -0.00005 • t) provided in the original paper [19]. The code is publicly available on https://github.com/YaoYao1995/i-Razor.git.
6. Dims and Params are roughly calculated by
N i=1 d f i and N i=1 |f i | × d f i , respectively. </p><h2>publication_ref</h2> <p>['b51', 'b52', 'b18'] </p><h2>figure_ref</h2> <p>[] </p><h2>table_ref</h2> <p>['tab_4'] </p><h2>heading</h2> <p>Overall Performance (RQ1) </p><h2>text</h2> <p>Performance improvement can be an arduous process in real-world recommender systems, so we present the best performance configuration corresponding to each baseline in Table 3 and Table 4. There are several observations:
• Proper feature selection leads to competitive or even superior performance compared with FDE. This indicates that filtering out less informative and predictive features is beneficial for recommendation models. Additionally, we observe that the discarded fields have a small cardinality (i.e., a small number of features per field) on Avazu, which limits the savings in Params. This emphasizes the importance of further exploring dimension search techniques. • Comparing all dimension search methods with FDE, we observe that dimension search methods generally achieve more significant parameter savings. However, on Criteo, existing dimension search methods assign dimensions to each field, which fails to eliminate the Feature selection eliminates less informative features without compromising model performance, while dimension search effectively reduces parameter quantities. The findings emphasize the importance of integrating these optimization processes, as evidenced by the superior performance of i-Razor compared to other methods. </p><h2>publication_ref</h2> <p>[] </p><h2>figure_ref</h2> <p>[] </p><h2>table_ref</h2> <p>['tab_6', 'tab_7'] </p><h2>heading</h2> <p>Ablation Study (RQ2) </p><h2>text</h2> <p>In i-Razor, the introduced dimension 0 in the search space plays an important role to filter out the useless fields. Meanwhile, the proposed CPT-based pruning algorithm makes it easy and flexible to derive the desired embedding configuration. To further study the role of these two components, we propose and compare the following four variants:
1) 'i-Razor w/ 0': using the CPT-based pruning algorithm while introducing dimension 0 into the search space; 2) 'i-Razor w/o 0': only using the CPT-based pruning algorithm; 3) 'argmax w/ 0': using the argmax selector while introducing dimension 0 into the search space; 4) 'argmax w/o 0': only using the argmax selector.
To be specific, we consider two kinds of candidate dimension sets, i.e., D 1 = 0, 1, 3, 6, 10 and D 2 = 1, 3, 6, 10.
The best results of these variants on Criteo-FG and Avazu-FG are shown in Table 5 and we draw the following conclusions:
• By comparing variant (1) with ( 2) and comparing variant (3) with ( 4), we observe that the variants with dimension 0 (w/ 0) consistently outperform those without dimension 0 (w/o 0). The reason is that the introduced dimension 0 can increase the distinction between different fields and avoid assigning dimensions to redundant fields. This observation suggests that the introduction of dimension 0 can benefit recommender systems where noisy and redundant fields exist, especially in the face of thousands of fields in large-scale industrial recommender systems. • By comparing variant (1) with (3) and comparing variant
(2) with ( 4), we observe that the CPT-based pruning algorithm can achieve a performance gain at the expense of preserving more fields and parameters. Recall that the argmax-based pruning algorithm is a special case of the CPT-based pruning algorithm (by setting cpt = 0), we conclude that the CPT-based pruning algorithm is more suitable for real-world recommender systems due to its flexibility to obtain effective coordination between model performance and memory overhead. In summary, both components have their advantages, such as dimension 0 contributes to feature selection and parameter reduction, while the CPT-based pruning algorithm further helps the model to arrive at better input configurations. </p><h2>publication_ref</h2> <p>[] </p><h2>figure_ref</h2> <p>[] </p><h2>table_ref</h2> <p>['tab_8'] </p><h2>heading</h2> <p>Hyperparameter Study (RQ3) </p><h2>text</h2> <p>There are two main hyperparameters involved in i-Razor: the threshold cpt and the weight coefficient λ of the regularization term L p . To study the impact of cpt, we investigate how i-Razor performs with the change of cpt, while fixing other parameters (τ = 0.05, λ = 0.0001). As shown in Figure 4, larger cpt leads to larger value of Params, which is straightforward as more embedding regions and fields would be retained. It can be seen that when cpt is relatively small (cpt ≤ 0.3), AUC is improved with the increase of Params. However, when cpt ≥ 0.4, the performance of the model will decrease significantly. The potential reason is that with more fields and embedding dimensions preserved, the DNN model may require more data to eliminate the side-effect of redundant parameters. Meanwhile, the experimental results indicate that larger λ usually corresponds to less Params, which reflects the effectiveness of L p in controlling the number of parameters. However, when L p dominates the gradient update of the architecture parameters, model performance tends to drop sharply since some useful embedding regions or fields with large cardinality may be incorrectly filtered out. In short, both cpt and λ are crucial hyperparameters in i-Razor, and we empirically find them to be effective and parameter insensitive when taking smaller values. In practical use, the appropriate values can be found by performing a grid search on recommended intervals: cpt ∈ [0, 0.4] and λ ∈ [0, 0.01]. </p><h2>publication_ref</h2> <p>[] </p><h2>figure_ref</h2> <p>['fig_2'] </p><h2>table_ref</h2> <p>[] </p><h2>heading</h2> <p>Candidate Dimension Set Study (RQ4) </p><h2>text</h2> <p>In this subsection, we study how different dimension partitioning schemes for the candidate dimension sets affect model performance. Specifically, we consider three heuristic settings: uniform splits 0, 0 0 1 1 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 1 0 2 0 2 2 1 0 3 2 0 1 0 0 2 0 1 1 0 0 0 1 1 1 0 1 1 0 0 1 0 0 2 0 0 0 0 3 0 0 0 2 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 2 0 1 1 2 2 2 0 1 1 2 0 0 2 1 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 2 1 0 0 0 1 1 0 0 0 0 1 0 0 0 0 1 1 0 2 0 0 1 2 0 0 1 1 2 2 0 1 2 1 1 0 0 2 0 1 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0.0 0.5   </p><h2>publication_ref</h2> <p>[] </p><h2>figure_ref</h2> <p>[] </p><h2>table_ref</h2> <p>[] </p><h2>heading</h2> <p>Dimension Analysis (RQ5) </p><h2>text</h2> <p>We visualize the output configuration of the CPT-based pruning algorithm to get a better understanding of i-Razor. The result on Avazu-FG with the search space D = 0, 1, 2, 4, 6 is presented in Figure 5 as an example, and similar results obtained with other settings are omitted due to limited space. We can observe that important single fields such as "site id", "app id", and "device ip", generate many cross fields to be kept with. It makes sense since item features, context features and position features are essential features in recommender systems. For continuous fields, we can infer that "C17" and "C20" are relatively more important than others as they generate more effective cross fields. Meanwhile, we can directly pick out useful cross fields according to their derived embedding dimension size. For instance, "site id * C14", "site domain * mday", "app category * device model", and "device model * C20" are expected to be beneficial cross fields, since they are assigned with the largest dimension size. Furthermore, we can find the configuration matrix is sparse, where only 75 out of the 300 fields are greater than 0. This means that we can directly increase the high-order interaction between different fields to enrich the feature space, and rely on i-Razor to remove the superfluous fields. The visualization result also supports the conclusion that i-Razor allows a fine-grained pruning procedure so that discriminative fields can be assigned the appropriate dimension according to their predictive capacity. Such findings demonstrate i-Razor's capability to automatically assess the quality of fields, which facilitates the screening of new features and can guide feature engineering iterations in industrial recommender systems. </p><h2>publication_ref</h2> <p>[] </p><h2>figure_ref</h2> <p>['fig_3'] </p><h2>table_ref</h2> <p>[] </p><h2>heading</h2> <p>Compatibility and Transferability Study (RQ6) </p><h2>text</h2> <p>In this subsection, we investigate the compatibility and transferability of i-Razor. We examine its applicability beyond multi-layer perceptron (MLP) models [54] and assess the effectiveness of the derived input configurations in different recommendation architectures. Our experiments focus on advanced deep recommendation models such as DeepFM [47], xDeepFM [55], and IPNN [45], [56] using the Avazu dataset.
To ensure dimension uniformity for feature interaction operations, we introduce different MLP layers for each field to perform linear transformations on embeddings. We compare three configurations in Table 7: FDE, which evenly allocates 30 dimensions to all fields; MLP, which transfers the input configuration learned from the MLP model; and model-consistent configurations specifically derived from each target model.
Our experiments yield the following key findings:
• Directly adopting the input configuration learned from the MLP model to other deep recommendation models results in the removal of irrelevant fields, parameter compression, and improved AUC performance. These findings demonstrate the instructiveness of the MLP input configuration for enhancing the performance of other deep recommender systems on the same dataset. • Model-consistent configurations derived specifically for each target model outperform the other two competitors. This highlights the compatibility of i-Razor with various deep recommendation models and emphasizes the importance of using model-specific configurations to achieve optimal performance. Overall, our experiments confirm the compatibility and transferability of i-Razor, showcasing its ability to generate input configurations that improve model performance and parameter efficiency across various deep models. </p><h2>publication_ref</h2> <p>['b53', 'b46', 'b54', 'b44', 'b55'] </p><h2>figure_ref</h2> <p>[] </p><h2>table_ref</h2> <p>['tab_11'] </p><h2>heading</h2> <p>CONCLUSION </p><h2>text</h2> <p>In this paper, we address the challenge of feature selection and dimension search in modern DNN-based recommender systems. To this end, we propose a differentiable framework that selects useful fields from a given set while assigning adaptive embedding dimensions. The proposed method acts on the embedding layer and can be integrated into various network architectures to improve the recommendation  </p><h2>publication_ref</h2> <p>[] </p><h2>figure_ref</h2> <p>[] </p><h2>table_ref</h2> <p>[] </p>